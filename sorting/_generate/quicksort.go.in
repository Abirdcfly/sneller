// Copyright (C) 2022 Sneller, Inc.
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

package sorting

// Code generated by generator.go; DO NOT EDIT.

import (
	"fmt"
)

{{ range . }}
type scalarSortArguments{{.TypeSuffix}} struct {
	keys	[]{{.KeyType}}
	indices []{{.IndexType}}
	consumer SortedDataConsumer
	mindistance int
}

func quicksort{{.TypeSuffix}}(keys []{{.KeyType}}, indices []{{.IndexType}}, pool ThreadPool, direction Direction, consumer SortedDataConsumer, rp *RuntimeParameters) error {
	if len(keys) != len(indices) {
		return fmt.Errorf("keys and indices lengths have to be equal")
	}

	args := scalarSortArguments{{.TypeSuffix}}{
		keys: keys,
		indices: indices,
		consumer: consumer,
		mindistance: rp.QuicksortSplitThreshold}

	if direction == Ascending {
		pool.Enqueue(0, len(keys) - 1, scalarQuicksortAsc{{.TypeSuffix}}, args)
	} else {
		pool.Enqueue(0, len(keys) - 1, scalarQuicksortDesc{{.TypeSuffix}}, args)
	}

	return nil
}
{{ end }}
