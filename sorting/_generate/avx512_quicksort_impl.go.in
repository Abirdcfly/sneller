// Copyright (C) 2022 Sneller, Inc.
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

package sorting

// Code generated by generator.go; DO NOT EDIT.

{{ range . }}
func quicksort{{.Suffix}}(left int, right int, args interface{}, pool ThreadPool) {

	arguments := args.(quicksortAVX512{{.TypeSuffix}}Arguments)

	distance := right - left + 1
	if countingSort{{.Suffix}}(&arguments.keys[left], &arguments.indices[left], distance) {
		arguments.consumer.Notify(left, right)
		return
	}

	if distance < arguments.mindistance {
		quicksort{{.Suffix}}SingleThread(arguments.keys, arguments.indices, left, right)
		arguments.consumer.Notify(left, right)
		return
	}

	pivot := arguments.keys[(left+right)/2]

	unprocessedLeft, unprocessedRight := partition{{.Suffix}}(&arguments.keys[0], &arguments.indices[0], pivot, left, right)

	i, j := safeScalarPartition{{.Suffix}}(arguments.keys, arguments.indices, pivot, unprocessedLeft, unprocessedRight)

	if left <= j {
		pool.Enqueue(left, j, quicksort{{.Suffix}}, args)
	}

	if i <= right {
		pool.Enqueue(i, right, quicksort{{.Suffix}}, args)
	}

	if j + 1 <= i - 1 {
		arguments.consumer.Notify(j + 1, i - 1)
	}
}

func quicksort{{.Suffix}}SingleThread(keys []{{.KeyType}}, indices []{{.IndexType}}, left int, right int) {

	distance := right - left + 1

	if countingSort{{.Suffix}}(&keys[left], &indices[left], distance) {
		return
	}

	pivot := keys[(left+right)/2]

	unprocessedLeft, unprocessedRight := partition{{.Suffix}}(&keys[0], &indices[0], pivot, left, right)

	i, j := safeScalarPartition{{.Suffix}}(keys, indices, pivot, unprocessedLeft, unprocessedRight)

	if left < j {
		quicksort{{.Suffix}}SingleThread(keys, indices, left, j)
	}

	if i < right {
		quicksort{{.Suffix}}SingleThread(keys, indices, i, right)
	}
}

func safeScalarPartition{{.Suffix}}(keys []{{.KeyType}}, indices []{{.IndexType}}, pivot {{.KeyType}}, left int, right int) (int, int) {
	for left <= right {
		for keys[left] {{.CmpLess}} pivot {
			left += 1
			if left > right {
				return left, right
			}
		}

		for keys[right] {{.CmpGreater}} pivot {
			right -= 1
			if left > right {
				return left, right
			}

		}

		if left <= right {
			keys[left], keys[right] = keys[right], keys[left]
			indices[left], indices[right] = indices[right], indices[left]

			left += 1
			right -= 1
		}
	}

	return left, right
}
{{ end }}
