// Copyright (C) 2022 Sneller, Inc.
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

package sort

// Code generated by generator.go; DO NOT EDIT.

import (
	"math/rand"
	"runtime"
	"sort"
	"testing"
)

type InputType int

const (
	Random InputType = iota
	Random1to10
	Random1to100
	AscendingMaxInt
	Ascending1to10
	Ascending1to100
	DescendingMaxInt
	Descending1to10
	Descending1to100
)

// make it less than (2^31 - 1) to be safe for all types, signed and unsigned
const maxrand int = 10000000

// --- unit tests -----------------------------------

func TestQuicksortAVX512AscFloat64Random(t *testing.T) {
	quicksortAVX512AscSingleThreadTestFloat64(t, 100, Random)
}

func TestQuicksortAVX512DescFloat64Random(t *testing.T) {
	quicksortAVX512DescSingleThreadTestFloat64(t, 100, Random)
}

func TestQuicksortAVX512AscFloat64Random1to10(t *testing.T) {
	quicksortAVX512AscSingleThreadTestFloat64(t, 100, Random1to10)
}

func TestQuicksortAVX512DescFloat64Random1to10(t *testing.T) {
	quicksortAVX512DescSingleThreadTestFloat64(t, 100, Random1to10)
}

func TestQuicksortAVX512AscFloat64Random1to100(t *testing.T) {
	quicksortAVX512AscSingleThreadTestFloat64(t, 100, Random1to100)
}

func TestQuicksortAVX512DescFloat64Random1to100(t *testing.T) {
	quicksortAVX512DescSingleThreadTestFloat64(t, 100, Random1to100)
}

func TestQuicksortAVX512AscFloat64AscendingMaxInt(t *testing.T) {
	quicksortAVX512AscSingleThreadTestFloat64(t, 100, AscendingMaxInt)
}

func TestQuicksortAVX512DescFloat64AscendingMaxInt(t *testing.T) {
	quicksortAVX512DescSingleThreadTestFloat64(t, 100, AscendingMaxInt)
}

func TestQuicksortAVX512AscFloat64Ascending1to10(t *testing.T) {
	quicksortAVX512AscSingleThreadTestFloat64(t, 100, Ascending1to10)
}

func TestQuicksortAVX512DescFloat64Ascending1to10(t *testing.T) {
	quicksortAVX512DescSingleThreadTestFloat64(t, 100, Ascending1to10)
}

func TestQuicksortAVX512AscFloat64Ascending1to100(t *testing.T) {
	quicksortAVX512AscSingleThreadTestFloat64(t, 100, Ascending1to100)
}

func TestQuicksortAVX512DescFloat64Ascending1to100(t *testing.T) {
	quicksortAVX512DescSingleThreadTestFloat64(t, 100, Ascending1to100)
}

func TestQuicksortAVX512AscFloat64DescendingMaxInt(t *testing.T) {
	quicksortAVX512AscSingleThreadTestFloat64(t, 100, DescendingMaxInt)
}

func TestQuicksortAVX512DescFloat64DescendingMaxInt(t *testing.T) {
	quicksortAVX512DescSingleThreadTestFloat64(t, 100, DescendingMaxInt)
}

func TestQuicksortAVX512AscFloat64Descending1to10(t *testing.T) {
	quicksortAVX512AscSingleThreadTestFloat64(t, 100, Descending1to10)
}

func TestQuicksortAVX512DescFloat64Descending1to10(t *testing.T) {
	quicksortAVX512DescSingleThreadTestFloat64(t, 100, Descending1to10)
}

func TestQuicksortAVX512AscFloat64Descending1to100(t *testing.T) {
	quicksortAVX512AscSingleThreadTestFloat64(t, 100, Descending1to100)
}

func TestQuicksortAVX512DescFloat64Descending1to100(t *testing.T) {
	quicksortAVX512DescSingleThreadTestFloat64(t, 100, Descending1to100)
}

func TestQuicksortAVX512AscUint64Random(t *testing.T) {
	quicksortAVX512AscSingleThreadTestUint64(t, 100, Random)
}

func TestQuicksortAVX512DescUint64Random(t *testing.T) {
	quicksortAVX512DescSingleThreadTestUint64(t, 100, Random)
}

func TestQuicksortAVX512AscUint64Random1to10(t *testing.T) {
	quicksortAVX512AscSingleThreadTestUint64(t, 100, Random1to10)
}

func TestQuicksortAVX512DescUint64Random1to10(t *testing.T) {
	quicksortAVX512DescSingleThreadTestUint64(t, 100, Random1to10)
}

func TestQuicksortAVX512AscUint64Random1to100(t *testing.T) {
	quicksortAVX512AscSingleThreadTestUint64(t, 100, Random1to100)
}

func TestQuicksortAVX512DescUint64Random1to100(t *testing.T) {
	quicksortAVX512DescSingleThreadTestUint64(t, 100, Random1to100)
}

func TestQuicksortAVX512AscUint64AscendingMaxInt(t *testing.T) {
	quicksortAVX512AscSingleThreadTestUint64(t, 100, AscendingMaxInt)
}

func TestQuicksortAVX512DescUint64AscendingMaxInt(t *testing.T) {
	quicksortAVX512DescSingleThreadTestUint64(t, 100, AscendingMaxInt)
}

func TestQuicksortAVX512AscUint64Ascending1to10(t *testing.T) {
	quicksortAVX512AscSingleThreadTestUint64(t, 100, Ascending1to10)
}

func TestQuicksortAVX512DescUint64Ascending1to10(t *testing.T) {
	quicksortAVX512DescSingleThreadTestUint64(t, 100, Ascending1to10)
}

func TestQuicksortAVX512AscUint64Ascending1to100(t *testing.T) {
	quicksortAVX512AscSingleThreadTestUint64(t, 100, Ascending1to100)
}

func TestQuicksortAVX512DescUint64Ascending1to100(t *testing.T) {
	quicksortAVX512DescSingleThreadTestUint64(t, 100, Ascending1to100)
}

func TestQuicksortAVX512AscUint64DescendingMaxInt(t *testing.T) {
	quicksortAVX512AscSingleThreadTestUint64(t, 100, DescendingMaxInt)
}

func TestQuicksortAVX512DescUint64DescendingMaxInt(t *testing.T) {
	quicksortAVX512DescSingleThreadTestUint64(t, 100, DescendingMaxInt)
}

func TestQuicksortAVX512AscUint64Descending1to10(t *testing.T) {
	quicksortAVX512AscSingleThreadTestUint64(t, 100, Descending1to10)
}

func TestQuicksortAVX512DescUint64Descending1to10(t *testing.T) {
	quicksortAVX512DescSingleThreadTestUint64(t, 100, Descending1to10)
}

func TestQuicksortAVX512AscUint64Descending1to100(t *testing.T) {
	quicksortAVX512AscSingleThreadTestUint64(t, 100, Descending1to100)
}

func TestQuicksortAVX512DescUint64Descending1to100(t *testing.T) {
	quicksortAVX512DescSingleThreadTestUint64(t, 100, Descending1to100)
}

// --- benchmarks -----------------------------------

func BenchmarkGolangQuicksortFloat64RandomSize100000(b *testing.B) {
	golangQuicksortBenchmarkFloat64(b, 100000, Random)
}

func BenchmarkGolangQuicksortSingleThreadFloat64RandomSize100000(b *testing.B) {
	golangQuicksortSingleThreadBenchmarkFloat64(b, 100000, Random)
}

func BenchmarkAVX512QuicksortFloat64RandomSize100000(b *testing.B) {
	quicksortAVX512BenchmarkFloat64(b, 100000, Random)
}

func BenchmarkAVX512QuicksortSingleThreadFloat64RandomSize100000(b *testing.B) {
	quicksortAVX512SingleThreadBenchmarkFloat64(b, 100000, Random)
}

func BenchmarkGolangStdSortSingleThreadFloat64RandomSize100000(b *testing.B) {
	golangStdSortSingleThreadBenchmarkFloat64(b, 100000, Random)
}

func BenchmarkGolangQuicksortFloat64RandomSize1000000(b *testing.B) {
	golangQuicksortBenchmarkFloat64(b, 1000000, Random)
}

func BenchmarkGolangQuicksortSingleThreadFloat64RandomSize1000000(b *testing.B) {
	golangQuicksortSingleThreadBenchmarkFloat64(b, 1000000, Random)
}

func BenchmarkAVX512QuicksortFloat64RandomSize1000000(b *testing.B) {
	quicksortAVX512BenchmarkFloat64(b, 1000000, Random)
}

func BenchmarkAVX512QuicksortSingleThreadFloat64RandomSize1000000(b *testing.B) {
	quicksortAVX512SingleThreadBenchmarkFloat64(b, 1000000, Random)
}

func BenchmarkGolangStdSortSingleThreadFloat64RandomSize1000000(b *testing.B) {
	golangStdSortSingleThreadBenchmarkFloat64(b, 1000000, Random)
}

func BenchmarkGolangQuicksortFloat64RandomSize10000000(b *testing.B) {
	golangQuicksortBenchmarkFloat64(b, 10000000, Random)
}

func BenchmarkGolangQuicksortSingleThreadFloat64RandomSize10000000(b *testing.B) {
	golangQuicksortSingleThreadBenchmarkFloat64(b, 10000000, Random)
}

func BenchmarkAVX512QuicksortFloat64RandomSize10000000(b *testing.B) {
	quicksortAVX512BenchmarkFloat64(b, 10000000, Random)
}

func BenchmarkAVX512QuicksortSingleThreadFloat64RandomSize10000000(b *testing.B) {
	quicksortAVX512SingleThreadBenchmarkFloat64(b, 10000000, Random)
}

func BenchmarkGolangStdSortSingleThreadFloat64RandomSize10000000(b *testing.B) {
	golangStdSortSingleThreadBenchmarkFloat64(b, 10000000, Random)
}

func BenchmarkGolangQuicksortFloat64Random1to10Size100000(b *testing.B) {
	golangQuicksortBenchmarkFloat64(b, 100000, Random1to10)
}

func BenchmarkGolangQuicksortSingleThreadFloat64Random1to10Size100000(b *testing.B) {
	golangQuicksortSingleThreadBenchmarkFloat64(b, 100000, Random1to10)
}

func BenchmarkAVX512QuicksortFloat64Random1to10Size100000(b *testing.B) {
	quicksortAVX512BenchmarkFloat64(b, 100000, Random1to10)
}

func BenchmarkAVX512QuicksortSingleThreadFloat64Random1to10Size100000(b *testing.B) {
	quicksortAVX512SingleThreadBenchmarkFloat64(b, 100000, Random1to10)
}

func BenchmarkGolangStdSortSingleThreadFloat64Random1to10Size100000(b *testing.B) {
	golangStdSortSingleThreadBenchmarkFloat64(b, 100000, Random1to10)
}

func BenchmarkGolangQuicksortFloat64Random1to10Size1000000(b *testing.B) {
	golangQuicksortBenchmarkFloat64(b, 1000000, Random1to10)
}

func BenchmarkGolangQuicksortSingleThreadFloat64Random1to10Size1000000(b *testing.B) {
	golangQuicksortSingleThreadBenchmarkFloat64(b, 1000000, Random1to10)
}

func BenchmarkAVX512QuicksortFloat64Random1to10Size1000000(b *testing.B) {
	quicksortAVX512BenchmarkFloat64(b, 1000000, Random1to10)
}

func BenchmarkAVX512QuicksortSingleThreadFloat64Random1to10Size1000000(b *testing.B) {
	quicksortAVX512SingleThreadBenchmarkFloat64(b, 1000000, Random1to10)
}

func BenchmarkGolangStdSortSingleThreadFloat64Random1to10Size1000000(b *testing.B) {
	golangStdSortSingleThreadBenchmarkFloat64(b, 1000000, Random1to10)
}

func BenchmarkGolangQuicksortFloat64Random1to10Size10000000(b *testing.B) {
	golangQuicksortBenchmarkFloat64(b, 10000000, Random1to10)
}

func BenchmarkGolangQuicksortSingleThreadFloat64Random1to10Size10000000(b *testing.B) {
	golangQuicksortSingleThreadBenchmarkFloat64(b, 10000000, Random1to10)
}

func BenchmarkAVX512QuicksortFloat64Random1to10Size10000000(b *testing.B) {
	quicksortAVX512BenchmarkFloat64(b, 10000000, Random1to10)
}

func BenchmarkAVX512QuicksortSingleThreadFloat64Random1to10Size10000000(b *testing.B) {
	quicksortAVX512SingleThreadBenchmarkFloat64(b, 10000000, Random1to10)
}

func BenchmarkGolangStdSortSingleThreadFloat64Random1to10Size10000000(b *testing.B) {
	golangStdSortSingleThreadBenchmarkFloat64(b, 10000000, Random1to10)
}

func BenchmarkGolangQuicksortFloat64Random1to100Size100000(b *testing.B) {
	golangQuicksortBenchmarkFloat64(b, 100000, Random1to100)
}

func BenchmarkGolangQuicksortSingleThreadFloat64Random1to100Size100000(b *testing.B) {
	golangQuicksortSingleThreadBenchmarkFloat64(b, 100000, Random1to100)
}

func BenchmarkAVX512QuicksortFloat64Random1to100Size100000(b *testing.B) {
	quicksortAVX512BenchmarkFloat64(b, 100000, Random1to100)
}

func BenchmarkAVX512QuicksortSingleThreadFloat64Random1to100Size100000(b *testing.B) {
	quicksortAVX512SingleThreadBenchmarkFloat64(b, 100000, Random1to100)
}

func BenchmarkGolangStdSortSingleThreadFloat64Random1to100Size100000(b *testing.B) {
	golangStdSortSingleThreadBenchmarkFloat64(b, 100000, Random1to100)
}

func BenchmarkGolangQuicksortFloat64Random1to100Size1000000(b *testing.B) {
	golangQuicksortBenchmarkFloat64(b, 1000000, Random1to100)
}

func BenchmarkGolangQuicksortSingleThreadFloat64Random1to100Size1000000(b *testing.B) {
	golangQuicksortSingleThreadBenchmarkFloat64(b, 1000000, Random1to100)
}

func BenchmarkAVX512QuicksortFloat64Random1to100Size1000000(b *testing.B) {
	quicksortAVX512BenchmarkFloat64(b, 1000000, Random1to100)
}

func BenchmarkAVX512QuicksortSingleThreadFloat64Random1to100Size1000000(b *testing.B) {
	quicksortAVX512SingleThreadBenchmarkFloat64(b, 1000000, Random1to100)
}

func BenchmarkGolangStdSortSingleThreadFloat64Random1to100Size1000000(b *testing.B) {
	golangStdSortSingleThreadBenchmarkFloat64(b, 1000000, Random1to100)
}

func BenchmarkGolangQuicksortFloat64Random1to100Size10000000(b *testing.B) {
	golangQuicksortBenchmarkFloat64(b, 10000000, Random1to100)
}

func BenchmarkGolangQuicksortSingleThreadFloat64Random1to100Size10000000(b *testing.B) {
	golangQuicksortSingleThreadBenchmarkFloat64(b, 10000000, Random1to100)
}

func BenchmarkAVX512QuicksortFloat64Random1to100Size10000000(b *testing.B) {
	quicksortAVX512BenchmarkFloat64(b, 10000000, Random1to100)
}

func BenchmarkAVX512QuicksortSingleThreadFloat64Random1to100Size10000000(b *testing.B) {
	quicksortAVX512SingleThreadBenchmarkFloat64(b, 10000000, Random1to100)
}

func BenchmarkGolangStdSortSingleThreadFloat64Random1to100Size10000000(b *testing.B) {
	golangStdSortSingleThreadBenchmarkFloat64(b, 10000000, Random1to100)
}

func BenchmarkGolangQuicksortFloat64AscendingMaxIntSize100000(b *testing.B) {
	golangQuicksortBenchmarkFloat64(b, 100000, AscendingMaxInt)
}

func BenchmarkGolangQuicksortSingleThreadFloat64AscendingMaxIntSize100000(b *testing.B) {
	golangQuicksortSingleThreadBenchmarkFloat64(b, 100000, AscendingMaxInt)
}

func BenchmarkAVX512QuicksortFloat64AscendingMaxIntSize100000(b *testing.B) {
	quicksortAVX512BenchmarkFloat64(b, 100000, AscendingMaxInt)
}

func BenchmarkAVX512QuicksortSingleThreadFloat64AscendingMaxIntSize100000(b *testing.B) {
	quicksortAVX512SingleThreadBenchmarkFloat64(b, 100000, AscendingMaxInt)
}

func BenchmarkGolangStdSortSingleThreadFloat64AscendingMaxIntSize100000(b *testing.B) {
	golangStdSortSingleThreadBenchmarkFloat64(b, 100000, AscendingMaxInt)
}

func BenchmarkGolangQuicksortFloat64AscendingMaxIntSize1000000(b *testing.B) {
	golangQuicksortBenchmarkFloat64(b, 1000000, AscendingMaxInt)
}

func BenchmarkGolangQuicksortSingleThreadFloat64AscendingMaxIntSize1000000(b *testing.B) {
	golangQuicksortSingleThreadBenchmarkFloat64(b, 1000000, AscendingMaxInt)
}

func BenchmarkAVX512QuicksortFloat64AscendingMaxIntSize1000000(b *testing.B) {
	quicksortAVX512BenchmarkFloat64(b, 1000000, AscendingMaxInt)
}

func BenchmarkAVX512QuicksortSingleThreadFloat64AscendingMaxIntSize1000000(b *testing.B) {
	quicksortAVX512SingleThreadBenchmarkFloat64(b, 1000000, AscendingMaxInt)
}

func BenchmarkGolangStdSortSingleThreadFloat64AscendingMaxIntSize1000000(b *testing.B) {
	golangStdSortSingleThreadBenchmarkFloat64(b, 1000000, AscendingMaxInt)
}

func BenchmarkGolangQuicksortFloat64AscendingMaxIntSize10000000(b *testing.B) {
	golangQuicksortBenchmarkFloat64(b, 10000000, AscendingMaxInt)
}

func BenchmarkGolangQuicksortSingleThreadFloat64AscendingMaxIntSize10000000(b *testing.B) {
	golangQuicksortSingleThreadBenchmarkFloat64(b, 10000000, AscendingMaxInt)
}

func BenchmarkAVX512QuicksortFloat64AscendingMaxIntSize10000000(b *testing.B) {
	quicksortAVX512BenchmarkFloat64(b, 10000000, AscendingMaxInt)
}

func BenchmarkAVX512QuicksortSingleThreadFloat64AscendingMaxIntSize10000000(b *testing.B) {
	quicksortAVX512SingleThreadBenchmarkFloat64(b, 10000000, AscendingMaxInt)
}

func BenchmarkGolangStdSortSingleThreadFloat64AscendingMaxIntSize10000000(b *testing.B) {
	golangStdSortSingleThreadBenchmarkFloat64(b, 10000000, AscendingMaxInt)
}

func BenchmarkGolangQuicksortFloat64Ascending1to10Size100000(b *testing.B) {
	golangQuicksortBenchmarkFloat64(b, 100000, Ascending1to10)
}

func BenchmarkGolangQuicksortSingleThreadFloat64Ascending1to10Size100000(b *testing.B) {
	golangQuicksortSingleThreadBenchmarkFloat64(b, 100000, Ascending1to10)
}

func BenchmarkAVX512QuicksortFloat64Ascending1to10Size100000(b *testing.B) {
	quicksortAVX512BenchmarkFloat64(b, 100000, Ascending1to10)
}

func BenchmarkAVX512QuicksortSingleThreadFloat64Ascending1to10Size100000(b *testing.B) {
	quicksortAVX512SingleThreadBenchmarkFloat64(b, 100000, Ascending1to10)
}

func BenchmarkGolangStdSortSingleThreadFloat64Ascending1to10Size100000(b *testing.B) {
	golangStdSortSingleThreadBenchmarkFloat64(b, 100000, Ascending1to10)
}

func BenchmarkGolangQuicksortFloat64Ascending1to10Size1000000(b *testing.B) {
	golangQuicksortBenchmarkFloat64(b, 1000000, Ascending1to10)
}

func BenchmarkGolangQuicksortSingleThreadFloat64Ascending1to10Size1000000(b *testing.B) {
	golangQuicksortSingleThreadBenchmarkFloat64(b, 1000000, Ascending1to10)
}

func BenchmarkAVX512QuicksortFloat64Ascending1to10Size1000000(b *testing.B) {
	quicksortAVX512BenchmarkFloat64(b, 1000000, Ascending1to10)
}

func BenchmarkAVX512QuicksortSingleThreadFloat64Ascending1to10Size1000000(b *testing.B) {
	quicksortAVX512SingleThreadBenchmarkFloat64(b, 1000000, Ascending1to10)
}

func BenchmarkGolangStdSortSingleThreadFloat64Ascending1to10Size1000000(b *testing.B) {
	golangStdSortSingleThreadBenchmarkFloat64(b, 1000000, Ascending1to10)
}

func BenchmarkGolangQuicksortFloat64Ascending1to10Size10000000(b *testing.B) {
	golangQuicksortBenchmarkFloat64(b, 10000000, Ascending1to10)
}

func BenchmarkGolangQuicksortSingleThreadFloat64Ascending1to10Size10000000(b *testing.B) {
	golangQuicksortSingleThreadBenchmarkFloat64(b, 10000000, Ascending1to10)
}

func BenchmarkAVX512QuicksortFloat64Ascending1to10Size10000000(b *testing.B) {
	quicksortAVX512BenchmarkFloat64(b, 10000000, Ascending1to10)
}

func BenchmarkAVX512QuicksortSingleThreadFloat64Ascending1to10Size10000000(b *testing.B) {
	quicksortAVX512SingleThreadBenchmarkFloat64(b, 10000000, Ascending1to10)
}

func BenchmarkGolangStdSortSingleThreadFloat64Ascending1to10Size10000000(b *testing.B) {
	golangStdSortSingleThreadBenchmarkFloat64(b, 10000000, Ascending1to10)
}

func BenchmarkGolangQuicksortFloat64Ascending1to100Size100000(b *testing.B) {
	golangQuicksortBenchmarkFloat64(b, 100000, Ascending1to100)
}

func BenchmarkGolangQuicksortSingleThreadFloat64Ascending1to100Size100000(b *testing.B) {
	golangQuicksortSingleThreadBenchmarkFloat64(b, 100000, Ascending1to100)
}

func BenchmarkAVX512QuicksortFloat64Ascending1to100Size100000(b *testing.B) {
	quicksortAVX512BenchmarkFloat64(b, 100000, Ascending1to100)
}

func BenchmarkAVX512QuicksortSingleThreadFloat64Ascending1to100Size100000(b *testing.B) {
	quicksortAVX512SingleThreadBenchmarkFloat64(b, 100000, Ascending1to100)
}

func BenchmarkGolangStdSortSingleThreadFloat64Ascending1to100Size100000(b *testing.B) {
	golangStdSortSingleThreadBenchmarkFloat64(b, 100000, Ascending1to100)
}

func BenchmarkGolangQuicksortFloat64Ascending1to100Size1000000(b *testing.B) {
	golangQuicksortBenchmarkFloat64(b, 1000000, Ascending1to100)
}

func BenchmarkGolangQuicksortSingleThreadFloat64Ascending1to100Size1000000(b *testing.B) {
	golangQuicksortSingleThreadBenchmarkFloat64(b, 1000000, Ascending1to100)
}

func BenchmarkAVX512QuicksortFloat64Ascending1to100Size1000000(b *testing.B) {
	quicksortAVX512BenchmarkFloat64(b, 1000000, Ascending1to100)
}

func BenchmarkAVX512QuicksortSingleThreadFloat64Ascending1to100Size1000000(b *testing.B) {
	quicksortAVX512SingleThreadBenchmarkFloat64(b, 1000000, Ascending1to100)
}

func BenchmarkGolangStdSortSingleThreadFloat64Ascending1to100Size1000000(b *testing.B) {
	golangStdSortSingleThreadBenchmarkFloat64(b, 1000000, Ascending1to100)
}

func BenchmarkGolangQuicksortFloat64Ascending1to100Size10000000(b *testing.B) {
	golangQuicksortBenchmarkFloat64(b, 10000000, Ascending1to100)
}

func BenchmarkGolangQuicksortSingleThreadFloat64Ascending1to100Size10000000(b *testing.B) {
	golangQuicksortSingleThreadBenchmarkFloat64(b, 10000000, Ascending1to100)
}

func BenchmarkAVX512QuicksortFloat64Ascending1to100Size10000000(b *testing.B) {
	quicksortAVX512BenchmarkFloat64(b, 10000000, Ascending1to100)
}

func BenchmarkAVX512QuicksortSingleThreadFloat64Ascending1to100Size10000000(b *testing.B) {
	quicksortAVX512SingleThreadBenchmarkFloat64(b, 10000000, Ascending1to100)
}

func BenchmarkGolangStdSortSingleThreadFloat64Ascending1to100Size10000000(b *testing.B) {
	golangStdSortSingleThreadBenchmarkFloat64(b, 10000000, Ascending1to100)
}

func BenchmarkGolangQuicksortFloat64DescendingMaxIntSize100000(b *testing.B) {
	golangQuicksortBenchmarkFloat64(b, 100000, DescendingMaxInt)
}

func BenchmarkGolangQuicksortSingleThreadFloat64DescendingMaxIntSize100000(b *testing.B) {
	golangQuicksortSingleThreadBenchmarkFloat64(b, 100000, DescendingMaxInt)
}

func BenchmarkAVX512QuicksortFloat64DescendingMaxIntSize100000(b *testing.B) {
	quicksortAVX512BenchmarkFloat64(b, 100000, DescendingMaxInt)
}

func BenchmarkAVX512QuicksortSingleThreadFloat64DescendingMaxIntSize100000(b *testing.B) {
	quicksortAVX512SingleThreadBenchmarkFloat64(b, 100000, DescendingMaxInt)
}

func BenchmarkGolangStdSortSingleThreadFloat64DescendingMaxIntSize100000(b *testing.B) {
	golangStdSortSingleThreadBenchmarkFloat64(b, 100000, DescendingMaxInt)
}

func BenchmarkGolangQuicksortFloat64DescendingMaxIntSize1000000(b *testing.B) {
	golangQuicksortBenchmarkFloat64(b, 1000000, DescendingMaxInt)
}

func BenchmarkGolangQuicksortSingleThreadFloat64DescendingMaxIntSize1000000(b *testing.B) {
	golangQuicksortSingleThreadBenchmarkFloat64(b, 1000000, DescendingMaxInt)
}

func BenchmarkAVX512QuicksortFloat64DescendingMaxIntSize1000000(b *testing.B) {
	quicksortAVX512BenchmarkFloat64(b, 1000000, DescendingMaxInt)
}

func BenchmarkAVX512QuicksortSingleThreadFloat64DescendingMaxIntSize1000000(b *testing.B) {
	quicksortAVX512SingleThreadBenchmarkFloat64(b, 1000000, DescendingMaxInt)
}

func BenchmarkGolangStdSortSingleThreadFloat64DescendingMaxIntSize1000000(b *testing.B) {
	golangStdSortSingleThreadBenchmarkFloat64(b, 1000000, DescendingMaxInt)
}

func BenchmarkGolangQuicksortFloat64DescendingMaxIntSize10000000(b *testing.B) {
	golangQuicksortBenchmarkFloat64(b, 10000000, DescendingMaxInt)
}

func BenchmarkGolangQuicksortSingleThreadFloat64DescendingMaxIntSize10000000(b *testing.B) {
	golangQuicksortSingleThreadBenchmarkFloat64(b, 10000000, DescendingMaxInt)
}

func BenchmarkAVX512QuicksortFloat64DescendingMaxIntSize10000000(b *testing.B) {
	quicksortAVX512BenchmarkFloat64(b, 10000000, DescendingMaxInt)
}

func BenchmarkAVX512QuicksortSingleThreadFloat64DescendingMaxIntSize10000000(b *testing.B) {
	quicksortAVX512SingleThreadBenchmarkFloat64(b, 10000000, DescendingMaxInt)
}

func BenchmarkGolangStdSortSingleThreadFloat64DescendingMaxIntSize10000000(b *testing.B) {
	golangStdSortSingleThreadBenchmarkFloat64(b, 10000000, DescendingMaxInt)
}

func BenchmarkGolangQuicksortFloat64Descending1to10Size100000(b *testing.B) {
	golangQuicksortBenchmarkFloat64(b, 100000, Descending1to10)
}

func BenchmarkGolangQuicksortSingleThreadFloat64Descending1to10Size100000(b *testing.B) {
	golangQuicksortSingleThreadBenchmarkFloat64(b, 100000, Descending1to10)
}

func BenchmarkAVX512QuicksortFloat64Descending1to10Size100000(b *testing.B) {
	quicksortAVX512BenchmarkFloat64(b, 100000, Descending1to10)
}

func BenchmarkAVX512QuicksortSingleThreadFloat64Descending1to10Size100000(b *testing.B) {
	quicksortAVX512SingleThreadBenchmarkFloat64(b, 100000, Descending1to10)
}

func BenchmarkGolangStdSortSingleThreadFloat64Descending1to10Size100000(b *testing.B) {
	golangStdSortSingleThreadBenchmarkFloat64(b, 100000, Descending1to10)
}

func BenchmarkGolangQuicksortFloat64Descending1to10Size1000000(b *testing.B) {
	golangQuicksortBenchmarkFloat64(b, 1000000, Descending1to10)
}

func BenchmarkGolangQuicksortSingleThreadFloat64Descending1to10Size1000000(b *testing.B) {
	golangQuicksortSingleThreadBenchmarkFloat64(b, 1000000, Descending1to10)
}

func BenchmarkAVX512QuicksortFloat64Descending1to10Size1000000(b *testing.B) {
	quicksortAVX512BenchmarkFloat64(b, 1000000, Descending1to10)
}

func BenchmarkAVX512QuicksortSingleThreadFloat64Descending1to10Size1000000(b *testing.B) {
	quicksortAVX512SingleThreadBenchmarkFloat64(b, 1000000, Descending1to10)
}

func BenchmarkGolangStdSortSingleThreadFloat64Descending1to10Size1000000(b *testing.B) {
	golangStdSortSingleThreadBenchmarkFloat64(b, 1000000, Descending1to10)
}

func BenchmarkGolangQuicksortFloat64Descending1to10Size10000000(b *testing.B) {
	golangQuicksortBenchmarkFloat64(b, 10000000, Descending1to10)
}

func BenchmarkGolangQuicksortSingleThreadFloat64Descending1to10Size10000000(b *testing.B) {
	golangQuicksortSingleThreadBenchmarkFloat64(b, 10000000, Descending1to10)
}

func BenchmarkAVX512QuicksortFloat64Descending1to10Size10000000(b *testing.B) {
	quicksortAVX512BenchmarkFloat64(b, 10000000, Descending1to10)
}

func BenchmarkAVX512QuicksortSingleThreadFloat64Descending1to10Size10000000(b *testing.B) {
	quicksortAVX512SingleThreadBenchmarkFloat64(b, 10000000, Descending1to10)
}

func BenchmarkGolangStdSortSingleThreadFloat64Descending1to10Size10000000(b *testing.B) {
	golangStdSortSingleThreadBenchmarkFloat64(b, 10000000, Descending1to10)
}

func BenchmarkGolangQuicksortFloat64Descending1to100Size100000(b *testing.B) {
	golangQuicksortBenchmarkFloat64(b, 100000, Descending1to100)
}

func BenchmarkGolangQuicksortSingleThreadFloat64Descending1to100Size100000(b *testing.B) {
	golangQuicksortSingleThreadBenchmarkFloat64(b, 100000, Descending1to100)
}

func BenchmarkAVX512QuicksortFloat64Descending1to100Size100000(b *testing.B) {
	quicksortAVX512BenchmarkFloat64(b, 100000, Descending1to100)
}

func BenchmarkAVX512QuicksortSingleThreadFloat64Descending1to100Size100000(b *testing.B) {
	quicksortAVX512SingleThreadBenchmarkFloat64(b, 100000, Descending1to100)
}

func BenchmarkGolangStdSortSingleThreadFloat64Descending1to100Size100000(b *testing.B) {
	golangStdSortSingleThreadBenchmarkFloat64(b, 100000, Descending1to100)
}

func BenchmarkGolangQuicksortFloat64Descending1to100Size1000000(b *testing.B) {
	golangQuicksortBenchmarkFloat64(b, 1000000, Descending1to100)
}

func BenchmarkGolangQuicksortSingleThreadFloat64Descending1to100Size1000000(b *testing.B) {
	golangQuicksortSingleThreadBenchmarkFloat64(b, 1000000, Descending1to100)
}

func BenchmarkAVX512QuicksortFloat64Descending1to100Size1000000(b *testing.B) {
	quicksortAVX512BenchmarkFloat64(b, 1000000, Descending1to100)
}

func BenchmarkAVX512QuicksortSingleThreadFloat64Descending1to100Size1000000(b *testing.B) {
	quicksortAVX512SingleThreadBenchmarkFloat64(b, 1000000, Descending1to100)
}

func BenchmarkGolangStdSortSingleThreadFloat64Descending1to100Size1000000(b *testing.B) {
	golangStdSortSingleThreadBenchmarkFloat64(b, 1000000, Descending1to100)
}

func BenchmarkGolangQuicksortFloat64Descending1to100Size10000000(b *testing.B) {
	golangQuicksortBenchmarkFloat64(b, 10000000, Descending1to100)
}

func BenchmarkGolangQuicksortSingleThreadFloat64Descending1to100Size10000000(b *testing.B) {
	golangQuicksortSingleThreadBenchmarkFloat64(b, 10000000, Descending1to100)
}

func BenchmarkAVX512QuicksortFloat64Descending1to100Size10000000(b *testing.B) {
	quicksortAVX512BenchmarkFloat64(b, 10000000, Descending1to100)
}

func BenchmarkAVX512QuicksortSingleThreadFloat64Descending1to100Size10000000(b *testing.B) {
	quicksortAVX512SingleThreadBenchmarkFloat64(b, 10000000, Descending1to100)
}

func BenchmarkGolangStdSortSingleThreadFloat64Descending1to100Size10000000(b *testing.B) {
	golangStdSortSingleThreadBenchmarkFloat64(b, 10000000, Descending1to100)
}

func BenchmarkGolangQuicksortUint64RandomSize100000(b *testing.B) {
	golangQuicksortBenchmarkUint64(b, 100000, Random)
}

func BenchmarkGolangQuicksortSingleThreadUint64RandomSize100000(b *testing.B) {
	golangQuicksortSingleThreadBenchmarkUint64(b, 100000, Random)
}

func BenchmarkAVX512QuicksortUint64RandomSize100000(b *testing.B) {
	quicksortAVX512BenchmarkUint64(b, 100000, Random)
}

func BenchmarkAVX512QuicksortSingleThreadUint64RandomSize100000(b *testing.B) {
	quicksortAVX512SingleThreadBenchmarkUint64(b, 100000, Random)
}

func BenchmarkGolangStdSortSingleThreadUint64RandomSize100000(b *testing.B) {
	golangStdSortSingleThreadBenchmarkUint64(b, 100000, Random)
}

func BenchmarkGolangQuicksortUint64RandomSize1000000(b *testing.B) {
	golangQuicksortBenchmarkUint64(b, 1000000, Random)
}

func BenchmarkGolangQuicksortSingleThreadUint64RandomSize1000000(b *testing.B) {
	golangQuicksortSingleThreadBenchmarkUint64(b, 1000000, Random)
}

func BenchmarkAVX512QuicksortUint64RandomSize1000000(b *testing.B) {
	quicksortAVX512BenchmarkUint64(b, 1000000, Random)
}

func BenchmarkAVX512QuicksortSingleThreadUint64RandomSize1000000(b *testing.B) {
	quicksortAVX512SingleThreadBenchmarkUint64(b, 1000000, Random)
}

func BenchmarkGolangStdSortSingleThreadUint64RandomSize1000000(b *testing.B) {
	golangStdSortSingleThreadBenchmarkUint64(b, 1000000, Random)
}

func BenchmarkGolangQuicksortUint64RandomSize10000000(b *testing.B) {
	golangQuicksortBenchmarkUint64(b, 10000000, Random)
}

func BenchmarkGolangQuicksortSingleThreadUint64RandomSize10000000(b *testing.B) {
	golangQuicksortSingleThreadBenchmarkUint64(b, 10000000, Random)
}

func BenchmarkAVX512QuicksortUint64RandomSize10000000(b *testing.B) {
	quicksortAVX512BenchmarkUint64(b, 10000000, Random)
}

func BenchmarkAVX512QuicksortSingleThreadUint64RandomSize10000000(b *testing.B) {
	quicksortAVX512SingleThreadBenchmarkUint64(b, 10000000, Random)
}

func BenchmarkGolangStdSortSingleThreadUint64RandomSize10000000(b *testing.B) {
	golangStdSortSingleThreadBenchmarkUint64(b, 10000000, Random)
}

func BenchmarkGolangQuicksortUint64Random1to10Size100000(b *testing.B) {
	golangQuicksortBenchmarkUint64(b, 100000, Random1to10)
}

func BenchmarkGolangQuicksortSingleThreadUint64Random1to10Size100000(b *testing.B) {
	golangQuicksortSingleThreadBenchmarkUint64(b, 100000, Random1to10)
}

func BenchmarkAVX512QuicksortUint64Random1to10Size100000(b *testing.B) {
	quicksortAVX512BenchmarkUint64(b, 100000, Random1to10)
}

func BenchmarkAVX512QuicksortSingleThreadUint64Random1to10Size100000(b *testing.B) {
	quicksortAVX512SingleThreadBenchmarkUint64(b, 100000, Random1to10)
}

func BenchmarkGolangStdSortSingleThreadUint64Random1to10Size100000(b *testing.B) {
	golangStdSortSingleThreadBenchmarkUint64(b, 100000, Random1to10)
}

func BenchmarkGolangQuicksortUint64Random1to10Size1000000(b *testing.B) {
	golangQuicksortBenchmarkUint64(b, 1000000, Random1to10)
}

func BenchmarkGolangQuicksortSingleThreadUint64Random1to10Size1000000(b *testing.B) {
	golangQuicksortSingleThreadBenchmarkUint64(b, 1000000, Random1to10)
}

func BenchmarkAVX512QuicksortUint64Random1to10Size1000000(b *testing.B) {
	quicksortAVX512BenchmarkUint64(b, 1000000, Random1to10)
}

func BenchmarkAVX512QuicksortSingleThreadUint64Random1to10Size1000000(b *testing.B) {
	quicksortAVX512SingleThreadBenchmarkUint64(b, 1000000, Random1to10)
}

func BenchmarkGolangStdSortSingleThreadUint64Random1to10Size1000000(b *testing.B) {
	golangStdSortSingleThreadBenchmarkUint64(b, 1000000, Random1to10)
}

func BenchmarkGolangQuicksortUint64Random1to10Size10000000(b *testing.B) {
	golangQuicksortBenchmarkUint64(b, 10000000, Random1to10)
}

func BenchmarkGolangQuicksortSingleThreadUint64Random1to10Size10000000(b *testing.B) {
	golangQuicksortSingleThreadBenchmarkUint64(b, 10000000, Random1to10)
}

func BenchmarkAVX512QuicksortUint64Random1to10Size10000000(b *testing.B) {
	quicksortAVX512BenchmarkUint64(b, 10000000, Random1to10)
}

func BenchmarkAVX512QuicksortSingleThreadUint64Random1to10Size10000000(b *testing.B) {
	quicksortAVX512SingleThreadBenchmarkUint64(b, 10000000, Random1to10)
}

func BenchmarkGolangStdSortSingleThreadUint64Random1to10Size10000000(b *testing.B) {
	golangStdSortSingleThreadBenchmarkUint64(b, 10000000, Random1to10)
}

func BenchmarkGolangQuicksortUint64Random1to100Size100000(b *testing.B) {
	golangQuicksortBenchmarkUint64(b, 100000, Random1to100)
}

func BenchmarkGolangQuicksortSingleThreadUint64Random1to100Size100000(b *testing.B) {
	golangQuicksortSingleThreadBenchmarkUint64(b, 100000, Random1to100)
}

func BenchmarkAVX512QuicksortUint64Random1to100Size100000(b *testing.B) {
	quicksortAVX512BenchmarkUint64(b, 100000, Random1to100)
}

func BenchmarkAVX512QuicksortSingleThreadUint64Random1to100Size100000(b *testing.B) {
	quicksortAVX512SingleThreadBenchmarkUint64(b, 100000, Random1to100)
}

func BenchmarkGolangStdSortSingleThreadUint64Random1to100Size100000(b *testing.B) {
	golangStdSortSingleThreadBenchmarkUint64(b, 100000, Random1to100)
}

func BenchmarkGolangQuicksortUint64Random1to100Size1000000(b *testing.B) {
	golangQuicksortBenchmarkUint64(b, 1000000, Random1to100)
}

func BenchmarkGolangQuicksortSingleThreadUint64Random1to100Size1000000(b *testing.B) {
	golangQuicksortSingleThreadBenchmarkUint64(b, 1000000, Random1to100)
}

func BenchmarkAVX512QuicksortUint64Random1to100Size1000000(b *testing.B) {
	quicksortAVX512BenchmarkUint64(b, 1000000, Random1to100)
}

func BenchmarkAVX512QuicksortSingleThreadUint64Random1to100Size1000000(b *testing.B) {
	quicksortAVX512SingleThreadBenchmarkUint64(b, 1000000, Random1to100)
}

func BenchmarkGolangStdSortSingleThreadUint64Random1to100Size1000000(b *testing.B) {
	golangStdSortSingleThreadBenchmarkUint64(b, 1000000, Random1to100)
}

func BenchmarkGolangQuicksortUint64Random1to100Size10000000(b *testing.B) {
	golangQuicksortBenchmarkUint64(b, 10000000, Random1to100)
}

func BenchmarkGolangQuicksortSingleThreadUint64Random1to100Size10000000(b *testing.B) {
	golangQuicksortSingleThreadBenchmarkUint64(b, 10000000, Random1to100)
}

func BenchmarkAVX512QuicksortUint64Random1to100Size10000000(b *testing.B) {
	quicksortAVX512BenchmarkUint64(b, 10000000, Random1to100)
}

func BenchmarkAVX512QuicksortSingleThreadUint64Random1to100Size10000000(b *testing.B) {
	quicksortAVX512SingleThreadBenchmarkUint64(b, 10000000, Random1to100)
}

func BenchmarkGolangStdSortSingleThreadUint64Random1to100Size10000000(b *testing.B) {
	golangStdSortSingleThreadBenchmarkUint64(b, 10000000, Random1to100)
}

func BenchmarkGolangQuicksortUint64AscendingMaxIntSize100000(b *testing.B) {
	golangQuicksortBenchmarkUint64(b, 100000, AscendingMaxInt)
}

func BenchmarkGolangQuicksortSingleThreadUint64AscendingMaxIntSize100000(b *testing.B) {
	golangQuicksortSingleThreadBenchmarkUint64(b, 100000, AscendingMaxInt)
}

func BenchmarkAVX512QuicksortUint64AscendingMaxIntSize100000(b *testing.B) {
	quicksortAVX512BenchmarkUint64(b, 100000, AscendingMaxInt)
}

func BenchmarkAVX512QuicksortSingleThreadUint64AscendingMaxIntSize100000(b *testing.B) {
	quicksortAVX512SingleThreadBenchmarkUint64(b, 100000, AscendingMaxInt)
}

func BenchmarkGolangStdSortSingleThreadUint64AscendingMaxIntSize100000(b *testing.B) {
	golangStdSortSingleThreadBenchmarkUint64(b, 100000, AscendingMaxInt)
}

func BenchmarkGolangQuicksortUint64AscendingMaxIntSize1000000(b *testing.B) {
	golangQuicksortBenchmarkUint64(b, 1000000, AscendingMaxInt)
}

func BenchmarkGolangQuicksortSingleThreadUint64AscendingMaxIntSize1000000(b *testing.B) {
	golangQuicksortSingleThreadBenchmarkUint64(b, 1000000, AscendingMaxInt)
}

func BenchmarkAVX512QuicksortUint64AscendingMaxIntSize1000000(b *testing.B) {
	quicksortAVX512BenchmarkUint64(b, 1000000, AscendingMaxInt)
}

func BenchmarkAVX512QuicksortSingleThreadUint64AscendingMaxIntSize1000000(b *testing.B) {
	quicksortAVX512SingleThreadBenchmarkUint64(b, 1000000, AscendingMaxInt)
}

func BenchmarkGolangStdSortSingleThreadUint64AscendingMaxIntSize1000000(b *testing.B) {
	golangStdSortSingleThreadBenchmarkUint64(b, 1000000, AscendingMaxInt)
}

func BenchmarkGolangQuicksortUint64AscendingMaxIntSize10000000(b *testing.B) {
	golangQuicksortBenchmarkUint64(b, 10000000, AscendingMaxInt)
}

func BenchmarkGolangQuicksortSingleThreadUint64AscendingMaxIntSize10000000(b *testing.B) {
	golangQuicksortSingleThreadBenchmarkUint64(b, 10000000, AscendingMaxInt)
}

func BenchmarkAVX512QuicksortUint64AscendingMaxIntSize10000000(b *testing.B) {
	quicksortAVX512BenchmarkUint64(b, 10000000, AscendingMaxInt)
}

func BenchmarkAVX512QuicksortSingleThreadUint64AscendingMaxIntSize10000000(b *testing.B) {
	quicksortAVX512SingleThreadBenchmarkUint64(b, 10000000, AscendingMaxInt)
}

func BenchmarkGolangStdSortSingleThreadUint64AscendingMaxIntSize10000000(b *testing.B) {
	golangStdSortSingleThreadBenchmarkUint64(b, 10000000, AscendingMaxInt)
}

func BenchmarkGolangQuicksortUint64Ascending1to10Size100000(b *testing.B) {
	golangQuicksortBenchmarkUint64(b, 100000, Ascending1to10)
}

func BenchmarkGolangQuicksortSingleThreadUint64Ascending1to10Size100000(b *testing.B) {
	golangQuicksortSingleThreadBenchmarkUint64(b, 100000, Ascending1to10)
}

func BenchmarkAVX512QuicksortUint64Ascending1to10Size100000(b *testing.B) {
	quicksortAVX512BenchmarkUint64(b, 100000, Ascending1to10)
}

func BenchmarkAVX512QuicksortSingleThreadUint64Ascending1to10Size100000(b *testing.B) {
	quicksortAVX512SingleThreadBenchmarkUint64(b, 100000, Ascending1to10)
}

func BenchmarkGolangStdSortSingleThreadUint64Ascending1to10Size100000(b *testing.B) {
	golangStdSortSingleThreadBenchmarkUint64(b, 100000, Ascending1to10)
}

func BenchmarkGolangQuicksortUint64Ascending1to10Size1000000(b *testing.B) {
	golangQuicksortBenchmarkUint64(b, 1000000, Ascending1to10)
}

func BenchmarkGolangQuicksortSingleThreadUint64Ascending1to10Size1000000(b *testing.B) {
	golangQuicksortSingleThreadBenchmarkUint64(b, 1000000, Ascending1to10)
}

func BenchmarkAVX512QuicksortUint64Ascending1to10Size1000000(b *testing.B) {
	quicksortAVX512BenchmarkUint64(b, 1000000, Ascending1to10)
}

func BenchmarkAVX512QuicksortSingleThreadUint64Ascending1to10Size1000000(b *testing.B) {
	quicksortAVX512SingleThreadBenchmarkUint64(b, 1000000, Ascending1to10)
}

func BenchmarkGolangStdSortSingleThreadUint64Ascending1to10Size1000000(b *testing.B) {
	golangStdSortSingleThreadBenchmarkUint64(b, 1000000, Ascending1to10)
}

func BenchmarkGolangQuicksortUint64Ascending1to10Size10000000(b *testing.B) {
	golangQuicksortBenchmarkUint64(b, 10000000, Ascending1to10)
}

func BenchmarkGolangQuicksortSingleThreadUint64Ascending1to10Size10000000(b *testing.B) {
	golangQuicksortSingleThreadBenchmarkUint64(b, 10000000, Ascending1to10)
}

func BenchmarkAVX512QuicksortUint64Ascending1to10Size10000000(b *testing.B) {
	quicksortAVX512BenchmarkUint64(b, 10000000, Ascending1to10)
}

func BenchmarkAVX512QuicksortSingleThreadUint64Ascending1to10Size10000000(b *testing.B) {
	quicksortAVX512SingleThreadBenchmarkUint64(b, 10000000, Ascending1to10)
}

func BenchmarkGolangStdSortSingleThreadUint64Ascending1to10Size10000000(b *testing.B) {
	golangStdSortSingleThreadBenchmarkUint64(b, 10000000, Ascending1to10)
}

func BenchmarkGolangQuicksortUint64Ascending1to100Size100000(b *testing.B) {
	golangQuicksortBenchmarkUint64(b, 100000, Ascending1to100)
}

func BenchmarkGolangQuicksortSingleThreadUint64Ascending1to100Size100000(b *testing.B) {
	golangQuicksortSingleThreadBenchmarkUint64(b, 100000, Ascending1to100)
}

func BenchmarkAVX512QuicksortUint64Ascending1to100Size100000(b *testing.B) {
	quicksortAVX512BenchmarkUint64(b, 100000, Ascending1to100)
}

func BenchmarkAVX512QuicksortSingleThreadUint64Ascending1to100Size100000(b *testing.B) {
	quicksortAVX512SingleThreadBenchmarkUint64(b, 100000, Ascending1to100)
}

func BenchmarkGolangStdSortSingleThreadUint64Ascending1to100Size100000(b *testing.B) {
	golangStdSortSingleThreadBenchmarkUint64(b, 100000, Ascending1to100)
}

func BenchmarkGolangQuicksortUint64Ascending1to100Size1000000(b *testing.B) {
	golangQuicksortBenchmarkUint64(b, 1000000, Ascending1to100)
}

func BenchmarkGolangQuicksortSingleThreadUint64Ascending1to100Size1000000(b *testing.B) {
	golangQuicksortSingleThreadBenchmarkUint64(b, 1000000, Ascending1to100)
}

func BenchmarkAVX512QuicksortUint64Ascending1to100Size1000000(b *testing.B) {
	quicksortAVX512BenchmarkUint64(b, 1000000, Ascending1to100)
}

func BenchmarkAVX512QuicksortSingleThreadUint64Ascending1to100Size1000000(b *testing.B) {
	quicksortAVX512SingleThreadBenchmarkUint64(b, 1000000, Ascending1to100)
}

func BenchmarkGolangStdSortSingleThreadUint64Ascending1to100Size1000000(b *testing.B) {
	golangStdSortSingleThreadBenchmarkUint64(b, 1000000, Ascending1to100)
}

func BenchmarkGolangQuicksortUint64Ascending1to100Size10000000(b *testing.B) {
	golangQuicksortBenchmarkUint64(b, 10000000, Ascending1to100)
}

func BenchmarkGolangQuicksortSingleThreadUint64Ascending1to100Size10000000(b *testing.B) {
	golangQuicksortSingleThreadBenchmarkUint64(b, 10000000, Ascending1to100)
}

func BenchmarkAVX512QuicksortUint64Ascending1to100Size10000000(b *testing.B) {
	quicksortAVX512BenchmarkUint64(b, 10000000, Ascending1to100)
}

func BenchmarkAVX512QuicksortSingleThreadUint64Ascending1to100Size10000000(b *testing.B) {
	quicksortAVX512SingleThreadBenchmarkUint64(b, 10000000, Ascending1to100)
}

func BenchmarkGolangStdSortSingleThreadUint64Ascending1to100Size10000000(b *testing.B) {
	golangStdSortSingleThreadBenchmarkUint64(b, 10000000, Ascending1to100)
}

func BenchmarkGolangQuicksortUint64DescendingMaxIntSize100000(b *testing.B) {
	golangQuicksortBenchmarkUint64(b, 100000, DescendingMaxInt)
}

func BenchmarkGolangQuicksortSingleThreadUint64DescendingMaxIntSize100000(b *testing.B) {
	golangQuicksortSingleThreadBenchmarkUint64(b, 100000, DescendingMaxInt)
}

func BenchmarkAVX512QuicksortUint64DescendingMaxIntSize100000(b *testing.B) {
	quicksortAVX512BenchmarkUint64(b, 100000, DescendingMaxInt)
}

func BenchmarkAVX512QuicksortSingleThreadUint64DescendingMaxIntSize100000(b *testing.B) {
	quicksortAVX512SingleThreadBenchmarkUint64(b, 100000, DescendingMaxInt)
}

func BenchmarkGolangStdSortSingleThreadUint64DescendingMaxIntSize100000(b *testing.B) {
	golangStdSortSingleThreadBenchmarkUint64(b, 100000, DescendingMaxInt)
}

func BenchmarkGolangQuicksortUint64DescendingMaxIntSize1000000(b *testing.B) {
	golangQuicksortBenchmarkUint64(b, 1000000, DescendingMaxInt)
}

func BenchmarkGolangQuicksortSingleThreadUint64DescendingMaxIntSize1000000(b *testing.B) {
	golangQuicksortSingleThreadBenchmarkUint64(b, 1000000, DescendingMaxInt)
}

func BenchmarkAVX512QuicksortUint64DescendingMaxIntSize1000000(b *testing.B) {
	quicksortAVX512BenchmarkUint64(b, 1000000, DescendingMaxInt)
}

func BenchmarkAVX512QuicksortSingleThreadUint64DescendingMaxIntSize1000000(b *testing.B) {
	quicksortAVX512SingleThreadBenchmarkUint64(b, 1000000, DescendingMaxInt)
}

func BenchmarkGolangStdSortSingleThreadUint64DescendingMaxIntSize1000000(b *testing.B) {
	golangStdSortSingleThreadBenchmarkUint64(b, 1000000, DescendingMaxInt)
}

func BenchmarkGolangQuicksortUint64DescendingMaxIntSize10000000(b *testing.B) {
	golangQuicksortBenchmarkUint64(b, 10000000, DescendingMaxInt)
}

func BenchmarkGolangQuicksortSingleThreadUint64DescendingMaxIntSize10000000(b *testing.B) {
	golangQuicksortSingleThreadBenchmarkUint64(b, 10000000, DescendingMaxInt)
}

func BenchmarkAVX512QuicksortUint64DescendingMaxIntSize10000000(b *testing.B) {
	quicksortAVX512BenchmarkUint64(b, 10000000, DescendingMaxInt)
}

func BenchmarkAVX512QuicksortSingleThreadUint64DescendingMaxIntSize10000000(b *testing.B) {
	quicksortAVX512SingleThreadBenchmarkUint64(b, 10000000, DescendingMaxInt)
}

func BenchmarkGolangStdSortSingleThreadUint64DescendingMaxIntSize10000000(b *testing.B) {
	golangStdSortSingleThreadBenchmarkUint64(b, 10000000, DescendingMaxInt)
}

func BenchmarkGolangQuicksortUint64Descending1to10Size100000(b *testing.B) {
	golangQuicksortBenchmarkUint64(b, 100000, Descending1to10)
}

func BenchmarkGolangQuicksortSingleThreadUint64Descending1to10Size100000(b *testing.B) {
	golangQuicksortSingleThreadBenchmarkUint64(b, 100000, Descending1to10)
}

func BenchmarkAVX512QuicksortUint64Descending1to10Size100000(b *testing.B) {
	quicksortAVX512BenchmarkUint64(b, 100000, Descending1to10)
}

func BenchmarkAVX512QuicksortSingleThreadUint64Descending1to10Size100000(b *testing.B) {
	quicksortAVX512SingleThreadBenchmarkUint64(b, 100000, Descending1to10)
}

func BenchmarkGolangStdSortSingleThreadUint64Descending1to10Size100000(b *testing.B) {
	golangStdSortSingleThreadBenchmarkUint64(b, 100000, Descending1to10)
}

func BenchmarkGolangQuicksortUint64Descending1to10Size1000000(b *testing.B) {
	golangQuicksortBenchmarkUint64(b, 1000000, Descending1to10)
}

func BenchmarkGolangQuicksortSingleThreadUint64Descending1to10Size1000000(b *testing.B) {
	golangQuicksortSingleThreadBenchmarkUint64(b, 1000000, Descending1to10)
}

func BenchmarkAVX512QuicksortUint64Descending1to10Size1000000(b *testing.B) {
	quicksortAVX512BenchmarkUint64(b, 1000000, Descending1to10)
}

func BenchmarkAVX512QuicksortSingleThreadUint64Descending1to10Size1000000(b *testing.B) {
	quicksortAVX512SingleThreadBenchmarkUint64(b, 1000000, Descending1to10)
}

func BenchmarkGolangStdSortSingleThreadUint64Descending1to10Size1000000(b *testing.B) {
	golangStdSortSingleThreadBenchmarkUint64(b, 1000000, Descending1to10)
}

func BenchmarkGolangQuicksortUint64Descending1to10Size10000000(b *testing.B) {
	golangQuicksortBenchmarkUint64(b, 10000000, Descending1to10)
}

func BenchmarkGolangQuicksortSingleThreadUint64Descending1to10Size10000000(b *testing.B) {
	golangQuicksortSingleThreadBenchmarkUint64(b, 10000000, Descending1to10)
}

func BenchmarkAVX512QuicksortUint64Descending1to10Size10000000(b *testing.B) {
	quicksortAVX512BenchmarkUint64(b, 10000000, Descending1to10)
}

func BenchmarkAVX512QuicksortSingleThreadUint64Descending1to10Size10000000(b *testing.B) {
	quicksortAVX512SingleThreadBenchmarkUint64(b, 10000000, Descending1to10)
}

func BenchmarkGolangStdSortSingleThreadUint64Descending1to10Size10000000(b *testing.B) {
	golangStdSortSingleThreadBenchmarkUint64(b, 10000000, Descending1to10)
}

func BenchmarkGolangQuicksortUint64Descending1to100Size100000(b *testing.B) {
	golangQuicksortBenchmarkUint64(b, 100000, Descending1to100)
}

func BenchmarkGolangQuicksortSingleThreadUint64Descending1to100Size100000(b *testing.B) {
	golangQuicksortSingleThreadBenchmarkUint64(b, 100000, Descending1to100)
}

func BenchmarkAVX512QuicksortUint64Descending1to100Size100000(b *testing.B) {
	quicksortAVX512BenchmarkUint64(b, 100000, Descending1to100)
}

func BenchmarkAVX512QuicksortSingleThreadUint64Descending1to100Size100000(b *testing.B) {
	quicksortAVX512SingleThreadBenchmarkUint64(b, 100000, Descending1to100)
}

func BenchmarkGolangStdSortSingleThreadUint64Descending1to100Size100000(b *testing.B) {
	golangStdSortSingleThreadBenchmarkUint64(b, 100000, Descending1to100)
}

func BenchmarkGolangQuicksortUint64Descending1to100Size1000000(b *testing.B) {
	golangQuicksortBenchmarkUint64(b, 1000000, Descending1to100)
}

func BenchmarkGolangQuicksortSingleThreadUint64Descending1to100Size1000000(b *testing.B) {
	golangQuicksortSingleThreadBenchmarkUint64(b, 1000000, Descending1to100)
}

func BenchmarkAVX512QuicksortUint64Descending1to100Size1000000(b *testing.B) {
	quicksortAVX512BenchmarkUint64(b, 1000000, Descending1to100)
}

func BenchmarkAVX512QuicksortSingleThreadUint64Descending1to100Size1000000(b *testing.B) {
	quicksortAVX512SingleThreadBenchmarkUint64(b, 1000000, Descending1to100)
}

func BenchmarkGolangStdSortSingleThreadUint64Descending1to100Size1000000(b *testing.B) {
	golangStdSortSingleThreadBenchmarkUint64(b, 1000000, Descending1to100)
}

func BenchmarkGolangQuicksortUint64Descending1to100Size10000000(b *testing.B) {
	golangQuicksortBenchmarkUint64(b, 10000000, Descending1to100)
}

func BenchmarkGolangQuicksortSingleThreadUint64Descending1to100Size10000000(b *testing.B) {
	golangQuicksortSingleThreadBenchmarkUint64(b, 10000000, Descending1to100)
}

func BenchmarkAVX512QuicksortUint64Descending1to100Size10000000(b *testing.B) {
	quicksortAVX512BenchmarkUint64(b, 10000000, Descending1to100)
}

func BenchmarkAVX512QuicksortSingleThreadUint64Descending1to100Size10000000(b *testing.B) {
	quicksortAVX512SingleThreadBenchmarkUint64(b, 10000000, Descending1to100)
}

func BenchmarkGolangStdSortSingleThreadUint64Descending1to100Size10000000(b *testing.B) {
	golangStdSortSingleThreadBenchmarkUint64(b, 10000000, Descending1to100)
}

// --------------------------------------------------

type dummySortedDataWriter struct{}

func (w *dummySortedDataWriter) Write(int, int) error { return nil }

// --------------------------------------------------

func golangQuicksortBenchmarkFloat64(b *testing.B, size int, inputType InputType) {
	keys, indices := prepareInputFloat64(size, inputType)

	threads := runtime.NumCPU()
	rp := NewRuntimeParameters(threads)
	pool := NewThreadPool(threads)
	writer := new(dummySortedDataWriter)
	consumer := NewAsyncConsumer(writer, 0, len(indices)-1, nil)
	consumer.Start(pool)

	b.SetBytes(int64(size) * 8)
	b.ResetTimer()

	quicksortFloat64(keys, indices, pool, Ascending, consumer, &rp)
	pool.Wait()
}

func golangQuicksortSingleThreadBenchmarkFloat64(b *testing.B, size int, inputType InputType) {
	keys, indices := prepareInputFloat64(size, inputType)

	threads := 1
	rp := NewRuntimeParameters(threads)
	pool := NewThreadPool(threads)
	writer := new(dummySortedDataWriter)
	consumer := NewAsyncConsumer(writer, 0, len(indices)-1, nil)
	consumer.Start(pool)

	b.SetBytes(int64(size) * 8)
	b.ResetTimer()

	quicksortAVX512Float64(keys, indices, pool, Ascending, consumer, &rp)
	pool.Wait()
}

func golangStdSortSingleThreadBenchmarkFloat64(b *testing.B, size int, inputType InputType) {
	keys, indices := prepareInputFloat64(size, inputType)

	b.SetBytes(int64(size) * 8)
	b.ResetTimer()

	sort.Sort(&sortFloat64Asc{keys, indices})
}

func quicksortAVX512BenchmarkFloat64(b *testing.B, size int, inputType InputType) {
	keys, indices := prepareInputFloat64(size, inputType)

	threads := runtime.NumCPU()
	rp := NewRuntimeParameters(threads)
	pool := NewThreadPool(threads)
	writer := new(dummySortedDataWriter)
	consumer := NewAsyncConsumer(writer, 0, len(indices)-1, nil)
	consumer.Start(pool)

	b.SetBytes(int64(size) * 8)
	b.ResetTimer()

	quicksortAVX512Float64(keys, indices, pool, Ascending, consumer, &rp)
	pool.Wait()
}

func quicksortAVX512SingleThreadBenchmarkFloat64(b *testing.B, size int, inputType InputType) {
	keys, indices := prepareInputFloat64(size, inputType)

	threads := 1
	rp := NewRuntimeParameters(threads)
	pool := NewThreadPool(threads)
	writer := new(dummySortedDataWriter)
	consumer := NewAsyncConsumer(writer, 0, len(indices)-1, nil)
	consumer.Start(pool)

	b.SetBytes(int64(size) * 8)
	b.ResetTimer()

	quicksortAVX512Float64(keys, indices, pool, Ascending, consumer, &rp)
	pool.Wait()
}

// --------------------------------------------------

func quicksortAVX512AscSingleThreadTestFloat64(t *testing.T, maxsize int, inputType InputType) {
	for size := 1; size <= maxsize; size++ {
		keys, indices := prepareInputFloat64(size, inputType)

		threads := runtime.NumCPU()
		rp := NewRuntimeParameters(threads)
		pool := NewThreadPool(threads)
		writer := new(dummySortedDataWriter)
		consumer := NewAsyncConsumer(writer, 0, len(indices)-1, nil)
		consumer.Start(pool)

		quicksortAVX512Float64(keys, indices, pool, Ascending, consumer, &rp)
		pool.Wait()

		if !isSortedAscFloat64(indices) {
			t.Fatalf("Indices are not sorted (size %d)", size)
		}
	}
}

// --------------------------------------------------

func quicksortAVX512DescSingleThreadTestFloat64(t *testing.T, maxsize int, inputType InputType) {
	for size := 1; size <= maxsize; size++ {
		keys, indices := prepareInputFloat64(size, inputType)

		threads := 1
		rp := NewRuntimeParameters(threads)
		pool := NewThreadPool(threads)
		writer := new(dummySortedDataWriter)
		consumer := NewAsyncConsumer(writer, 0, len(indices)-1, nil)
		consumer.Start(pool)

		quicksortAVX512Float64(keys, indices, pool, Descending, consumer, &rp)
		pool.Wait()

		if !isSortedDescFloat64(indices) {
			t.Fatalf("Indices are not sorted (size %d)", size)
		}
	}
}

// --------------------------------------------------

func prepareInputFloat64(size int, inputType InputType) (keys []float64, indices []uint64) {
	keys = make([]float64, size)
	indices = make([]uint64, size)

	random := func(shift float64, maxint int) {
		for j := 0; j < len(keys); j++ {
			r := rand.Intn(maxint)
			keys[j] = shift + float64(r)
			indices[j] = uint64(r * 10)
		}
	}

	ascending := func(shift float64, maxint int) {
		for j := 0; j < len(keys); j++ {
			keys[j] = float64(rand.Intn(maxrand))
		}

		sort.Slice(keys, func(i, j int) bool { return keys[i] < keys[j] })
		for j := 0; j < len(keys); j++ {
			indices[j] = uint64(keys[j])
		}
	}

	descending := func(shift float64, maxint int) {
		for j := 0; j < len(keys); j++ {
			keys[j] = float64(rand.Intn(maxrand))
		}

		sort.Slice(keys, func(i, j int) bool { return keys[i] > keys[j] })
		for j := 0; j < len(keys); j++ {
			indices[j] = uint64(keys[j])
		}
	}

	switch inputType {
	case Random:
		random(0, maxrand)
	case Random1to10:
		random(1, 10)
	case Random1to100:
		random(1, 100)
	case AscendingMaxInt:
		ascending(0, maxrand)
	case Ascending1to10:
		ascending(1, 10)
	case Ascending1to100:
		ascending(1, 100)
	case DescendingMaxInt:
		descending(0, maxrand)
	case Descending1to10:
		descending(1, 10)
	case Descending1to100:
		descending(1, 100)
	default:
		panic("Wrong enum value")
	}

	return keys, indices
}

func golangQuicksortBenchmarkUint64(b *testing.B, size int, inputType InputType) {
	keys, indices := prepareInputUint64(size, inputType)

	threads := runtime.NumCPU()
	rp := NewRuntimeParameters(threads)
	pool := NewThreadPool(threads)
	writer := new(dummySortedDataWriter)
	consumer := NewAsyncConsumer(writer, 0, len(indices)-1, nil)
	consumer.Start(pool)

	b.SetBytes(int64(size) * 8)
	b.ResetTimer()

	quicksortUint64(keys, indices, pool, Ascending, consumer, &rp)
	pool.Wait()
}

func golangQuicksortSingleThreadBenchmarkUint64(b *testing.B, size int, inputType InputType) {
	keys, indices := prepareInputUint64(size, inputType)

	threads := 1
	rp := NewRuntimeParameters(threads)
	pool := NewThreadPool(threads)
	writer := new(dummySortedDataWriter)
	consumer := NewAsyncConsumer(writer, 0, len(indices)-1, nil)
	consumer.Start(pool)

	b.SetBytes(int64(size) * 8)
	b.ResetTimer()

	quicksortAVX512Uint64(keys, indices, pool, Ascending, consumer, &rp)
	pool.Wait()
}

func golangStdSortSingleThreadBenchmarkUint64(b *testing.B, size int, inputType InputType) {
	keys, indices := prepareInputUint64(size, inputType)

	b.SetBytes(int64(size) * 8)
	b.ResetTimer()

	sort.Sort(&sortUint64Asc{keys, indices})
}

func quicksortAVX512BenchmarkUint64(b *testing.B, size int, inputType InputType) {
	keys, indices := prepareInputUint64(size, inputType)

	threads := runtime.NumCPU()
	rp := NewRuntimeParameters(threads)
	pool := NewThreadPool(threads)
	writer := new(dummySortedDataWriter)
	consumer := NewAsyncConsumer(writer, 0, len(indices)-1, nil)
	consumer.Start(pool)

	b.SetBytes(int64(size) * 8)
	b.ResetTimer()

	quicksortAVX512Uint64(keys, indices, pool, Ascending, consumer, &rp)
	pool.Wait()
}

func quicksortAVX512SingleThreadBenchmarkUint64(b *testing.B, size int, inputType InputType) {
	keys, indices := prepareInputUint64(size, inputType)

	threads := 1
	rp := NewRuntimeParameters(threads)
	pool := NewThreadPool(threads)
	writer := new(dummySortedDataWriter)
	consumer := NewAsyncConsumer(writer, 0, len(indices)-1, nil)
	consumer.Start(pool)

	b.SetBytes(int64(size) * 8)
	b.ResetTimer()

	quicksortAVX512Uint64(keys, indices, pool, Ascending, consumer, &rp)
	pool.Wait()
}

// --------------------------------------------------

func quicksortAVX512AscSingleThreadTestUint64(t *testing.T, maxsize int, inputType InputType) {
	for size := 1; size <= maxsize; size++ {
		keys, indices := prepareInputUint64(size, inputType)

		threads := runtime.NumCPU()
		rp := NewRuntimeParameters(threads)
		pool := NewThreadPool(threads)
		writer := new(dummySortedDataWriter)
		consumer := NewAsyncConsumer(writer, 0, len(indices)-1, nil)
		consumer.Start(pool)

		quicksortAVX512Uint64(keys, indices, pool, Ascending, consumer, &rp)
		pool.Wait()

		if !isSortedAscUint64(indices) {
			t.Fatalf("Indices are not sorted (size %d)", size)
		}
	}
}

// --------------------------------------------------

func quicksortAVX512DescSingleThreadTestUint64(t *testing.T, maxsize int, inputType InputType) {
	for size := 1; size <= maxsize; size++ {
		keys, indices := prepareInputUint64(size, inputType)

		threads := 1
		rp := NewRuntimeParameters(threads)
		pool := NewThreadPool(threads)
		writer := new(dummySortedDataWriter)
		consumer := NewAsyncConsumer(writer, 0, len(indices)-1, nil)
		consumer.Start(pool)

		quicksortAVX512Uint64(keys, indices, pool, Descending, consumer, &rp)
		pool.Wait()

		if !isSortedDescUint64(indices) {
			t.Fatalf("Indices are not sorted (size %d)", size)
		}
	}
}

// --------------------------------------------------

func prepareInputUint64(size int, inputType InputType) (keys []uint64, indices []uint64) {
	keys = make([]uint64, size)
	indices = make([]uint64, size)

	random := func(shift uint64, maxint int) {
		for j := 0; j < len(keys); j++ {
			r := rand.Intn(maxint)
			keys[j] = shift + uint64(r)
			indices[j] = uint64(r * 10)
		}
	}

	ascending := func(shift uint64, maxint int) {
		for j := 0; j < len(keys); j++ {
			keys[j] = uint64(rand.Intn(maxrand))
		}

		sort.Slice(keys, func(i, j int) bool { return keys[i] < keys[j] })
		for j := 0; j < len(keys); j++ {
			indices[j] = uint64(keys[j])
		}
	}

	descending := func(shift uint64, maxint int) {
		for j := 0; j < len(keys); j++ {
			keys[j] = uint64(rand.Intn(maxrand))
		}

		sort.Slice(keys, func(i, j int) bool { return keys[i] > keys[j] })
		for j := 0; j < len(keys); j++ {
			indices[j] = uint64(keys[j])
		}
	}

	switch inputType {
	case Random:
		random(0, maxrand)
	case Random1to10:
		random(1, 10)
	case Random1to100:
		random(1, 100)
	case AscendingMaxInt:
		ascending(0, maxrand)
	case Ascending1to10:
		ascending(1, 10)
	case Ascending1to100:
		ascending(1, 100)
	case DescendingMaxInt:
		descending(0, maxrand)
	case Descending1to10:
		descending(1, 10)
	case Descending1to100:
		descending(1, 100)
	default:
		panic("Wrong enum value")
	}

	return keys, indices
}
