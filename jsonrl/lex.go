//line lex.rl:1
// Copyright (C) 2022 Sneller, Inc.
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Code generated by ragel. DO NOT EDIT.

package jsonrl

import (
	"errors"
	"fmt"
	"unicode/utf8"
)

//line lex.rl:112

//line lex.rl:124

//line lex.go:37
const object_start int = 1
const object_error int = 0

const object_en_main int = 1

//line lex.rl:127

var ErrNoMatch = errors.New("jsonrl: bad object text")

func ParseObject(s *State, data []byte) (int, error) {
	neg, nege, esc := false, false, false
	sbegin, send := 0, 0
	curi, cure, dc := uint64(0), int(0), int(0)
	cs, p, pe, eof := 0, 0, len(data), len(data)
	_ = eof

//line lex.go:55
	{
		cs = object_start
	}

//line lex.go:60
	{
		if p == pe {
			goto _test_eof
		}
		switch cs {
		case 1:
			goto st_case_1
		case 0:
			goto st_case_0
		case 2:
			goto st_case_2
		case 3:
			goto st_case_3
		case 29:
			goto st_case_29
		case 4:
			goto st_case_4
		case 5:
			goto st_case_5
		case 6:
			goto st_case_6
		case 7:
			goto st_case_7
		case 8:
			goto st_case_8
		case 9:
			goto st_case_9
		case 10:
			goto st_case_10
		case 11:
			goto st_case_11
		case 12:
			goto st_case_12
		case 13:
			goto st_case_13
		case 14:
			goto st_case_14
		case 15:
			goto st_case_15
		case 16:
			goto st_case_16
		case 17:
			goto st_case_17
		case 18:
			goto st_case_18
		case 30:
			goto st_case_30
		case 31:
			goto st_case_31
		case 32:
			goto st_case_32
		case 33:
			goto st_case_33
		case 34:
			goto st_case_34
		case 19:
			goto st_case_19
		case 20:
			goto st_case_20
		case 21:
			goto st_case_21
		case 22:
			goto st_case_22
		case 35:
			goto st_case_35
		case 23:
			goto st_case_23
		case 24:
			goto st_case_24
		case 25:
			goto st_case_25
		case 36:
			goto st_case_36
		case 26:
			goto st_case_26
		case 27:
			goto st_case_27
		case 28:
			goto st_case_28
		case 37:
			goto st_case_37
		}
		goto st_out
	st1:
		if p++; p == pe {
			goto _test_eof1
		}
	st_case_1:
		switch data[p] {
		case 32:
			goto st1
		case 34:
			goto st2
		case 45:
			goto tr3
		case 91:
			goto tr5
		case 102:
			goto st19
		case 110:
			goto st23
		case 116:
			goto st26
		case 123:
			goto tr9
		}
		switch {
		case data[p] > 13:
			if 48 <= data[p] && data[p] <= 57 {
				goto tr4
			}
		case data[p] >= 9:
			goto st1
		}
		goto st0
	st_case_0:
	st0:
		cs = 0
		goto _out
	st2:
		if p++; p == pe {
			goto _test_eof2
		}
	st_case_2:
//line lex.rl:59
		esc = false
		sbegin = p
//line lex.rl:59
		send = p
//line lex.go:189
		switch data[p] {
		case 34:
			goto tr11
		case 92:
			goto tr12
		}
		switch {
		case data[p] < 224:
			switch {
			case data[p] > 191:
				if 192 <= data[p] && data[p] <= 223 {
					goto st9
				}
			case data[p] >= 128:
				goto st0
			}
		case data[p] > 239:
			switch {
			case data[p] > 247:
				if 248 <= data[p] {
					goto st0
				}
			case data[p] >= 240:
				goto st14
			}
		default:
			goto st11
		}
		goto st3
	tr21:
//line lex.rl:33
		{
			r, size := utf8.DecodeRune(data[p-2:])
			if size != 2 {
				return p - 2, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st3
	tr29:
//line lex.rl:39
		{
			r, size := utf8.DecodeRune(data[p-3:])
			if size != 3 {
				return p - 3, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st3
	tr38:
//line lex.rl:45
		{
			r, size := utf8.DecodeRune(data[p-4:])
			if size != 4 {
				return p - 4, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st3
	st3:
		if p++; p == pe {
			goto _test_eof3
		}
	st_case_3:
//line lex.rl:59
		send = p
//line lex.go:253
		switch data[p] {
		case 34:
			goto tr11
		case 92:
			goto tr12
		}
		switch {
		case data[p] < 224:
			switch {
			case data[p] > 191:
				if 192 <= data[p] && data[p] <= 223 {
					goto st9
				}
			case data[p] >= 128:
				goto st0
			}
		case data[p] > 239:
			switch {
			case data[p] > 247:
				if 248 <= data[p] {
					goto st0
				}
			case data[p] >= 240:
				goto st14
			}
		default:
			goto st11
		}
		goto st3
	tr11:
//line lex.rl:117
		{
			// since this is the 'final' state,
			// advance the character pointer
			// so that it points past the final char
			// (i.e. return the # of characters consumed)
			return p + 1, nil
		}
		goto st29
	tr22:
//line lex.rl:33
		{
			r, size := utf8.DecodeRune(data[p-2:])
			if size != 2 {
				return p - 2, fmt.Errorf("bad rune %x", r)
			}
		}
//line lex.rl:117
		{
			// since this is the 'final' state,
			// advance the character pointer
			// so that it points past the final char
			// (i.e. return the # of characters consumed)
			return p + 1, nil
		}
		goto st29
	tr30:
//line lex.rl:39
		{
			r, size := utf8.DecodeRune(data[p-3:])
			if size != 3 {
				return p - 3, fmt.Errorf("bad rune %x", r)
			}
		}
//line lex.rl:117
		{
			// since this is the 'final' state,
			// advance the character pointer
			// so that it points past the final char
			// (i.e. return the # of characters consumed)
			return p + 1, nil
		}
		goto st29
	tr39:
//line lex.rl:45
		{
			r, size := utf8.DecodeRune(data[p-4:])
			if size != 4 {
				return p - 4, fmt.Errorf("bad rune %x", r)
			}
		}
//line lex.rl:117
		{
			// since this is the 'final' state,
			// advance the character pointer
			// so that it points past the final char
			// (i.e. return the # of characters consumed)
			return p + 1, nil
		}
		goto st29
	st29:
		if p++; p == pe {
			goto _test_eof29
		}
	st_case_29:
//line lex.rl:110
		s.parseString(data[sbegin:send], esc)
//line lex.go:351
		goto st0
	tr12:
//line lex.rl:29
		esc = true
		goto st4
	tr23:
//line lex.rl:33
		{
			r, size := utf8.DecodeRune(data[p-2:])
			if size != 2 {
				return p - 2, fmt.Errorf("bad rune %x", r)
			}
		}
//line lex.rl:29
		esc = true
		goto st4
	tr31:
//line lex.rl:39
		{
			r, size := utf8.DecodeRune(data[p-3:])
			if size != 3 {
				return p - 3, fmt.Errorf("bad rune %x", r)
			}
		}
//line lex.rl:29
		esc = true
		goto st4
	tr40:
//line lex.rl:45
		{
			r, size := utf8.DecodeRune(data[p-4:])
			if size != 4 {
				return p - 4, fmt.Errorf("bad rune %x", r)
			}
		}
//line lex.rl:29
		esc = true
		goto st4
	st4:
		if p++; p == pe {
			goto _test_eof4
		}
	st_case_4:
//line lex.go:395
		switch data[p] {
		case 34:
			goto st3
		case 47:
			goto st3
		case 92:
			goto st3
		case 102:
			goto st3
		case 110:
			goto st3
		case 114:
			goto st3
		case 117:
			goto st5
		}
		switch {
		case data[p] > 98:
			if 116 <= data[p] && data[p] <= 118 {
				goto st3
			}
		case data[p] >= 97:
			goto st3
		}
		goto st0
	st5:
		if p++; p == pe {
			goto _test_eof5
		}
	st_case_5:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st6
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st6
			}
		default:
			goto st6
		}
		goto st0
	st6:
		if p++; p == pe {
			goto _test_eof6
		}
	st_case_6:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st7
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st7
			}
		default:
			goto st7
		}
		goto st0
	st7:
		if p++; p == pe {
			goto _test_eof7
		}
	st_case_7:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st8
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st8
			}
		default:
			goto st8
		}
		goto st0
	st8:
		if p++; p == pe {
			goto _test_eof8
		}
	st_case_8:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st3
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st3
			}
		default:
			goto st3
		}
		goto st0
	tr24:
//line lex.rl:33
		{
			r, size := utf8.DecodeRune(data[p-2:])
			if size != 2 {
				return p - 2, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st9
	tr32:
//line lex.rl:39
		{
			r, size := utf8.DecodeRune(data[p-3:])
			if size != 3 {
				return p - 3, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st9
	tr41:
//line lex.rl:45
		{
			r, size := utf8.DecodeRune(data[p-4:])
			if size != 4 {
				return p - 4, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st9
	st9:
		if p++; p == pe {
			goto _test_eof9
		}
	st_case_9:
//line lex.go:525
		if 128 <= data[p] && data[p] <= 191 {
			goto st10
		}
		goto st0
	st10:
		if p++; p == pe {
			goto _test_eof10
		}
	st_case_10:
//line lex.rl:59
		send = p
//line lex.go:537
		switch data[p] {
		case 34:
			goto tr22
		case 92:
			goto tr23
		}
		switch {
		case data[p] < 224:
			switch {
			case data[p] > 191:
				if 192 <= data[p] && data[p] <= 223 {
					goto tr24
				}
			case data[p] >= 128:
				goto st0
			}
		case data[p] > 239:
			switch {
			case data[p] > 247:
				if 248 <= data[p] {
					goto st0
				}
			case data[p] >= 240:
				goto tr26
			}
		default:
			goto tr25
		}
		goto tr21
	tr25:
//line lex.rl:33
		{
			r, size := utf8.DecodeRune(data[p-2:])
			if size != 2 {
				return p - 2, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st11
	tr33:
//line lex.rl:39
		{
			r, size := utf8.DecodeRune(data[p-3:])
			if size != 3 {
				return p - 3, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st11
	tr42:
//line lex.rl:45
		{
			r, size := utf8.DecodeRune(data[p-4:])
			if size != 4 {
				return p - 4, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st11
	st11:
		if p++; p == pe {
			goto _test_eof11
		}
	st_case_11:
//line lex.go:599
		if 128 <= data[p] && data[p] <= 191 {
			goto st12
		}
		goto st0
	st12:
		if p++; p == pe {
			goto _test_eof12
		}
	st_case_12:
		if 128 <= data[p] && data[p] <= 191 {
			goto st13
		}
		goto st0
	st13:
		if p++; p == pe {
			goto _test_eof13
		}
	st_case_13:
//line lex.rl:59
		send = p
//line lex.go:620
		switch data[p] {
		case 34:
			goto tr30
		case 92:
			goto tr31
		}
		switch {
		case data[p] < 224:
			switch {
			case data[p] > 191:
				if 192 <= data[p] && data[p] <= 223 {
					goto tr32
				}
			case data[p] >= 128:
				goto st0
			}
		case data[p] > 239:
			switch {
			case data[p] > 247:
				if 248 <= data[p] {
					goto st0
				}
			case data[p] >= 240:
				goto tr34
			}
		default:
			goto tr33
		}
		goto tr29
	tr26:
//line lex.rl:33
		{
			r, size := utf8.DecodeRune(data[p-2:])
			if size != 2 {
				return p - 2, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st14
	tr34:
//line lex.rl:39
		{
			r, size := utf8.DecodeRune(data[p-3:])
			if size != 3 {
				return p - 3, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st14
	tr43:
//line lex.rl:45
		{
			r, size := utf8.DecodeRune(data[p-4:])
			if size != 4 {
				return p - 4, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st14
	st14:
		if p++; p == pe {
			goto _test_eof14
		}
	st_case_14:
//line lex.go:682
		if 128 <= data[p] && data[p] <= 191 {
			goto st15
		}
		goto st0
	st15:
		if p++; p == pe {
			goto _test_eof15
		}
	st_case_15:
		if 128 <= data[p] && data[p] <= 191 {
			goto st16
		}
		goto st0
	st16:
		if p++; p == pe {
			goto _test_eof16
		}
	st_case_16:
		if 128 <= data[p] && data[p] <= 191 {
			goto st17
		}
		goto st0
	st17:
		if p++; p == pe {
			goto _test_eof17
		}
	st_case_17:
//line lex.rl:59
		send = p
//line lex.go:712
		switch data[p] {
		case 34:
			goto tr39
		case 92:
			goto tr40
		}
		switch {
		case data[p] < 224:
			switch {
			case data[p] > 191:
				if 192 <= data[p] && data[p] <= 223 {
					goto tr41
				}
			case data[p] >= 128:
				goto st0
			}
		case data[p] > 239:
			switch {
			case data[p] > 247:
				if 248 <= data[p] {
					goto st0
				}
			case data[p] >= 240:
				goto tr43
			}
		default:
			goto tr42
		}
		goto tr38
	tr3:
//line lex.rl:84
		neg = true
//line lex.rl:62
		neg = false
//line lex.rl:62
		neg = true
		goto st18
	st18:
		if p++; p == pe {
			goto _test_eof18
		}
	st_case_18:
//line lex.go:755
		if 48 <= data[p] && data[p] <= 57 {
			goto tr44
		}
		goto st0
	tr4:
//line lex.rl:61
		curi *= 10
		curi += uint64(data[p] - '0')
//line lex.rl:62
		neg = false
//line lex.rl:117
		{
			// since this is the 'final' state,
			// advance the character pointer
			// so that it points past the final char
			// (i.e. return the # of characters consumed)
			return p + 1, nil
		}
		goto st30
	tr44:
//line lex.rl:61
		curi *= 10
		curi += uint64(data[p] - '0')
//line lex.rl:117
		{
			// since this is the 'final' state,
			// advance the character pointer
			// so that it points past the final char
			// (i.e. return the # of characters consumed)
			return p + 1, nil
		}
		goto st30
	st30:
		if p++; p == pe {
			goto _test_eof30
		}
	st_case_30:
//line lex.go:791
		if data[p] == 46 {
			goto tr55
		}
		if 48 <= data[p] && data[p] <= 57 {
			goto tr44
		}
		goto st0
	tr55:
//line lex.rl:117
		{
			// since this is the 'final' state,
			// advance the character pointer
			// so that it points past the final char
			// (i.e. return the # of characters consumed)
			return p + 1, nil
		}
		goto st31
	tr56:
//line lex.rl:72
		curi *= 10
		curi += uint64(data[p] - '0')
		dc--
//line lex.rl:117
		{
			// since this is the 'final' state,
			// advance the character pointer
			// so that it points past the final char
			// (i.e. return the # of characters consumed)
			return p + 1, nil
		}
		goto st31
	st31:
		if p++; p == pe {
			goto _test_eof31
		}
	st_case_31:
//line lex.go:826
		switch data[p] {
		case 69:
			goto tr57
		case 101:
			goto tr57
		}
		if 48 <= data[p] && data[p] <= 57 {
			goto tr56
		}
		goto st0
	tr57:
//line lex.rl:117
		{
			// since this is the 'final' state,
			// advance the character pointer
			// so that it points past the final char
			// (i.e. return the # of characters consumed)
			return p + 1, nil
		}
		goto st32
	st32:
		if p++; p == pe {
			goto _test_eof32
		}
	st_case_32:
//line lex.go:852
		switch data[p] {
		case 43:
			goto tr58
		case 45:
			goto tr59
		}
		if 48 <= data[p] && data[p] <= 57 {
			goto tr60
		}
		goto st0
	tr58:
//line lex.rl:117
		{
			// since this is the 'final' state,
			// advance the character pointer
			// so that it points past the final char
			// (i.e. return the # of characters consumed)
			return p + 1, nil
		}
		goto st33
	tr59:
//line lex.rl:74
		nege = true
//line lex.rl:117
		{
			// since this is the 'final' state,
			// advance the character pointer
			// so that it points past the final char
			// (i.e. return the # of characters consumed)
			return p + 1, nil
		}
		goto st33
	tr60:
//line lex.rl:74
		cure *= 10
		cure += int(data[p]) - '0'
//line lex.rl:117
		{
			// since this is the 'final' state,
			// advance the character pointer
			// so that it points past the final char
			// (i.e. return the # of characters consumed)
			return p + 1, nil
		}
		goto st33
	st33:
		if p++; p == pe {
			goto _test_eof33
		}
	st_case_33:
//line lex.go:902
		if 48 <= data[p] && data[p] <= 57 {
			goto tr60
		}
		goto st0
	tr5:
//line lex.rl:101
		{
			p++ // skip '['
			npe, err := parseList(s, data[p:])
			p += npe
			if err != nil {
				return p, err
			}
			// will automatically advance past ']'
		}
//line lex.rl:117
		{
			// since this is the 'final' state,
			// advance the character pointer
			// so that it points past the final char
			// (i.e. return the # of characters consumed)
			return p + 1, nil
		}
		goto st34
	tr9:
//line lex.rl:92
		{
			p++ // skip '{'
			npe, err := parseRecord(s, data[p:])
			p += npe // skip struct body
			if err != nil {
				return p, err
			}
			// will automatically advance past '}'
		}
//line lex.rl:117
		{
			// since this is the 'final' state,
			// advance the character pointer
			// so that it points past the final char
			// (i.e. return the # of characters consumed)
			return p + 1, nil
		}
		goto st34
	st34:
		if p++; p == pe {
			goto _test_eof34
		}
	st_case_34:
//line lex.go:952
		goto st0
	st19:
		if p++; p == pe {
			goto _test_eof19
		}
	st_case_19:
		if data[p] == 97 {
			goto st20
		}
		goto st0
	st20:
		if p++; p == pe {
			goto _test_eof20
		}
	st_case_20:
		if data[p] == 108 {
			goto st21
		}
		goto st0
	st21:
		if p++; p == pe {
			goto _test_eof21
		}
	st_case_21:
		if data[p] == 115 {
			goto st22
		}
		goto st0
	st22:
		if p++; p == pe {
			goto _test_eof22
		}
	st_case_22:
		if data[p] == 101 {
			goto tr48
		}
		goto st0
	tr48:
//line lex.rl:117
		{
			// since this is the 'final' state,
			// advance the character pointer
			// so that it points past the final char
			// (i.e. return the # of characters consumed)
			return p + 1, nil
		}
		goto st35
	st35:
		if p++; p == pe {
			goto _test_eof35
		}
	st_case_35:
//line lex.go:1005
		goto st0
	st23:
		if p++; p == pe {
			goto _test_eof23
		}
	st_case_23:
		if data[p] == 117 {
			goto st24
		}
		goto st0
	st24:
		if p++; p == pe {
			goto _test_eof24
		}
	st_case_24:
		if data[p] == 108 {
			goto st25
		}
		goto st0
	st25:
		if p++; p == pe {
			goto _test_eof25
		}
	st_case_25:
		if data[p] == 108 {
			goto tr51
		}
		goto st0
	tr51:
//line lex.rl:117
		{
			// since this is the 'final' state,
			// advance the character pointer
			// so that it points past the final char
			// (i.e. return the # of characters consumed)
			return p + 1, nil
		}
		goto st36
	st36:
		if p++; p == pe {
			goto _test_eof36
		}
	st_case_36:
//line lex.go:1049
		goto st0
	st26:
		if p++; p == pe {
			goto _test_eof26
		}
	st_case_26:
		if data[p] == 114 {
			goto st27
		}
		goto st0
	st27:
		if p++; p == pe {
			goto _test_eof27
		}
	st_case_27:
		if data[p] == 117 {
			goto st28
		}
		goto st0
	st28:
		if p++; p == pe {
			goto _test_eof28
		}
	st_case_28:
		if data[p] == 101 {
			goto tr54
		}
		goto st0
	tr54:
//line lex.rl:117
		{
			// since this is the 'final' state,
			// advance the character pointer
			// so that it points past the final char
			// (i.e. return the # of characters consumed)
			return p + 1, nil
		}
		goto st37
	st37:
		if p++; p == pe {
			goto _test_eof37
		}
	st_case_37:
//line lex.go:1093
		goto st0
	st_out:
	_test_eof1:
		cs = 1
		goto _test_eof
	_test_eof2:
		cs = 2
		goto _test_eof
	_test_eof3:
		cs = 3
		goto _test_eof
	_test_eof29:
		cs = 29
		goto _test_eof
	_test_eof4:
		cs = 4
		goto _test_eof
	_test_eof5:
		cs = 5
		goto _test_eof
	_test_eof6:
		cs = 6
		goto _test_eof
	_test_eof7:
		cs = 7
		goto _test_eof
	_test_eof8:
		cs = 8
		goto _test_eof
	_test_eof9:
		cs = 9
		goto _test_eof
	_test_eof10:
		cs = 10
		goto _test_eof
	_test_eof11:
		cs = 11
		goto _test_eof
	_test_eof12:
		cs = 12
		goto _test_eof
	_test_eof13:
		cs = 13
		goto _test_eof
	_test_eof14:
		cs = 14
		goto _test_eof
	_test_eof15:
		cs = 15
		goto _test_eof
	_test_eof16:
		cs = 16
		goto _test_eof
	_test_eof17:
		cs = 17
		goto _test_eof
	_test_eof18:
		cs = 18
		goto _test_eof
	_test_eof30:
		cs = 30
		goto _test_eof
	_test_eof31:
		cs = 31
		goto _test_eof
	_test_eof32:
		cs = 32
		goto _test_eof
	_test_eof33:
		cs = 33
		goto _test_eof
	_test_eof34:
		cs = 34
		goto _test_eof
	_test_eof19:
		cs = 19
		goto _test_eof
	_test_eof20:
		cs = 20
		goto _test_eof
	_test_eof21:
		cs = 21
		goto _test_eof
	_test_eof22:
		cs = 22
		goto _test_eof
	_test_eof35:
		cs = 35
		goto _test_eof
	_test_eof23:
		cs = 23
		goto _test_eof
	_test_eof24:
		cs = 24
		goto _test_eof
	_test_eof25:
		cs = 25
		goto _test_eof
	_test_eof36:
		cs = 36
		goto _test_eof
	_test_eof26:
		cs = 26
		goto _test_eof
	_test_eof27:
		cs = 27
		goto _test_eof
	_test_eof28:
		cs = 28
		goto _test_eof
	_test_eof37:
		cs = 37
		goto _test_eof

	_test_eof:
		{
		}
		if p == eof {
			switch cs {
			case 30:
//line lex.rl:62
				{
					i := int64(curi)
					/* FIXME: what if this integer is out of range? */
					if neg {
						i = -i
					}
					s.parseInt(i)
					curi = 0
				}
			case 31:
//line lex.rl:84

				atof(s, curi, dc, neg)
				curi = 0
				dc = 0
				cure = 0
				neg = false
				nege = false

			case 36:
//line lex.rl:89
				s.parseNull()
			case 37:
//line lex.rl:90
				s.parseBool(true)
			case 35:
//line lex.rl:91
				s.parseBool(false)
			case 32, 33:
//line lex.rl:74

				if nege {
					cure = -cure
				}
				dc += cure

//line lex.rl:84

				atof(s, curi, dc, neg)
				curi = 0
				dc = 0
				cure = 0
				neg = false
				nege = false

//line lex.go:1175
			}
		}

	_out:
		{
		}
	}

//line lex.rl:139

	return p, fmt.Errorf("ParseObject: position %d of %d: %w", p, pe, ErrNoMatch)
}

//line lex.rl:152

//line lex.go:1192
const recfields_start int = 1
const recfields_error int = 0

const recfields_en_main int = 1

//line lex.rl:155

func parseRecord(s *State, data []byte) (int, error) {
	neg, nege, esc := false, false, false
	sbegin, send := 0, 0
	curi, cure, dc := uint64(0), int(0), int(0)
	s.beginRecord()
	cs, p, pe, eof := 0, 0, len(data), len(data)
	_ = eof

//line lex.go:1209
	{
		cs = recfields_start
	}

//line lex.go:1214
	{
		if p == pe {
			goto _test_eof
		}
		switch cs {
		case 1:
			goto st_case_1
		case 0:
			goto st_case_0
		case 2:
			goto st_case_2
		case 3:
			goto st_case_3
		case 4:
			goto st_case_4
		case 5:
			goto st_case_5
		case 6:
			goto st_case_6
		case 7:
			goto st_case_7
		case 8:
			goto st_case_8
		case 9:
			goto st_case_9
		case 10:
			goto st_case_10
		case 59:
			goto st_case_59
		case 11:
			goto st_case_11
		case 12:
			goto st_case_12
		case 13:
			goto st_case_13
		case 14:
			goto st_case_14
		case 15:
			goto st_case_15
		case 16:
			goto st_case_16
		case 17:
			goto st_case_17
		case 18:
			goto st_case_18
		case 19:
			goto st_case_19
		case 20:
			goto st_case_20
		case 21:
			goto st_case_21
		case 22:
			goto st_case_22
		case 23:
			goto st_case_23
		case 24:
			goto st_case_24
		case 25:
			goto st_case_25
		case 26:
			goto st_case_26
		case 27:
			goto st_case_27
		case 28:
			goto st_case_28
		case 29:
			goto st_case_29
		case 30:
			goto st_case_30
		case 31:
			goto st_case_31
		case 32:
			goto st_case_32
		case 33:
			goto st_case_33
		case 34:
			goto st_case_34
		case 35:
			goto st_case_35
		case 36:
			goto st_case_36
		case 37:
			goto st_case_37
		case 38:
			goto st_case_38
		case 39:
			goto st_case_39
		case 40:
			goto st_case_40
		case 41:
			goto st_case_41
		case 42:
			goto st_case_42
		case 43:
			goto st_case_43
		case 44:
			goto st_case_44
		case 45:
			goto st_case_45
		case 46:
			goto st_case_46
		case 47:
			goto st_case_47
		case 48:
			goto st_case_48
		case 49:
			goto st_case_49
		case 50:
			goto st_case_50
		case 51:
			goto st_case_51
		case 52:
			goto st_case_52
		case 53:
			goto st_case_53
		case 54:
			goto st_case_54
		case 55:
			goto st_case_55
		case 56:
			goto st_case_56
		case 57:
			goto st_case_57
		case 58:
			goto st_case_58
		}
		goto st_out
	st1:
		if p++; p == pe {
			goto _test_eof1
		}
	st_case_1:
		switch data[p] {
		case 32:
			goto st1
		case 34:
			goto st2
		case 125:
			goto tr3
		}
		if 9 <= data[p] && data[p] <= 13 {
			goto st1
		}
		goto st0
	st_case_0:
	st0:
		cs = 0
		goto _out
	st2:
		if p++; p == pe {
			goto _test_eof2
		}
	st_case_2:
//line lex.rl:59
		esc = false
		sbegin = p
//line lex.rl:59
		send = p
//line lex.go:1372
		switch data[p] {
		case 34:
			goto st4
		case 92:
			goto tr6
		}
		switch {
		case data[p] < 224:
			switch {
			case data[p] > 191:
				if 192 <= data[p] && data[p] <= 223 {
					goto st50
				}
			case data[p] >= 128:
				goto st0
			}
		case data[p] > 239:
			switch {
			case data[p] > 247:
				if 248 <= data[p] {
					goto st0
				}
			case data[p] >= 240:
				goto st55
			}
		default:
			goto st52
		}
		goto st3
	tr96:
//line lex.rl:33
		{
			r, size := utf8.DecodeRune(data[p-2:])
			if size != 2 {
				return p - 2, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st3
	tr104:
//line lex.rl:39
		{
			r, size := utf8.DecodeRune(data[p-3:])
			if size != 3 {
				return p - 3, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st3
	tr113:
//line lex.rl:45
		{
			r, size := utf8.DecodeRune(data[p-4:])
			if size != 4 {
				return p - 4, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st3
	st3:
		if p++; p == pe {
			goto _test_eof3
		}
	st_case_3:
//line lex.rl:59
		send = p
//line lex.go:1436
		switch data[p] {
		case 34:
			goto st4
		case 92:
			goto tr6
		}
		switch {
		case data[p] < 224:
			switch {
			case data[p] > 191:
				if 192 <= data[p] && data[p] <= 223 {
					goto st50
				}
			case data[p] >= 128:
				goto st0
			}
		case data[p] > 239:
			switch {
			case data[p] > 247:
				if 248 <= data[p] {
					goto st0
				}
			case data[p] >= 240:
				goto st55
			}
		default:
			goto st52
		}
		goto st3
	tr97:
//line lex.rl:33
		{
			r, size := utf8.DecodeRune(data[p-2:])
			if size != 2 {
				return p - 2, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st4
	tr105:
//line lex.rl:39
		{
			r, size := utf8.DecodeRune(data[p-3:])
			if size != 3 {
				return p - 3, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st4
	tr114:
//line lex.rl:45
		{
			r, size := utf8.DecodeRune(data[p-4:])
			if size != 4 {
				return p - 4, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st4
	st4:
		if p++; p == pe {
			goto _test_eof4
		}
	st_case_4:
//line lex.rl:146
		s.beginField(data[sbegin:send], esc)
//line lex.go:1500
		switch data[p] {
		case 32:
			goto st5
		case 58:
			goto st6
		}
		if 9 <= data[p] && data[p] <= 13 {
			goto st5
		}
		goto st0
	st5:
		if p++; p == pe {
			goto _test_eof5
		}
	st_case_5:
		switch data[p] {
		case 32:
			goto st5
		case 58:
			goto st6
		}
		if 9 <= data[p] && data[p] <= 13 {
			goto st5
		}
		goto st0
	st6:
		if p++; p == pe {
			goto _test_eof6
		}
	st_case_6:
		switch data[p] {
		case 32:
			goto st6
		case 34:
			goto st7
		case 45:
			goto tr13
		case 91:
			goto tr15
		case 102:
			goto st32
		case 110:
			goto st37
		case 116:
			goto st41
		case 123:
			goto tr19
		}
		switch {
		case data[p] > 13:
			if 48 <= data[p] && data[p] <= 57 {
				goto tr14
			}
		case data[p] >= 9:
			goto st6
		}
		goto st0
	st7:
		if p++; p == pe {
			goto _test_eof7
		}
	st_case_7:
//line lex.rl:59
		esc = false
		sbegin = p
//line lex.rl:59
		send = p
//line lex.go:1567
		switch data[p] {
		case 34:
			goto st9
		case 92:
			goto tr22
		}
		switch {
		case data[p] < 224:
			switch {
			case data[p] > 191:
				if 192 <= data[p] && data[p] <= 223 {
					goto st17
				}
			case data[p] >= 128:
				goto st0
			}
		case data[p] > 239:
			switch {
			case data[p] > 247:
				if 248 <= data[p] {
					goto st0
				}
			case data[p] >= 240:
				goto st22
			}
		default:
			goto st19
		}
		goto st8
	tr33:
//line lex.rl:33
		{
			r, size := utf8.DecodeRune(data[p-2:])
			if size != 2 {
				return p - 2, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st8
	tr41:
//line lex.rl:39
		{
			r, size := utf8.DecodeRune(data[p-3:])
			if size != 3 {
				return p - 3, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st8
	tr50:
//line lex.rl:45
		{
			r, size := utf8.DecodeRune(data[p-4:])
			if size != 4 {
				return p - 4, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st8
	st8:
		if p++; p == pe {
			goto _test_eof8
		}
	st_case_8:
//line lex.rl:59
		send = p
//line lex.go:1631
		switch data[p] {
		case 34:
			goto st9
		case 92:
			goto tr22
		}
		switch {
		case data[p] < 224:
			switch {
			case data[p] > 191:
				if 192 <= data[p] && data[p] <= 223 {
					goto st17
				}
			case data[p] >= 128:
				goto st0
			}
		case data[p] > 239:
			switch {
			case data[p] > 247:
				if 248 <= data[p] {
					goto st0
				}
			case data[p] >= 240:
				goto st22
			}
		default:
			goto st19
		}
		goto st8
	tr34:
//line lex.rl:33
		{
			r, size := utf8.DecodeRune(data[p-2:])
			if size != 2 {
				return p - 2, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st9
	tr42:
//line lex.rl:39
		{
			r, size := utf8.DecodeRune(data[p-3:])
			if size != 3 {
				return p - 3, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st9
	tr51:
//line lex.rl:45
		{
			r, size := utf8.DecodeRune(data[p-4:])
			if size != 4 {
				return p - 4, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st9
	st9:
		if p++; p == pe {
			goto _test_eof9
		}
	st_case_9:
//line lex.rl:110
		s.parseString(data[sbegin:send], esc)
//line lex.go:1695
		switch data[p] {
		case 32:
			goto st10
		case 44:
			goto st11
		case 125:
			goto tr3
		}
		if 9 <= data[p] && data[p] <= 13 {
			goto st10
		}
		goto st0
	tr57:
//line lex.rl:62
		{
			i := int64(curi)
			/* FIXME: what if this integer is out of range? */
			if neg {
				i = -i
			}
			s.parseInt(i)
			curi = 0
		}
		goto st10
	tr61:
//line lex.rl:84

		atof(s, curi, dc, neg)
		curi = 0
		dc = 0
		cure = 0
		neg = false
		nege = false

		goto st10
	tr66:
//line lex.rl:74

		if nege {
			cure = -cure
		}
		dc += cure

//line lex.rl:84

		atof(s, curi, dc, neg)
		curi = 0
		dc = 0
		cure = 0
		neg = false
		nege = false

		goto st10
	tr76:
//line lex.rl:91
		s.parseBool(false)
		goto st10
	tr82:
//line lex.rl:89
		s.parseNull()
		goto st10
	tr88:
//line lex.rl:90
		s.parseBool(true)
		goto st10
	st10:
		if p++; p == pe {
			goto _test_eof10
		}
	st_case_10:
//line lex.go:1757
		switch data[p] {
		case 32:
			goto st10
		case 125:
			goto tr3
		}
		if 9 <= data[p] && data[p] <= 13 {
			goto st10
		}
		goto st0
	tr3:
//line lex.rl:148

		s.endRecord()
		return p, nil

		goto st59
	tr60:
//line lex.rl:62
		{
			i := int64(curi)
			/* FIXME: what if this integer is out of range? */
			if neg {
				i = -i
			}
			s.parseInt(i)
			curi = 0
		}
//line lex.rl:148

		s.endRecord()
		return p, nil

		goto st59
	tr65:
//line lex.rl:84

		atof(s, curi, dc, neg)
		curi = 0
		dc = 0
		cure = 0
		neg = false
		nege = false

//line lex.rl:148

		s.endRecord()
		return p, nil

		goto st59
	tr71:
//line lex.rl:74

		if nege {
			cure = -cure
		}
		dc += cure

//line lex.rl:84

		atof(s, curi, dc, neg)
		curi = 0
		dc = 0
		cure = 0
		neg = false
		nege = false

//line lex.rl:148

		s.endRecord()
		return p, nil

		goto st59
	tr78:
//line lex.rl:91
		s.parseBool(false)
//line lex.rl:148

		s.endRecord()
		return p, nil

		goto st59
	tr84:
//line lex.rl:89
		s.parseNull()
//line lex.rl:148

		s.endRecord()
		return p, nil

		goto st59
	tr90:
//line lex.rl:90
		s.parseBool(true)
//line lex.rl:148

		s.endRecord()
		return p, nil

		goto st59
	st59:
		if p++; p == pe {
			goto _test_eof59
		}
	st_case_59:
//line lex.go:1854
		goto st0
	tr58:
//line lex.rl:62
		{
			i := int64(curi)
			/* FIXME: what if this integer is out of range? */
			if neg {
				i = -i
			}
			s.parseInt(i)
			curi = 0
		}
		goto st11
	tr62:
//line lex.rl:84

		atof(s, curi, dc, neg)
		curi = 0
		dc = 0
		cure = 0
		neg = false
		nege = false

		goto st11
	tr68:
//line lex.rl:74

		if nege {
			cure = -cure
		}
		dc += cure

//line lex.rl:84

		atof(s, curi, dc, neg)
		curi = 0
		dc = 0
		cure = 0
		neg = false
		nege = false

		goto st11
	tr77:
//line lex.rl:91
		s.parseBool(false)
		goto st11
	tr83:
//line lex.rl:89
		s.parseNull()
		goto st11
	tr89:
//line lex.rl:90
		s.parseBool(true)
		goto st11
	st11:
		if p++; p == pe {
			goto _test_eof11
		}
	st_case_11:
//line lex.go:1905
		switch data[p] {
		case 32:
			goto st11
		case 34:
			goto st2
		}
		if 9 <= data[p] && data[p] <= 13 {
			goto st11
		}
		goto st0
	tr22:
//line lex.rl:29
		esc = true
		goto st12
	tr35:
//line lex.rl:33
		{
			r, size := utf8.DecodeRune(data[p-2:])
			if size != 2 {
				return p - 2, fmt.Errorf("bad rune %x", r)
			}
		}
//line lex.rl:29
		esc = true
		goto st12
	tr43:
//line lex.rl:39
		{
			r, size := utf8.DecodeRune(data[p-3:])
			if size != 3 {
				return p - 3, fmt.Errorf("bad rune %x", r)
			}
		}
//line lex.rl:29
		esc = true
		goto st12
	tr52:
//line lex.rl:45
		{
			r, size := utf8.DecodeRune(data[p-4:])
			if size != 4 {
				return p - 4, fmt.Errorf("bad rune %x", r)
			}
		}
//line lex.rl:29
		esc = true
		goto st12
	st12:
		if p++; p == pe {
			goto _test_eof12
		}
	st_case_12:
//line lex.go:1958
		switch data[p] {
		case 34:
			goto st8
		case 47:
			goto st8
		case 92:
			goto st8
		case 102:
			goto st8
		case 110:
			goto st8
		case 114:
			goto st8
		case 117:
			goto st13
		}
		switch {
		case data[p] > 98:
			if 116 <= data[p] && data[p] <= 118 {
				goto st8
			}
		case data[p] >= 97:
			goto st8
		}
		goto st0
	st13:
		if p++; p == pe {
			goto _test_eof13
		}
	st_case_13:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st14
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st14
			}
		default:
			goto st14
		}
		goto st0
	st14:
		if p++; p == pe {
			goto _test_eof14
		}
	st_case_14:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st15
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st15
			}
		default:
			goto st15
		}
		goto st0
	st15:
		if p++; p == pe {
			goto _test_eof15
		}
	st_case_15:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st16
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st16
			}
		default:
			goto st16
		}
		goto st0
	st16:
		if p++; p == pe {
			goto _test_eof16
		}
	st_case_16:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st8
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st8
			}
		default:
			goto st8
		}
		goto st0
	tr36:
//line lex.rl:33
		{
			r, size := utf8.DecodeRune(data[p-2:])
			if size != 2 {
				return p - 2, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st17
	tr44:
//line lex.rl:39
		{
			r, size := utf8.DecodeRune(data[p-3:])
			if size != 3 {
				return p - 3, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st17
	tr53:
//line lex.rl:45
		{
			r, size := utf8.DecodeRune(data[p-4:])
			if size != 4 {
				return p - 4, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st17
	st17:
		if p++; p == pe {
			goto _test_eof17
		}
	st_case_17:
//line lex.go:2088
		if 128 <= data[p] && data[p] <= 191 {
			goto st18
		}
		goto st0
	st18:
		if p++; p == pe {
			goto _test_eof18
		}
	st_case_18:
//line lex.rl:59
		send = p
//line lex.go:2100
		switch data[p] {
		case 34:
			goto tr34
		case 92:
			goto tr35
		}
		switch {
		case data[p] < 224:
			switch {
			case data[p] > 191:
				if 192 <= data[p] && data[p] <= 223 {
					goto tr36
				}
			case data[p] >= 128:
				goto st0
			}
		case data[p] > 239:
			switch {
			case data[p] > 247:
				if 248 <= data[p] {
					goto st0
				}
			case data[p] >= 240:
				goto tr38
			}
		default:
			goto tr37
		}
		goto tr33
	tr37:
//line lex.rl:33
		{
			r, size := utf8.DecodeRune(data[p-2:])
			if size != 2 {
				return p - 2, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st19
	tr45:
//line lex.rl:39
		{
			r, size := utf8.DecodeRune(data[p-3:])
			if size != 3 {
				return p - 3, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st19
	tr54:
//line lex.rl:45
		{
			r, size := utf8.DecodeRune(data[p-4:])
			if size != 4 {
				return p - 4, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st19
	st19:
		if p++; p == pe {
			goto _test_eof19
		}
	st_case_19:
//line lex.go:2162
		if 128 <= data[p] && data[p] <= 191 {
			goto st20
		}
		goto st0
	st20:
		if p++; p == pe {
			goto _test_eof20
		}
	st_case_20:
		if 128 <= data[p] && data[p] <= 191 {
			goto st21
		}
		goto st0
	st21:
		if p++; p == pe {
			goto _test_eof21
		}
	st_case_21:
//line lex.rl:59
		send = p
//line lex.go:2183
		switch data[p] {
		case 34:
			goto tr42
		case 92:
			goto tr43
		}
		switch {
		case data[p] < 224:
			switch {
			case data[p] > 191:
				if 192 <= data[p] && data[p] <= 223 {
					goto tr44
				}
			case data[p] >= 128:
				goto st0
			}
		case data[p] > 239:
			switch {
			case data[p] > 247:
				if 248 <= data[p] {
					goto st0
				}
			case data[p] >= 240:
				goto tr46
			}
		default:
			goto tr45
		}
		goto tr41
	tr38:
//line lex.rl:33
		{
			r, size := utf8.DecodeRune(data[p-2:])
			if size != 2 {
				return p - 2, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st22
	tr46:
//line lex.rl:39
		{
			r, size := utf8.DecodeRune(data[p-3:])
			if size != 3 {
				return p - 3, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st22
	tr55:
//line lex.rl:45
		{
			r, size := utf8.DecodeRune(data[p-4:])
			if size != 4 {
				return p - 4, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st22
	st22:
		if p++; p == pe {
			goto _test_eof22
		}
	st_case_22:
//line lex.go:2245
		if 128 <= data[p] && data[p] <= 191 {
			goto st23
		}
		goto st0
	st23:
		if p++; p == pe {
			goto _test_eof23
		}
	st_case_23:
		if 128 <= data[p] && data[p] <= 191 {
			goto st24
		}
		goto st0
	st24:
		if p++; p == pe {
			goto _test_eof24
		}
	st_case_24:
		if 128 <= data[p] && data[p] <= 191 {
			goto st25
		}
		goto st0
	st25:
		if p++; p == pe {
			goto _test_eof25
		}
	st_case_25:
//line lex.rl:59
		send = p
//line lex.go:2275
		switch data[p] {
		case 34:
			goto tr51
		case 92:
			goto tr52
		}
		switch {
		case data[p] < 224:
			switch {
			case data[p] > 191:
				if 192 <= data[p] && data[p] <= 223 {
					goto tr53
				}
			case data[p] >= 128:
				goto st0
			}
		case data[p] > 239:
			switch {
			case data[p] > 247:
				if 248 <= data[p] {
					goto st0
				}
			case data[p] >= 240:
				goto tr55
			}
		default:
			goto tr54
		}
		goto tr50
	tr13:
//line lex.rl:84
		neg = true
//line lex.rl:62
		neg = false
//line lex.rl:62
		neg = true
		goto st26
	st26:
		if p++; p == pe {
			goto _test_eof26
		}
	st_case_26:
//line lex.go:2318
		if 48 <= data[p] && data[p] <= 57 {
			goto tr56
		}
		goto st0
	tr14:
//line lex.rl:61
		curi *= 10
		curi += uint64(data[p] - '0')
//line lex.rl:62
		neg = false
		goto st27
	tr56:
//line lex.rl:61
		curi *= 10
		curi += uint64(data[p] - '0')
		goto st27
	st27:
		if p++; p == pe {
			goto _test_eof27
		}
	st_case_27:
//line lex.go:2338
		switch data[p] {
		case 32:
			goto tr57
		case 44:
			goto tr58
		case 46:
			goto st28
		case 125:
			goto tr60
		}
		switch {
		case data[p] > 13:
			if 48 <= data[p] && data[p] <= 57 {
				goto tr56
			}
		case data[p] >= 9:
			goto tr57
		}
		goto st0
	tr63:
//line lex.rl:72
		curi *= 10
		curi += uint64(data[p] - '0')
		dc--
		goto st28
	st28:
		if p++; p == pe {
			goto _test_eof28
		}
	st_case_28:
//line lex.go:2367
		switch data[p] {
		case 32:
			goto tr61
		case 44:
			goto tr62
		case 69:
			goto st29
		case 101:
			goto st29
		case 125:
			goto tr65
		}
		switch {
		case data[p] > 13:
			if 48 <= data[p] && data[p] <= 57 {
				goto tr63
			}
		case data[p] >= 9:
			goto tr61
		}
		goto st0
	st29:
		if p++; p == pe {
			goto _test_eof29
		}
	st_case_29:
		switch data[p] {
		case 32:
			goto tr66
		case 43:
			goto st30
		case 44:
			goto tr68
		case 45:
			goto tr69
		case 125:
			goto tr71
		}
		switch {
		case data[p] > 13:
			if 48 <= data[p] && data[p] <= 57 {
				goto tr70
			}
		case data[p] >= 9:
			goto tr66
		}
		goto st0
	tr69:
//line lex.rl:74
		nege = true
		goto st30
	tr70:
//line lex.rl:74
		cure *= 10
		cure += int(data[p]) - '0'
		goto st30
	st30:
		if p++; p == pe {
			goto _test_eof30
		}
	st_case_30:
//line lex.go:2428
		switch data[p] {
		case 32:
			goto tr66
		case 44:
			goto tr68
		case 125:
			goto tr71
		}
		switch {
		case data[p] > 13:
			if 48 <= data[p] && data[p] <= 57 {
				goto tr70
			}
		case data[p] >= 9:
			goto tr66
		}
		goto st0
	tr15:
//line lex.rl:101
		{
			p++ // skip '['
			npe, err := parseList(s, data[p:])
			p += npe
			if err != nil {
				return p, err
			}
			// will automatically advance past ']'
		}
		goto st31
	tr19:
//line lex.rl:92
		{
			p++ // skip '{'
			npe, err := parseRecord(s, data[p:])
			p += npe // skip struct body
			if err != nil {
				return p, err
			}
			// will automatically advance past '}'
		}
		goto st31
	st31:
		if p++; p == pe {
			goto _test_eof31
		}
	st_case_31:
//line lex.go:2475
		switch data[p] {
		case 32:
			goto st10
		case 44:
			goto st11
		case 125:
			goto tr3
		}
		if 9 <= data[p] && data[p] <= 13 {
			goto st10
		}
		goto st0
	st32:
		if p++; p == pe {
			goto _test_eof32
		}
	st_case_32:
		if data[p] == 97 {
			goto st33
		}
		goto st0
	st33:
		if p++; p == pe {
			goto _test_eof33
		}
	st_case_33:
		if data[p] == 108 {
			goto st34
		}
		goto st0
	st34:
		if p++; p == pe {
			goto _test_eof34
		}
	st_case_34:
		if data[p] == 115 {
			goto st35
		}
		goto st0
	st35:
		if p++; p == pe {
			goto _test_eof35
		}
	st_case_35:
		if data[p] == 101 {
			goto st36
		}
		goto st0
	st36:
		if p++; p == pe {
			goto _test_eof36
		}
	st_case_36:
		switch data[p] {
		case 32:
			goto tr76
		case 44:
			goto tr77
		case 125:
			goto tr78
		}
		if 9 <= data[p] && data[p] <= 13 {
			goto tr76
		}
		goto st0
	st37:
		if p++; p == pe {
			goto _test_eof37
		}
	st_case_37:
		if data[p] == 117 {
			goto st38
		}
		goto st0
	st38:
		if p++; p == pe {
			goto _test_eof38
		}
	st_case_38:
		if data[p] == 108 {
			goto st39
		}
		goto st0
	st39:
		if p++; p == pe {
			goto _test_eof39
		}
	st_case_39:
		if data[p] == 108 {
			goto st40
		}
		goto st0
	st40:
		if p++; p == pe {
			goto _test_eof40
		}
	st_case_40:
		switch data[p] {
		case 32:
			goto tr82
		case 44:
			goto tr83
		case 125:
			goto tr84
		}
		if 9 <= data[p] && data[p] <= 13 {
			goto tr82
		}
		goto st0
	st41:
		if p++; p == pe {
			goto _test_eof41
		}
	st_case_41:
		if data[p] == 114 {
			goto st42
		}
		goto st0
	st42:
		if p++; p == pe {
			goto _test_eof42
		}
	st_case_42:
		if data[p] == 117 {
			goto st43
		}
		goto st0
	st43:
		if p++; p == pe {
			goto _test_eof43
		}
	st_case_43:
		if data[p] == 101 {
			goto st44
		}
		goto st0
	st44:
		if p++; p == pe {
			goto _test_eof44
		}
	st_case_44:
		switch data[p] {
		case 32:
			goto tr88
		case 44:
			goto tr89
		case 125:
			goto tr90
		}
		if 9 <= data[p] && data[p] <= 13 {
			goto tr88
		}
		goto st0
	tr6:
//line lex.rl:29
		esc = true
		goto st45
	tr98:
//line lex.rl:33
		{
			r, size := utf8.DecodeRune(data[p-2:])
			if size != 2 {
				return p - 2, fmt.Errorf("bad rune %x", r)
			}
		}
//line lex.rl:29
		esc = true
		goto st45
	tr106:
//line lex.rl:39
		{
			r, size := utf8.DecodeRune(data[p-3:])
			if size != 3 {
				return p - 3, fmt.Errorf("bad rune %x", r)
			}
		}
//line lex.rl:29
		esc = true
		goto st45
	tr115:
//line lex.rl:45
		{
			r, size := utf8.DecodeRune(data[p-4:])
			if size != 4 {
				return p - 4, fmt.Errorf("bad rune %x", r)
			}
		}
//line lex.rl:29
		esc = true
		goto st45
	st45:
		if p++; p == pe {
			goto _test_eof45
		}
	st_case_45:
//line lex.go:2671
		switch data[p] {
		case 34:
			goto st3
		case 47:
			goto st3
		case 92:
			goto st3
		case 102:
			goto st3
		case 110:
			goto st3
		case 114:
			goto st3
		case 117:
			goto st46
		}
		switch {
		case data[p] > 98:
			if 116 <= data[p] && data[p] <= 118 {
				goto st3
			}
		case data[p] >= 97:
			goto st3
		}
		goto st0
	st46:
		if p++; p == pe {
			goto _test_eof46
		}
	st_case_46:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st47
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st47
			}
		default:
			goto st47
		}
		goto st0
	st47:
		if p++; p == pe {
			goto _test_eof47
		}
	st_case_47:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st48
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st48
			}
		default:
			goto st48
		}
		goto st0
	st48:
		if p++; p == pe {
			goto _test_eof48
		}
	st_case_48:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st49
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st49
			}
		default:
			goto st49
		}
		goto st0
	st49:
		if p++; p == pe {
			goto _test_eof49
		}
	st_case_49:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st3
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st3
			}
		default:
			goto st3
		}
		goto st0
	tr99:
//line lex.rl:33
		{
			r, size := utf8.DecodeRune(data[p-2:])
			if size != 2 {
				return p - 2, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st50
	tr107:
//line lex.rl:39
		{
			r, size := utf8.DecodeRune(data[p-3:])
			if size != 3 {
				return p - 3, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st50
	tr116:
//line lex.rl:45
		{
			r, size := utf8.DecodeRune(data[p-4:])
			if size != 4 {
				return p - 4, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st50
	st50:
		if p++; p == pe {
			goto _test_eof50
		}
	st_case_50:
//line lex.go:2801
		if 128 <= data[p] && data[p] <= 191 {
			goto st51
		}
		goto st0
	st51:
		if p++; p == pe {
			goto _test_eof51
		}
	st_case_51:
//line lex.rl:59
		send = p
//line lex.go:2813
		switch data[p] {
		case 34:
			goto tr97
		case 92:
			goto tr98
		}
		switch {
		case data[p] < 224:
			switch {
			case data[p] > 191:
				if 192 <= data[p] && data[p] <= 223 {
					goto tr99
				}
			case data[p] >= 128:
				goto st0
			}
		case data[p] > 239:
			switch {
			case data[p] > 247:
				if 248 <= data[p] {
					goto st0
				}
			case data[p] >= 240:
				goto tr101
			}
		default:
			goto tr100
		}
		goto tr96
	tr100:
//line lex.rl:33
		{
			r, size := utf8.DecodeRune(data[p-2:])
			if size != 2 {
				return p - 2, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st52
	tr108:
//line lex.rl:39
		{
			r, size := utf8.DecodeRune(data[p-3:])
			if size != 3 {
				return p - 3, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st52
	tr117:
//line lex.rl:45
		{
			r, size := utf8.DecodeRune(data[p-4:])
			if size != 4 {
				return p - 4, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st52
	st52:
		if p++; p == pe {
			goto _test_eof52
		}
	st_case_52:
//line lex.go:2875
		if 128 <= data[p] && data[p] <= 191 {
			goto st53
		}
		goto st0
	st53:
		if p++; p == pe {
			goto _test_eof53
		}
	st_case_53:
		if 128 <= data[p] && data[p] <= 191 {
			goto st54
		}
		goto st0
	st54:
		if p++; p == pe {
			goto _test_eof54
		}
	st_case_54:
//line lex.rl:59
		send = p
//line lex.go:2896
		switch data[p] {
		case 34:
			goto tr105
		case 92:
			goto tr106
		}
		switch {
		case data[p] < 224:
			switch {
			case data[p] > 191:
				if 192 <= data[p] && data[p] <= 223 {
					goto tr107
				}
			case data[p] >= 128:
				goto st0
			}
		case data[p] > 239:
			switch {
			case data[p] > 247:
				if 248 <= data[p] {
					goto st0
				}
			case data[p] >= 240:
				goto tr109
			}
		default:
			goto tr108
		}
		goto tr104
	tr101:
//line lex.rl:33
		{
			r, size := utf8.DecodeRune(data[p-2:])
			if size != 2 {
				return p - 2, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st55
	tr109:
//line lex.rl:39
		{
			r, size := utf8.DecodeRune(data[p-3:])
			if size != 3 {
				return p - 3, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st55
	tr118:
//line lex.rl:45
		{
			r, size := utf8.DecodeRune(data[p-4:])
			if size != 4 {
				return p - 4, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st55
	st55:
		if p++; p == pe {
			goto _test_eof55
		}
	st_case_55:
//line lex.go:2958
		if 128 <= data[p] && data[p] <= 191 {
			goto st56
		}
		goto st0
	st56:
		if p++; p == pe {
			goto _test_eof56
		}
	st_case_56:
		if 128 <= data[p] && data[p] <= 191 {
			goto st57
		}
		goto st0
	st57:
		if p++; p == pe {
			goto _test_eof57
		}
	st_case_57:
		if 128 <= data[p] && data[p] <= 191 {
			goto st58
		}
		goto st0
	st58:
		if p++; p == pe {
			goto _test_eof58
		}
	st_case_58:
//line lex.rl:59
		send = p
//line lex.go:2988
		switch data[p] {
		case 34:
			goto tr114
		case 92:
			goto tr115
		}
		switch {
		case data[p] < 224:
			switch {
			case data[p] > 191:
				if 192 <= data[p] && data[p] <= 223 {
					goto tr116
				}
			case data[p] >= 128:
				goto st0
			}
		case data[p] > 239:
			switch {
			case data[p] > 247:
				if 248 <= data[p] {
					goto st0
				}
			case data[p] >= 240:
				goto tr118
			}
		default:
			goto tr117
		}
		goto tr113
	st_out:
	_test_eof1:
		cs = 1
		goto _test_eof
	_test_eof2:
		cs = 2
		goto _test_eof
	_test_eof3:
		cs = 3
		goto _test_eof
	_test_eof4:
		cs = 4
		goto _test_eof
	_test_eof5:
		cs = 5
		goto _test_eof
	_test_eof6:
		cs = 6
		goto _test_eof
	_test_eof7:
		cs = 7
		goto _test_eof
	_test_eof8:
		cs = 8
		goto _test_eof
	_test_eof9:
		cs = 9
		goto _test_eof
	_test_eof10:
		cs = 10
		goto _test_eof
	_test_eof59:
		cs = 59
		goto _test_eof
	_test_eof11:
		cs = 11
		goto _test_eof
	_test_eof12:
		cs = 12
		goto _test_eof
	_test_eof13:
		cs = 13
		goto _test_eof
	_test_eof14:
		cs = 14
		goto _test_eof
	_test_eof15:
		cs = 15
		goto _test_eof
	_test_eof16:
		cs = 16
		goto _test_eof
	_test_eof17:
		cs = 17
		goto _test_eof
	_test_eof18:
		cs = 18
		goto _test_eof
	_test_eof19:
		cs = 19
		goto _test_eof
	_test_eof20:
		cs = 20
		goto _test_eof
	_test_eof21:
		cs = 21
		goto _test_eof
	_test_eof22:
		cs = 22
		goto _test_eof
	_test_eof23:
		cs = 23
		goto _test_eof
	_test_eof24:
		cs = 24
		goto _test_eof
	_test_eof25:
		cs = 25
		goto _test_eof
	_test_eof26:
		cs = 26
		goto _test_eof
	_test_eof27:
		cs = 27
		goto _test_eof
	_test_eof28:
		cs = 28
		goto _test_eof
	_test_eof29:
		cs = 29
		goto _test_eof
	_test_eof30:
		cs = 30
		goto _test_eof
	_test_eof31:
		cs = 31
		goto _test_eof
	_test_eof32:
		cs = 32
		goto _test_eof
	_test_eof33:
		cs = 33
		goto _test_eof
	_test_eof34:
		cs = 34
		goto _test_eof
	_test_eof35:
		cs = 35
		goto _test_eof
	_test_eof36:
		cs = 36
		goto _test_eof
	_test_eof37:
		cs = 37
		goto _test_eof
	_test_eof38:
		cs = 38
		goto _test_eof
	_test_eof39:
		cs = 39
		goto _test_eof
	_test_eof40:
		cs = 40
		goto _test_eof
	_test_eof41:
		cs = 41
		goto _test_eof
	_test_eof42:
		cs = 42
		goto _test_eof
	_test_eof43:
		cs = 43
		goto _test_eof
	_test_eof44:
		cs = 44
		goto _test_eof
	_test_eof45:
		cs = 45
		goto _test_eof
	_test_eof46:
		cs = 46
		goto _test_eof
	_test_eof47:
		cs = 47
		goto _test_eof
	_test_eof48:
		cs = 48
		goto _test_eof
	_test_eof49:
		cs = 49
		goto _test_eof
	_test_eof50:
		cs = 50
		goto _test_eof
	_test_eof51:
		cs = 51
		goto _test_eof
	_test_eof52:
		cs = 52
		goto _test_eof
	_test_eof53:
		cs = 53
		goto _test_eof
	_test_eof54:
		cs = 54
		goto _test_eof
	_test_eof55:
		cs = 55
		goto _test_eof
	_test_eof56:
		cs = 56
		goto _test_eof
	_test_eof57:
		cs = 57
		goto _test_eof
	_test_eof58:
		cs = 58
		goto _test_eof

	_test_eof:
		{
		}
	_out:
		{
		}
	}

//line lex.rl:166

	return p, fmt.Errorf("parseRecord: position %d of %d: %w", p, pe, ErrNoMatch)
}

//line lex.rl:177

//line lex.go:3093
const listfields_start int = 1
const listfields_first_final int = 76
const listfields_error int = 0

const listfields_en_main int = 1

//line lex.rl:180

func parseList(s *State, data []byte) (int, error) {
	neg, nege, esc := false, false, false
	sbegin, send := 0, 0
	curi, cure, dc := uint64(0), int(0), int(0)
	s.beginList()
	cs, p, pe, eof := 0, 0, len(data), len(data)
	_ = eof

//line lex.go:3111
	{
		cs = listfields_start
	}

//line lex.go:3116
	{
		if p == pe {
			goto _test_eof
		}
		switch cs {
		case 1:
			goto st_case_1
		case 0:
			goto st_case_0
		case 2:
			goto st_case_2
		case 3:
			goto st_case_3
		case 4:
			goto st_case_4
		case 5:
			goto st_case_5
		case 6:
			goto st_case_6
		case 7:
			goto st_case_7
		case 8:
			goto st_case_8
		case 9:
			goto st_case_9
		case 10:
			goto st_case_10
		case 76:
			goto st_case_76
		case 11:
			goto st_case_11
		case 12:
			goto st_case_12
		case 13:
			goto st_case_13
		case 14:
			goto st_case_14
		case 15:
			goto st_case_15
		case 16:
			goto st_case_16
		case 17:
			goto st_case_17
		case 18:
			goto st_case_18
		case 19:
			goto st_case_19
		case 20:
			goto st_case_20
		case 21:
			goto st_case_21
		case 22:
			goto st_case_22
		case 23:
			goto st_case_23
		case 24:
			goto st_case_24
		case 25:
			goto st_case_25
		case 26:
			goto st_case_26
		case 27:
			goto st_case_27
		case 28:
			goto st_case_28
		case 29:
			goto st_case_29
		case 30:
			goto st_case_30
		case 31:
			goto st_case_31
		case 32:
			goto st_case_32
		case 33:
			goto st_case_33
		case 34:
			goto st_case_34
		case 35:
			goto st_case_35
		case 36:
			goto st_case_36
		case 37:
			goto st_case_37
		case 38:
			goto st_case_38
		case 39:
			goto st_case_39
		case 40:
			goto st_case_40
		case 41:
			goto st_case_41
		case 42:
			goto st_case_42
		case 43:
			goto st_case_43
		case 44:
			goto st_case_44
		case 45:
			goto st_case_45
		case 46:
			goto st_case_46
		case 47:
			goto st_case_47
		case 48:
			goto st_case_48
		case 49:
			goto st_case_49
		case 50:
			goto st_case_50
		case 51:
			goto st_case_51
		case 52:
			goto st_case_52
		case 53:
			goto st_case_53
		case 54:
			goto st_case_54
		case 55:
			goto st_case_55
		case 56:
			goto st_case_56
		case 57:
			goto st_case_57
		case 58:
			goto st_case_58
		case 59:
			goto st_case_59
		case 60:
			goto st_case_60
		case 61:
			goto st_case_61
		case 62:
			goto st_case_62
		case 63:
			goto st_case_63
		case 64:
			goto st_case_64
		case 65:
			goto st_case_65
		case 66:
			goto st_case_66
		case 67:
			goto st_case_67
		case 68:
			goto st_case_68
		case 69:
			goto st_case_69
		case 70:
			goto st_case_70
		case 71:
			goto st_case_71
		case 72:
			goto st_case_72
		case 73:
			goto st_case_73
		case 74:
			goto st_case_74
		case 75:
			goto st_case_75
		}
		goto st_out
	st1:
		if p++; p == pe {
			goto _test_eof1
		}
	st_case_1:
		switch data[p] {
		case 32:
			goto st1
		case 34:
			goto st2
		case 45:
			goto tr3
		case 91:
			goto tr5
		case 93:
			goto tr6
		case 102:
			goto st63
		case 110:
			goto st68
		case 116:
			goto st72
		case 123:
			goto tr10
		}
		switch {
		case data[p] > 13:
			if 48 <= data[p] && data[p] <= 57 {
				goto tr4
			}
		case data[p] >= 9:
			goto st1
		}
		goto st0
	st_case_0:
	st0:
		cs = 0
		goto _out
	st2:
		if p++; p == pe {
			goto _test_eof2
		}
	st_case_2:
//line lex.rl:59
		esc = false
		sbegin = p
//line lex.rl:59
		send = p
//line lex.go:3325
		switch data[p] {
		case 34:
			goto st4
		case 92:
			goto tr13
		}
		switch {
		case data[p] < 224:
			switch {
			case data[p] > 191:
				if 192 <= data[p] && data[p] <= 223 {
					goto st49
				}
			case data[p] >= 128:
				goto st0
			}
		case data[p] > 239:
			switch {
			case data[p] > 247:
				if 248 <= data[p] {
					goto st0
				}
			case data[p] >= 240:
				goto st54
			}
		default:
			goto st51
		}
		goto st3
	tr102:
//line lex.rl:33
		{
			r, size := utf8.DecodeRune(data[p-2:])
			if size != 2 {
				return p - 2, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st3
	tr110:
//line lex.rl:39
		{
			r, size := utf8.DecodeRune(data[p-3:])
			if size != 3 {
				return p - 3, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st3
	tr119:
//line lex.rl:45
		{
			r, size := utf8.DecodeRune(data[p-4:])
			if size != 4 {
				return p - 4, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st3
	st3:
		if p++; p == pe {
			goto _test_eof3
		}
	st_case_3:
//line lex.rl:59
		send = p
//line lex.go:3389
		switch data[p] {
		case 34:
			goto st4
		case 92:
			goto tr13
		}
		switch {
		case data[p] < 224:
			switch {
			case data[p] > 191:
				if 192 <= data[p] && data[p] <= 223 {
					goto st49
				}
			case data[p] >= 128:
				goto st0
			}
		case data[p] > 239:
			switch {
			case data[p] > 247:
				if 248 <= data[p] {
					goto st0
				}
			case data[p] >= 240:
				goto st54
			}
		default:
			goto st51
		}
		goto st3
	tr103:
//line lex.rl:33
		{
			r, size := utf8.DecodeRune(data[p-2:])
			if size != 2 {
				return p - 2, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st4
	tr111:
//line lex.rl:39
		{
			r, size := utf8.DecodeRune(data[p-3:])
			if size != 3 {
				return p - 3, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st4
	tr120:
//line lex.rl:45
		{
			r, size := utf8.DecodeRune(data[p-4:])
			if size != 4 {
				return p - 4, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st4
	st4:
		if p++; p == pe {
			goto _test_eof4
		}
	st_case_4:
//line lex.rl:110
		s.parseString(data[sbegin:send], esc)
//line lex.go:3453
		switch data[p] {
		case 32:
			goto st5
		case 44:
			goto st6
		case 93:
			goto tr6
		}
		if 9 <= data[p] && data[p] <= 13 {
			goto st5
		}
		goto st0
	tr5:
//line lex.rl:101
		{
			p++ // skip '['
			npe, err := parseList(s, data[p:])
			p += npe
			if err != nil {
				return p, err
			}
			// will automatically advance past ']'
		}
		goto st5
	tr10:
//line lex.rl:92
		{
			p++ // skip '{'
			npe, err := parseRecord(s, data[p:])
			p += npe // skip struct body
			if err != nil {
				return p, err
			}
			// will automatically advance past '}'
		}
		goto st5
	tr126:
//line lex.rl:62
		{
			i := int64(curi)
			/* FIXME: what if this integer is out of range? */
			if neg {
				i = -i
			}
			s.parseInt(i)
			curi = 0
		}
		goto st5
	tr128:
//line lex.rl:84

		atof(s, curi, dc, neg)
		curi = 0
		dc = 0
		cure = 0
		neg = false
		nege = false

		goto st5
	tr131:
//line lex.rl:74

		if nege {
			cure = -cure
		}
		dc += cure

//line lex.rl:84

		atof(s, curi, dc, neg)
		curi = 0
		dc = 0
		cure = 0
		neg = false
		nege = false

		goto st5
	tr139:
//line lex.rl:91
		s.parseBool(false)
		goto st5
	tr143:
//line lex.rl:89
		s.parseNull()
		goto st5
	tr147:
//line lex.rl:90
		s.parseBool(true)
		goto st5
	st5:
		if p++; p == pe {
			goto _test_eof5
		}
	st_case_5:
//line lex.go:3539
		switch data[p] {
		case 32:
			goto st5
		case 44:
			goto st6
		case 93:
			goto tr6
		}
		if 9 <= data[p] && data[p] <= 13 {
			goto st5
		}
		goto st0
	tr64:
//line lex.rl:62
		{
			i := int64(curi)
			/* FIXME: what if this integer is out of range? */
			if neg {
				i = -i
			}
			s.parseInt(i)
			curi = 0
		}
		goto st6
	tr68:
//line lex.rl:84

		atof(s, curi, dc, neg)
		curi = 0
		dc = 0
		cure = 0
		neg = false
		nege = false

		goto st6
	tr74:
//line lex.rl:74

		if nege {
			cure = -cure
		}
		dc += cure

//line lex.rl:84

		atof(s, curi, dc, neg)
		curi = 0
		dc = 0
		cure = 0
		neg = false
		nege = false

		goto st6
	tr83:
//line lex.rl:91
		s.parseBool(false)
		goto st6
	tr89:
//line lex.rl:89
		s.parseNull()
		goto st6
	tr95:
//line lex.rl:90
		s.parseBool(true)
		goto st6
	st6:
		if p++; p == pe {
			goto _test_eof6
		}
	st_case_6:
//line lex.go:3601
		switch data[p] {
		case 32:
			goto st6
		case 34:
			goto st7
		case 45:
			goto tr20
		case 91:
			goto tr22
		case 102:
			goto st31
		case 110:
			goto st36
		case 116:
			goto st40
		case 123:
			goto tr26
		}
		switch {
		case data[p] > 13:
			if 48 <= data[p] && data[p] <= 57 {
				goto tr21
			}
		case data[p] >= 9:
			goto st6
		}
		goto st0
	st7:
		if p++; p == pe {
			goto _test_eof7
		}
	st_case_7:
//line lex.rl:59
		esc = false
		sbegin = p
//line lex.rl:59
		send = p
//line lex.go:3638
		switch data[p] {
		case 34:
			goto st9
		case 92:
			goto tr29
		}
		switch {
		case data[p] < 224:
			switch {
			case data[p] > 191:
				if 192 <= data[p] && data[p] <= 223 {
					goto st16
				}
			case data[p] >= 128:
				goto st0
			}
		case data[p] > 239:
			switch {
			case data[p] > 247:
				if 248 <= data[p] {
					goto st0
				}
			case data[p] >= 240:
				goto st21
			}
		default:
			goto st18
		}
		goto st8
	tr39:
//line lex.rl:33
		{
			r, size := utf8.DecodeRune(data[p-2:])
			if size != 2 {
				return p - 2, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st8
	tr47:
//line lex.rl:39
		{
			r, size := utf8.DecodeRune(data[p-3:])
			if size != 3 {
				return p - 3, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st8
	tr56:
//line lex.rl:45
		{
			r, size := utf8.DecodeRune(data[p-4:])
			if size != 4 {
				return p - 4, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st8
	st8:
		if p++; p == pe {
			goto _test_eof8
		}
	st_case_8:
//line lex.rl:59
		send = p
//line lex.go:3702
		switch data[p] {
		case 34:
			goto st9
		case 92:
			goto tr29
		}
		switch {
		case data[p] < 224:
			switch {
			case data[p] > 191:
				if 192 <= data[p] && data[p] <= 223 {
					goto st16
				}
			case data[p] >= 128:
				goto st0
			}
		case data[p] > 239:
			switch {
			case data[p] > 247:
				if 248 <= data[p] {
					goto st0
				}
			case data[p] >= 240:
				goto st21
			}
		default:
			goto st18
		}
		goto st8
	tr40:
//line lex.rl:33
		{
			r, size := utf8.DecodeRune(data[p-2:])
			if size != 2 {
				return p - 2, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st9
	tr48:
//line lex.rl:39
		{
			r, size := utf8.DecodeRune(data[p-3:])
			if size != 3 {
				return p - 3, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st9
	tr57:
//line lex.rl:45
		{
			r, size := utf8.DecodeRune(data[p-4:])
			if size != 4 {
				return p - 4, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st9
	st9:
		if p++; p == pe {
			goto _test_eof9
		}
	st_case_9:
//line lex.rl:110
		s.parseString(data[sbegin:send], esc)
//line lex.go:3766
		switch data[p] {
		case 32:
			goto st10
		case 44:
			goto st6
		case 93:
			goto tr6
		}
		if 9 <= data[p] && data[p] <= 13 {
			goto st10
		}
		goto st0
	tr63:
//line lex.rl:62
		{
			i := int64(curi)
			/* FIXME: what if this integer is out of range? */
			if neg {
				i = -i
			}
			s.parseInt(i)
			curi = 0
		}
		goto st10
	tr67:
//line lex.rl:84

		atof(s, curi, dc, neg)
		curi = 0
		dc = 0
		cure = 0
		neg = false
		nege = false

		goto st10
	tr72:
//line lex.rl:74

		if nege {
			cure = -cure
		}
		dc += cure

//line lex.rl:84

		atof(s, curi, dc, neg)
		curi = 0
		dc = 0
		cure = 0
		neg = false
		nege = false

		goto st10
	tr82:
//line lex.rl:91
		s.parseBool(false)
		goto st10
	tr88:
//line lex.rl:89
		s.parseNull()
		goto st10
	tr94:
//line lex.rl:90
		s.parseBool(true)
		goto st10
	st10:
		if p++; p == pe {
			goto _test_eof10
		}
	st_case_10:
//line lex.go:3828
		switch data[p] {
		case 32:
			goto st10
		case 93:
			goto tr6
		}
		if 9 <= data[p] && data[p] <= 13 {
			goto st10
		}
		goto st0
	tr6:
//line lex.rl:173

		s.endList()
		return p, nil

		goto st76
	tr66:
//line lex.rl:62
		{
			i := int64(curi)
			/* FIXME: what if this integer is out of range? */
			if neg {
				i = -i
			}
			s.parseInt(i)
			curi = 0
		}
//line lex.rl:173

		s.endList()
		return p, nil

		goto st76
	tr71:
//line lex.rl:84

		atof(s, curi, dc, neg)
		curi = 0
		dc = 0
		cure = 0
		neg = false
		nege = false

//line lex.rl:173

		s.endList()
		return p, nil

		goto st76
	tr77:
//line lex.rl:74

		if nege {
			cure = -cure
		}
		dc += cure

//line lex.rl:84

		atof(s, curi, dc, neg)
		curi = 0
		dc = 0
		cure = 0
		neg = false
		nege = false

//line lex.rl:173

		s.endList()
		return p, nil

		goto st76
	tr84:
//line lex.rl:91
		s.parseBool(false)
//line lex.rl:173

		s.endList()
		return p, nil

		goto st76
	tr90:
//line lex.rl:89
		s.parseNull()
//line lex.rl:173

		s.endList()
		return p, nil

		goto st76
	tr96:
//line lex.rl:90
		s.parseBool(true)
//line lex.rl:173

		s.endList()
		return p, nil

		goto st76
	st76:
		if p++; p == pe {
			goto _test_eof76
		}
	st_case_76:
//line lex.go:3925
		goto st0
	tr29:
//line lex.rl:29
		esc = true
		goto st11
	tr41:
//line lex.rl:33
		{
			r, size := utf8.DecodeRune(data[p-2:])
			if size != 2 {
				return p - 2, fmt.Errorf("bad rune %x", r)
			}
		}
//line lex.rl:29
		esc = true
		goto st11
	tr49:
//line lex.rl:39
		{
			r, size := utf8.DecodeRune(data[p-3:])
			if size != 3 {
				return p - 3, fmt.Errorf("bad rune %x", r)
			}
		}
//line lex.rl:29
		esc = true
		goto st11
	tr58:
//line lex.rl:45
		{
			r, size := utf8.DecodeRune(data[p-4:])
			if size != 4 {
				return p - 4, fmt.Errorf("bad rune %x", r)
			}
		}
//line lex.rl:29
		esc = true
		goto st11
	st11:
		if p++; p == pe {
			goto _test_eof11
		}
	st_case_11:
//line lex.go:3969
		switch data[p] {
		case 34:
			goto st8
		case 47:
			goto st8
		case 92:
			goto st8
		case 102:
			goto st8
		case 110:
			goto st8
		case 114:
			goto st8
		case 117:
			goto st12
		}
		switch {
		case data[p] > 98:
			if 116 <= data[p] && data[p] <= 118 {
				goto st8
			}
		case data[p] >= 97:
			goto st8
		}
		goto st0
	st12:
		if p++; p == pe {
			goto _test_eof12
		}
	st_case_12:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st13
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st13
			}
		default:
			goto st13
		}
		goto st0
	st13:
		if p++; p == pe {
			goto _test_eof13
		}
	st_case_13:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st14
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st14
			}
		default:
			goto st14
		}
		goto st0
	st14:
		if p++; p == pe {
			goto _test_eof14
		}
	st_case_14:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st15
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st15
			}
		default:
			goto st15
		}
		goto st0
	st15:
		if p++; p == pe {
			goto _test_eof15
		}
	st_case_15:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st8
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st8
			}
		default:
			goto st8
		}
		goto st0
	tr42:
//line lex.rl:33
		{
			r, size := utf8.DecodeRune(data[p-2:])
			if size != 2 {
				return p - 2, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st16
	tr50:
//line lex.rl:39
		{
			r, size := utf8.DecodeRune(data[p-3:])
			if size != 3 {
				return p - 3, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st16
	tr59:
//line lex.rl:45
		{
			r, size := utf8.DecodeRune(data[p-4:])
			if size != 4 {
				return p - 4, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st16
	st16:
		if p++; p == pe {
			goto _test_eof16
		}
	st_case_16:
//line lex.go:4099
		if 128 <= data[p] && data[p] <= 191 {
			goto st17
		}
		goto st0
	st17:
		if p++; p == pe {
			goto _test_eof17
		}
	st_case_17:
//line lex.rl:59
		send = p
//line lex.go:4111
		switch data[p] {
		case 34:
			goto tr40
		case 92:
			goto tr41
		}
		switch {
		case data[p] < 224:
			switch {
			case data[p] > 191:
				if 192 <= data[p] && data[p] <= 223 {
					goto tr42
				}
			case data[p] >= 128:
				goto st0
			}
		case data[p] > 239:
			switch {
			case data[p] > 247:
				if 248 <= data[p] {
					goto st0
				}
			case data[p] >= 240:
				goto tr44
			}
		default:
			goto tr43
		}
		goto tr39
	tr43:
//line lex.rl:33
		{
			r, size := utf8.DecodeRune(data[p-2:])
			if size != 2 {
				return p - 2, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st18
	tr51:
//line lex.rl:39
		{
			r, size := utf8.DecodeRune(data[p-3:])
			if size != 3 {
				return p - 3, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st18
	tr60:
//line lex.rl:45
		{
			r, size := utf8.DecodeRune(data[p-4:])
			if size != 4 {
				return p - 4, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st18
	st18:
		if p++; p == pe {
			goto _test_eof18
		}
	st_case_18:
//line lex.go:4173
		if 128 <= data[p] && data[p] <= 191 {
			goto st19
		}
		goto st0
	st19:
		if p++; p == pe {
			goto _test_eof19
		}
	st_case_19:
		if 128 <= data[p] && data[p] <= 191 {
			goto st20
		}
		goto st0
	st20:
		if p++; p == pe {
			goto _test_eof20
		}
	st_case_20:
//line lex.rl:59
		send = p
//line lex.go:4194
		switch data[p] {
		case 34:
			goto tr48
		case 92:
			goto tr49
		}
		switch {
		case data[p] < 224:
			switch {
			case data[p] > 191:
				if 192 <= data[p] && data[p] <= 223 {
					goto tr50
				}
			case data[p] >= 128:
				goto st0
			}
		case data[p] > 239:
			switch {
			case data[p] > 247:
				if 248 <= data[p] {
					goto st0
				}
			case data[p] >= 240:
				goto tr52
			}
		default:
			goto tr51
		}
		goto tr47
	tr44:
//line lex.rl:33
		{
			r, size := utf8.DecodeRune(data[p-2:])
			if size != 2 {
				return p - 2, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st21
	tr52:
//line lex.rl:39
		{
			r, size := utf8.DecodeRune(data[p-3:])
			if size != 3 {
				return p - 3, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st21
	tr61:
//line lex.rl:45
		{
			r, size := utf8.DecodeRune(data[p-4:])
			if size != 4 {
				return p - 4, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st21
	st21:
		if p++; p == pe {
			goto _test_eof21
		}
	st_case_21:
//line lex.go:4256
		if 128 <= data[p] && data[p] <= 191 {
			goto st22
		}
		goto st0
	st22:
		if p++; p == pe {
			goto _test_eof22
		}
	st_case_22:
		if 128 <= data[p] && data[p] <= 191 {
			goto st23
		}
		goto st0
	st23:
		if p++; p == pe {
			goto _test_eof23
		}
	st_case_23:
		if 128 <= data[p] && data[p] <= 191 {
			goto st24
		}
		goto st0
	st24:
		if p++; p == pe {
			goto _test_eof24
		}
	st_case_24:
//line lex.rl:59
		send = p
//line lex.go:4286
		switch data[p] {
		case 34:
			goto tr57
		case 92:
			goto tr58
		}
		switch {
		case data[p] < 224:
			switch {
			case data[p] > 191:
				if 192 <= data[p] && data[p] <= 223 {
					goto tr59
				}
			case data[p] >= 128:
				goto st0
			}
		case data[p] > 239:
			switch {
			case data[p] > 247:
				if 248 <= data[p] {
					goto st0
				}
			case data[p] >= 240:
				goto tr61
			}
		default:
			goto tr60
		}
		goto tr56
	tr20:
//line lex.rl:84
		neg = true
//line lex.rl:62
		neg = false
//line lex.rl:62
		neg = true
		goto st25
	st25:
		if p++; p == pe {
			goto _test_eof25
		}
	st_case_25:
//line lex.go:4329
		if 48 <= data[p] && data[p] <= 57 {
			goto tr62
		}
		goto st0
	tr21:
//line lex.rl:61
		curi *= 10
		curi += uint64(data[p] - '0')
//line lex.rl:62
		neg = false
		goto st26
	tr62:
//line lex.rl:61
		curi *= 10
		curi += uint64(data[p] - '0')
		goto st26
	st26:
		if p++; p == pe {
			goto _test_eof26
		}
	st_case_26:
//line lex.go:4349
		switch data[p] {
		case 32:
			goto tr63
		case 44:
			goto tr64
		case 46:
			goto st27
		case 93:
			goto tr66
		}
		switch {
		case data[p] > 13:
			if 48 <= data[p] && data[p] <= 57 {
				goto tr62
			}
		case data[p] >= 9:
			goto tr63
		}
		goto st0
	tr69:
//line lex.rl:72
		curi *= 10
		curi += uint64(data[p] - '0')
		dc--
		goto st27
	st27:
		if p++; p == pe {
			goto _test_eof27
		}
	st_case_27:
//line lex.go:4378
		switch data[p] {
		case 32:
			goto tr67
		case 44:
			goto tr68
		case 69:
			goto st28
		case 93:
			goto tr71
		case 101:
			goto st28
		}
		switch {
		case data[p] > 13:
			if 48 <= data[p] && data[p] <= 57 {
				goto tr69
			}
		case data[p] >= 9:
			goto tr67
		}
		goto st0
	st28:
		if p++; p == pe {
			goto _test_eof28
		}
	st_case_28:
		switch data[p] {
		case 32:
			goto tr72
		case 43:
			goto st29
		case 44:
			goto tr74
		case 45:
			goto tr75
		case 93:
			goto tr77
		}
		switch {
		case data[p] > 13:
			if 48 <= data[p] && data[p] <= 57 {
				goto tr76
			}
		case data[p] >= 9:
			goto tr72
		}
		goto st0
	tr75:
//line lex.rl:74
		nege = true
		goto st29
	tr76:
//line lex.rl:74
		cure *= 10
		cure += int(data[p]) - '0'
		goto st29
	st29:
		if p++; p == pe {
			goto _test_eof29
		}
	st_case_29:
//line lex.go:4439
		switch data[p] {
		case 32:
			goto tr72
		case 44:
			goto tr74
		case 93:
			goto tr77
		}
		switch {
		case data[p] > 13:
			if 48 <= data[p] && data[p] <= 57 {
				goto tr76
			}
		case data[p] >= 9:
			goto tr72
		}
		goto st0
	tr22:
//line lex.rl:101
		{
			p++ // skip '['
			npe, err := parseList(s, data[p:])
			p += npe
			if err != nil {
				return p, err
			}
			// will automatically advance past ']'
		}
		goto st30
	tr26:
//line lex.rl:92
		{
			p++ // skip '{'
			npe, err := parseRecord(s, data[p:])
			p += npe // skip struct body
			if err != nil {
				return p, err
			}
			// will automatically advance past '}'
		}
		goto st30
	st30:
		if p++; p == pe {
			goto _test_eof30
		}
	st_case_30:
//line lex.go:4486
		switch data[p] {
		case 32:
			goto st10
		case 44:
			goto st6
		case 93:
			goto tr6
		}
		if 9 <= data[p] && data[p] <= 13 {
			goto st10
		}
		goto st0
	st31:
		if p++; p == pe {
			goto _test_eof31
		}
	st_case_31:
		if data[p] == 97 {
			goto st32
		}
		goto st0
	st32:
		if p++; p == pe {
			goto _test_eof32
		}
	st_case_32:
		if data[p] == 108 {
			goto st33
		}
		goto st0
	st33:
		if p++; p == pe {
			goto _test_eof33
		}
	st_case_33:
		if data[p] == 115 {
			goto st34
		}
		goto st0
	st34:
		if p++; p == pe {
			goto _test_eof34
		}
	st_case_34:
		if data[p] == 101 {
			goto st35
		}
		goto st0
	st35:
		if p++; p == pe {
			goto _test_eof35
		}
	st_case_35:
		switch data[p] {
		case 32:
			goto tr82
		case 44:
			goto tr83
		case 93:
			goto tr84
		}
		if 9 <= data[p] && data[p] <= 13 {
			goto tr82
		}
		goto st0
	st36:
		if p++; p == pe {
			goto _test_eof36
		}
	st_case_36:
		if data[p] == 117 {
			goto st37
		}
		goto st0
	st37:
		if p++; p == pe {
			goto _test_eof37
		}
	st_case_37:
		if data[p] == 108 {
			goto st38
		}
		goto st0
	st38:
		if p++; p == pe {
			goto _test_eof38
		}
	st_case_38:
		if data[p] == 108 {
			goto st39
		}
		goto st0
	st39:
		if p++; p == pe {
			goto _test_eof39
		}
	st_case_39:
		switch data[p] {
		case 32:
			goto tr88
		case 44:
			goto tr89
		case 93:
			goto tr90
		}
		if 9 <= data[p] && data[p] <= 13 {
			goto tr88
		}
		goto st0
	st40:
		if p++; p == pe {
			goto _test_eof40
		}
	st_case_40:
		if data[p] == 114 {
			goto st41
		}
		goto st0
	st41:
		if p++; p == pe {
			goto _test_eof41
		}
	st_case_41:
		if data[p] == 117 {
			goto st42
		}
		goto st0
	st42:
		if p++; p == pe {
			goto _test_eof42
		}
	st_case_42:
		if data[p] == 101 {
			goto st43
		}
		goto st0
	st43:
		if p++; p == pe {
			goto _test_eof43
		}
	st_case_43:
		switch data[p] {
		case 32:
			goto tr94
		case 44:
			goto tr95
		case 93:
			goto tr96
		}
		if 9 <= data[p] && data[p] <= 13 {
			goto tr94
		}
		goto st0
	tr13:
//line lex.rl:29
		esc = true
		goto st44
	tr104:
//line lex.rl:33
		{
			r, size := utf8.DecodeRune(data[p-2:])
			if size != 2 {
				return p - 2, fmt.Errorf("bad rune %x", r)
			}
		}
//line lex.rl:29
		esc = true
		goto st44
	tr112:
//line lex.rl:39
		{
			r, size := utf8.DecodeRune(data[p-3:])
			if size != 3 {
				return p - 3, fmt.Errorf("bad rune %x", r)
			}
		}
//line lex.rl:29
		esc = true
		goto st44
	tr121:
//line lex.rl:45
		{
			r, size := utf8.DecodeRune(data[p-4:])
			if size != 4 {
				return p - 4, fmt.Errorf("bad rune %x", r)
			}
		}
//line lex.rl:29
		esc = true
		goto st44
	st44:
		if p++; p == pe {
			goto _test_eof44
		}
	st_case_44:
//line lex.go:4682
		switch data[p] {
		case 34:
			goto st3
		case 47:
			goto st3
		case 92:
			goto st3
		case 102:
			goto st3
		case 110:
			goto st3
		case 114:
			goto st3
		case 117:
			goto st45
		}
		switch {
		case data[p] > 98:
			if 116 <= data[p] && data[p] <= 118 {
				goto st3
			}
		case data[p] >= 97:
			goto st3
		}
		goto st0
	st45:
		if p++; p == pe {
			goto _test_eof45
		}
	st_case_45:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st46
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st46
			}
		default:
			goto st46
		}
		goto st0
	st46:
		if p++; p == pe {
			goto _test_eof46
		}
	st_case_46:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st47
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st47
			}
		default:
			goto st47
		}
		goto st0
	st47:
		if p++; p == pe {
			goto _test_eof47
		}
	st_case_47:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st48
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st48
			}
		default:
			goto st48
		}
		goto st0
	st48:
		if p++; p == pe {
			goto _test_eof48
		}
	st_case_48:
		switch {
		case data[p] < 65:
			if 48 <= data[p] && data[p] <= 57 {
				goto st3
			}
		case data[p] > 70:
			if 97 <= data[p] && data[p] <= 102 {
				goto st3
			}
		default:
			goto st3
		}
		goto st0
	tr105:
//line lex.rl:33
		{
			r, size := utf8.DecodeRune(data[p-2:])
			if size != 2 {
				return p - 2, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st49
	tr113:
//line lex.rl:39
		{
			r, size := utf8.DecodeRune(data[p-3:])
			if size != 3 {
				return p - 3, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st49
	tr122:
//line lex.rl:45
		{
			r, size := utf8.DecodeRune(data[p-4:])
			if size != 4 {
				return p - 4, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st49
	st49:
		if p++; p == pe {
			goto _test_eof49
		}
	st_case_49:
//line lex.go:4812
		if 128 <= data[p] && data[p] <= 191 {
			goto st50
		}
		goto st0
	st50:
		if p++; p == pe {
			goto _test_eof50
		}
	st_case_50:
//line lex.rl:59
		send = p
//line lex.go:4824
		switch data[p] {
		case 34:
			goto tr103
		case 92:
			goto tr104
		}
		switch {
		case data[p] < 224:
			switch {
			case data[p] > 191:
				if 192 <= data[p] && data[p] <= 223 {
					goto tr105
				}
			case data[p] >= 128:
				goto st0
			}
		case data[p] > 239:
			switch {
			case data[p] > 247:
				if 248 <= data[p] {
					goto st0
				}
			case data[p] >= 240:
				goto tr107
			}
		default:
			goto tr106
		}
		goto tr102
	tr106:
//line lex.rl:33
		{
			r, size := utf8.DecodeRune(data[p-2:])
			if size != 2 {
				return p - 2, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st51
	tr114:
//line lex.rl:39
		{
			r, size := utf8.DecodeRune(data[p-3:])
			if size != 3 {
				return p - 3, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st51
	tr123:
//line lex.rl:45
		{
			r, size := utf8.DecodeRune(data[p-4:])
			if size != 4 {
				return p - 4, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st51
	st51:
		if p++; p == pe {
			goto _test_eof51
		}
	st_case_51:
//line lex.go:4886
		if 128 <= data[p] && data[p] <= 191 {
			goto st52
		}
		goto st0
	st52:
		if p++; p == pe {
			goto _test_eof52
		}
	st_case_52:
		if 128 <= data[p] && data[p] <= 191 {
			goto st53
		}
		goto st0
	st53:
		if p++; p == pe {
			goto _test_eof53
		}
	st_case_53:
//line lex.rl:59
		send = p
//line lex.go:4907
		switch data[p] {
		case 34:
			goto tr111
		case 92:
			goto tr112
		}
		switch {
		case data[p] < 224:
			switch {
			case data[p] > 191:
				if 192 <= data[p] && data[p] <= 223 {
					goto tr113
				}
			case data[p] >= 128:
				goto st0
			}
		case data[p] > 239:
			switch {
			case data[p] > 247:
				if 248 <= data[p] {
					goto st0
				}
			case data[p] >= 240:
				goto tr115
			}
		default:
			goto tr114
		}
		goto tr110
	tr107:
//line lex.rl:33
		{
			r, size := utf8.DecodeRune(data[p-2:])
			if size != 2 {
				return p - 2, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st54
	tr115:
//line lex.rl:39
		{
			r, size := utf8.DecodeRune(data[p-3:])
			if size != 3 {
				return p - 3, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st54
	tr124:
//line lex.rl:45
		{
			r, size := utf8.DecodeRune(data[p-4:])
			if size != 4 {
				return p - 4, fmt.Errorf("bad rune %x", r)
			}
		}
		goto st54
	st54:
		if p++; p == pe {
			goto _test_eof54
		}
	st_case_54:
//line lex.go:4969
		if 128 <= data[p] && data[p] <= 191 {
			goto st55
		}
		goto st0
	st55:
		if p++; p == pe {
			goto _test_eof55
		}
	st_case_55:
		if 128 <= data[p] && data[p] <= 191 {
			goto st56
		}
		goto st0
	st56:
		if p++; p == pe {
			goto _test_eof56
		}
	st_case_56:
		if 128 <= data[p] && data[p] <= 191 {
			goto st57
		}
		goto st0
	st57:
		if p++; p == pe {
			goto _test_eof57
		}
	st_case_57:
//line lex.rl:59
		send = p
//line lex.go:4999
		switch data[p] {
		case 34:
			goto tr120
		case 92:
			goto tr121
		}
		switch {
		case data[p] < 224:
			switch {
			case data[p] > 191:
				if 192 <= data[p] && data[p] <= 223 {
					goto tr122
				}
			case data[p] >= 128:
				goto st0
			}
		case data[p] > 239:
			switch {
			case data[p] > 247:
				if 248 <= data[p] {
					goto st0
				}
			case data[p] >= 240:
				goto tr124
			}
		default:
			goto tr123
		}
		goto tr119
	tr3:
//line lex.rl:84
		neg = true
//line lex.rl:62
		neg = false
//line lex.rl:62
		neg = true
		goto st58
	st58:
		if p++; p == pe {
			goto _test_eof58
		}
	st_case_58:
//line lex.go:5042
		if 48 <= data[p] && data[p] <= 57 {
			goto tr125
		}
		goto st0
	tr4:
//line lex.rl:61
		curi *= 10
		curi += uint64(data[p] - '0')
//line lex.rl:62
		neg = false
		goto st59
	tr125:
//line lex.rl:61
		curi *= 10
		curi += uint64(data[p] - '0')
		goto st59
	st59:
		if p++; p == pe {
			goto _test_eof59
		}
	st_case_59:
//line lex.go:5062
		switch data[p] {
		case 32:
			goto tr126
		case 44:
			goto tr64
		case 46:
			goto st60
		case 93:
			goto tr66
		}
		switch {
		case data[p] > 13:
			if 48 <= data[p] && data[p] <= 57 {
				goto tr125
			}
		case data[p] >= 9:
			goto tr126
		}
		goto st0
	tr129:
//line lex.rl:72
		curi *= 10
		curi += uint64(data[p] - '0')
		dc--
		goto st60
	st60:
		if p++; p == pe {
			goto _test_eof60
		}
	st_case_60:
//line lex.go:5091
		switch data[p] {
		case 32:
			goto tr128
		case 44:
			goto tr68
		case 69:
			goto st61
		case 93:
			goto tr71
		case 101:
			goto st61
		}
		switch {
		case data[p] > 13:
			if 48 <= data[p] && data[p] <= 57 {
				goto tr129
			}
		case data[p] >= 9:
			goto tr128
		}
		goto st0
	st61:
		if p++; p == pe {
			goto _test_eof61
		}
	st_case_61:
		switch data[p] {
		case 32:
			goto tr131
		case 43:
			goto st62
		case 44:
			goto tr74
		case 45:
			goto tr133
		case 93:
			goto tr77
		}
		switch {
		case data[p] > 13:
			if 48 <= data[p] && data[p] <= 57 {
				goto tr134
			}
		case data[p] >= 9:
			goto tr131
		}
		goto st0
	tr133:
//line lex.rl:74
		nege = true
		goto st62
	tr134:
//line lex.rl:74
		cure *= 10
		cure += int(data[p]) - '0'
		goto st62
	st62:
		if p++; p == pe {
			goto _test_eof62
		}
	st_case_62:
//line lex.go:5152
		switch data[p] {
		case 32:
			goto tr131
		case 44:
			goto tr74
		case 93:
			goto tr77
		}
		switch {
		case data[p] > 13:
			if 48 <= data[p] && data[p] <= 57 {
				goto tr134
			}
		case data[p] >= 9:
			goto tr131
		}
		goto st0
	st63:
		if p++; p == pe {
			goto _test_eof63
		}
	st_case_63:
		if data[p] == 97 {
			goto st64
		}
		goto st0
	st64:
		if p++; p == pe {
			goto _test_eof64
		}
	st_case_64:
		if data[p] == 108 {
			goto st65
		}
		goto st0
	st65:
		if p++; p == pe {
			goto _test_eof65
		}
	st_case_65:
		if data[p] == 115 {
			goto st66
		}
		goto st0
	st66:
		if p++; p == pe {
			goto _test_eof66
		}
	st_case_66:
		if data[p] == 101 {
			goto st67
		}
		goto st0
	st67:
		if p++; p == pe {
			goto _test_eof67
		}
	st_case_67:
		switch data[p] {
		case 32:
			goto tr139
		case 44:
			goto tr83
		case 93:
			goto tr84
		}
		if 9 <= data[p] && data[p] <= 13 {
			goto tr139
		}
		goto st0
	st68:
		if p++; p == pe {
			goto _test_eof68
		}
	st_case_68:
		if data[p] == 117 {
			goto st69
		}
		goto st0
	st69:
		if p++; p == pe {
			goto _test_eof69
		}
	st_case_69:
		if data[p] == 108 {
			goto st70
		}
		goto st0
	st70:
		if p++; p == pe {
			goto _test_eof70
		}
	st_case_70:
		if data[p] == 108 {
			goto st71
		}
		goto st0
	st71:
		if p++; p == pe {
			goto _test_eof71
		}
	st_case_71:
		switch data[p] {
		case 32:
			goto tr143
		case 44:
			goto tr89
		case 93:
			goto tr90
		}
		if 9 <= data[p] && data[p] <= 13 {
			goto tr143
		}
		goto st0
	st72:
		if p++; p == pe {
			goto _test_eof72
		}
	st_case_72:
		if data[p] == 114 {
			goto st73
		}
		goto st0
	st73:
		if p++; p == pe {
			goto _test_eof73
		}
	st_case_73:
		if data[p] == 117 {
			goto st74
		}
		goto st0
	st74:
		if p++; p == pe {
			goto _test_eof74
		}
	st_case_74:
		if data[p] == 101 {
			goto st75
		}
		goto st0
	st75:
		if p++; p == pe {
			goto _test_eof75
		}
	st_case_75:
		switch data[p] {
		case 32:
			goto tr147
		case 44:
			goto tr95
		case 93:
			goto tr96
		}
		if 9 <= data[p] && data[p] <= 13 {
			goto tr147
		}
		goto st0
	st_out:
	_test_eof1:
		cs = 1
		goto _test_eof
	_test_eof2:
		cs = 2
		goto _test_eof
	_test_eof3:
		cs = 3
		goto _test_eof
	_test_eof4:
		cs = 4
		goto _test_eof
	_test_eof5:
		cs = 5
		goto _test_eof
	_test_eof6:
		cs = 6
		goto _test_eof
	_test_eof7:
		cs = 7
		goto _test_eof
	_test_eof8:
		cs = 8
		goto _test_eof
	_test_eof9:
		cs = 9
		goto _test_eof
	_test_eof10:
		cs = 10
		goto _test_eof
	_test_eof76:
		cs = 76
		goto _test_eof
	_test_eof11:
		cs = 11
		goto _test_eof
	_test_eof12:
		cs = 12
		goto _test_eof
	_test_eof13:
		cs = 13
		goto _test_eof
	_test_eof14:
		cs = 14
		goto _test_eof
	_test_eof15:
		cs = 15
		goto _test_eof
	_test_eof16:
		cs = 16
		goto _test_eof
	_test_eof17:
		cs = 17
		goto _test_eof
	_test_eof18:
		cs = 18
		goto _test_eof
	_test_eof19:
		cs = 19
		goto _test_eof
	_test_eof20:
		cs = 20
		goto _test_eof
	_test_eof21:
		cs = 21
		goto _test_eof
	_test_eof22:
		cs = 22
		goto _test_eof
	_test_eof23:
		cs = 23
		goto _test_eof
	_test_eof24:
		cs = 24
		goto _test_eof
	_test_eof25:
		cs = 25
		goto _test_eof
	_test_eof26:
		cs = 26
		goto _test_eof
	_test_eof27:
		cs = 27
		goto _test_eof
	_test_eof28:
		cs = 28
		goto _test_eof
	_test_eof29:
		cs = 29
		goto _test_eof
	_test_eof30:
		cs = 30
		goto _test_eof
	_test_eof31:
		cs = 31
		goto _test_eof
	_test_eof32:
		cs = 32
		goto _test_eof
	_test_eof33:
		cs = 33
		goto _test_eof
	_test_eof34:
		cs = 34
		goto _test_eof
	_test_eof35:
		cs = 35
		goto _test_eof
	_test_eof36:
		cs = 36
		goto _test_eof
	_test_eof37:
		cs = 37
		goto _test_eof
	_test_eof38:
		cs = 38
		goto _test_eof
	_test_eof39:
		cs = 39
		goto _test_eof
	_test_eof40:
		cs = 40
		goto _test_eof
	_test_eof41:
		cs = 41
		goto _test_eof
	_test_eof42:
		cs = 42
		goto _test_eof
	_test_eof43:
		cs = 43
		goto _test_eof
	_test_eof44:
		cs = 44
		goto _test_eof
	_test_eof45:
		cs = 45
		goto _test_eof
	_test_eof46:
		cs = 46
		goto _test_eof
	_test_eof47:
		cs = 47
		goto _test_eof
	_test_eof48:
		cs = 48
		goto _test_eof
	_test_eof49:
		cs = 49
		goto _test_eof
	_test_eof50:
		cs = 50
		goto _test_eof
	_test_eof51:
		cs = 51
		goto _test_eof
	_test_eof52:
		cs = 52
		goto _test_eof
	_test_eof53:
		cs = 53
		goto _test_eof
	_test_eof54:
		cs = 54
		goto _test_eof
	_test_eof55:
		cs = 55
		goto _test_eof
	_test_eof56:
		cs = 56
		goto _test_eof
	_test_eof57:
		cs = 57
		goto _test_eof
	_test_eof58:
		cs = 58
		goto _test_eof
	_test_eof59:
		cs = 59
		goto _test_eof
	_test_eof60:
		cs = 60
		goto _test_eof
	_test_eof61:
		cs = 61
		goto _test_eof
	_test_eof62:
		cs = 62
		goto _test_eof
	_test_eof63:
		cs = 63
		goto _test_eof
	_test_eof64:
		cs = 64
		goto _test_eof
	_test_eof65:
		cs = 65
		goto _test_eof
	_test_eof66:
		cs = 66
		goto _test_eof
	_test_eof67:
		cs = 67
		goto _test_eof
	_test_eof68:
		cs = 68
		goto _test_eof
	_test_eof69:
		cs = 69
		goto _test_eof
	_test_eof70:
		cs = 70
		goto _test_eof
	_test_eof71:
		cs = 71
		goto _test_eof
	_test_eof72:
		cs = 72
		goto _test_eof
	_test_eof73:
		cs = 73
		goto _test_eof
	_test_eof74:
		cs = 74
		goto _test_eof
	_test_eof75:
		cs = 75
		goto _test_eof

	_test_eof:
		{
		}
	_out:
		{
		}
	}

//line lex.rl:191

	return p, ErrNoMatch
}
