// Code generated by goyacc partiql.y. DO NOT EDIT.

//line partiql.y:15
// Copyright (C) 2022 Sneller, Inc.
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

package partiql

import (
	__yyfmt__ "fmt"

	"github.com/SnellerInc/sneller/expr"
) //line partiql.y:29

//line partiql.y:36
type yySymType struct {
	yys      int
	bytes    []byte
	str      string
	yesno    bool
	integer  int
	exprint  *expr.Integer
	expr     expr.Node
	pc       expr.PathComponent
	order    expr.Order
	sel      *expr.Select
	wind     *expr.Window
	bind     expr.Binding
	jk       expr.JoinKind
	from     expr.From
	with     []expr.CTE
	bindings []expr.Binding
	limbs    []expr.CaseLimb
	values   []expr.Node
	orders   []expr.Order
}

const ERROR = 57346
const EOF = 57347
const UNION = 57348
const SELECT = 57349
const FROM = 57350
const WHERE = 57351
const GROUP = 57352
const ORDER = 57353
const BY = 57354
const HAVING = 57355
const LIMIT = 57356
const OFFSET = 57357
const WITH = 57358
const INTO = 57359
const DISTINCT = 57360
const ALL = 57361
const AS = 57362
const EXISTS = 57363
const NULLS = 57364
const FIRST = 57365
const LAST = 57366
const ASC = 57367
const DESC = 57368
const PARTITION = 57369
const VALUE = 57370
const COALESCE = 57371
const NULLIF = 57372
const EXTRACT = 57373
const DATE_TRUNC = 57374
const CAST = 57375
const UTCNOW = 57376
const DATE_ADD = 57377
const DATE_DIFF = 57378
const EARLIEST = 57379
const LATEST = 57380
const JOIN = 57381
const LEFT = 57382
const RIGHT = 57383
const CROSS = 57384
const INNER = 57385
const OUTER = 57386
const FULL = 57387
const ON = 57388
const AGGREGATE = 57389
const ID = 57390
const NULL = 57391
const TRUE = 57392
const FALSE = 57393
const MISSING = 57394
const OR = 57395
const AND = 57396
const NOT = 57397
const BETWEEN = 57398
const CASE = 57399
const WHEN = 57400
const THEN = 57401
const ELSE = 57402
const END = 57403
const EQ = 57404
const NE = 57405
const LT = 57406
const LE = 57407
const GT = 57408
const GE = 57409
const ILIKE = 57410
const LIKE = 57411
const IN = 57412
const IS = 57413
const OVER = 57414
const FILTER = 57415
const SHIFT_LEFT_LOGICAL = 57416
const SHIFT_RIGHT_ARITHMETIC = 57417
const SHIFT_RIGHT_LOGICAL = 57418
const CONCAT = 57419
const APPEND = 57420
const NEGATION_PRECEDENCE = 57421
const NUMBER = 57422
const ION = 57423
const STRING = 57424

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"ERROR",
	"EOF",
	"UNION",
	"SELECT",
	"FROM",
	"WHERE",
	"GROUP",
	"ORDER",
	"BY",
	"HAVING",
	"LIMIT",
	"OFFSET",
	"WITH",
	"INTO",
	"DISTINCT",
	"ALL",
	"AS",
	"EXISTS",
	"NULLS",
	"FIRST",
	"LAST",
	"ASC",
	"DESC",
	"PARTITION",
	"VALUE",
	"COALESCE",
	"NULLIF",
	"EXTRACT",
	"DATE_TRUNC",
	"CAST",
	"UTCNOW",
	"DATE_ADD",
	"DATE_DIFF",
	"EARLIEST",
	"LATEST",
	"JOIN",
	"LEFT",
	"RIGHT",
	"CROSS",
	"INNER",
	"OUTER",
	"FULL",
	"ON",
	"AGGREGATE",
	"ID",
	"'('",
	"','",
	"')'",
	"'['",
	"']'",
	"'{'",
	"'}'",
	"NULL",
	"TRUE",
	"FALSE",
	"MISSING",
	"OR",
	"AND",
	"'!'",
	"'~'",
	"NOT",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"EQ",
	"NE",
	"LT",
	"LE",
	"GT",
	"GE",
	"ILIKE",
	"LIKE",
	"IN",
	"IS",
	"OVER",
	"FILTER",
	"'|'",
	"'^'",
	"'&'",
	"SHIFT_LEFT_LOGICAL",
	"SHIFT_RIGHT_ARITHMETIC",
	"SHIFT_RIGHT_LOGICAL",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"CONCAT",
	"APPEND",
	"NEGATION_PRECEDENCE",
	"'.'",
	"NUMBER",
	"ION",
	"STRING",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 288,
	60, 61,
	61, 61,
	64, 61,
	65, 61,
	71, 61,
	72, 61,
	73, 61,
	74, 61,
	75, 61,
	76, 61,
	-2, 105,
}

const yyPrivate = 57344

const yyLast = 1520

var yyAct = [...]int{
	15, 282, 286, 262, 162, 273, 214, 244, 149, 251,
	13, 172, 230, 105, 89, 17, 187, 127, 14, 126,
	164, 100, 63, 64, 9, 60, 61, 62, 63, 64,
	28, 94, 95, 96, 98, 7, 101, 11, 58, 59,
	60, 61, 62, 63, 64, 92, 50, 163, 231, 252,
	135, 10, 194, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 123, 124, 125, 108, 104, 128, 129,
	130, 131, 132, 133, 80, 90, 136, 137, 92, 110,
	111, 148, 150, 152, 153, 8, 35, 209, 186, 134,
	91, 150, 208, 39, 37, 38, 40, 164, 146, 160,
	147, 263, 167, 143, 110, 166, 138, 141, 142, 140,
	306, 199, 227, 150, 139, 165, 188, 190, 191, 189,
	256, 185, 161, 91, 144, 170, 183, 169, 199, 206,
	199, 198, 226, 107, 184, 36, 42, 41, 213, 210,
	199, 236, 193, 171, 192, 168, 158, 195, 196, 65,
	66, 51, 77, 293, 47, 52, 53, 54, 55, 57,
	56, 58, 59, 60, 61, 62, 63, 64, 211, 204,
	203, 249, 202, 6, 216, 47, 207, 268, 253, 112,
	212, 53, 54, 55, 57, 56, 58, 59, 60, 61,
	62, 63, 64, 217, 218, 103, 93, 88, 233, 87,
	234, 235, 228, 237, 238, 239, 240, 55, 57, 56,
	58, 59, 60, 61, 62, 63, 64, 110, 48, 86,
	85, 84, 83, 241, 242, 82, 243, 81, 178, 180,
	181, 177, 179, 254, 182, 78, 45, 43, 8, 176,
	157, 156, 250, 155, 154, 247, 264, 223, 266, 221,
	248, 47, 224, 225, 222, 261, 220, 265, 270, 271,
	267, 219, 277, 304, 305, 301, 44, 12, 272, 10,
	278, 4, 283, 274, 245, 289, 287, 288, 275, 284,
	281, 102, 246, 263, 269, 291, 109, 215, 292, 173,
	150, 205, 107, 102, 287, 29, 299, 298, 297, 5,
	303, 302, 174, 20, 21, 26, 25, 22, 27, 23,
	24, 79, 175, 285, 97, 106, 300, 294, 3, 2,
	99, 18, 8, 35, 145, 46, 33, 34, 1, 0,
	39, 37, 38, 40, 0, 0, 0, 32, 31, 0,
	19, 54, 55, 57, 56, 58, 59, 60, 61, 62,
	63, 64, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 30, 151, 0, 29, 0, 0,
	0, 0, 36, 42, 41, 20, 21, 26, 25, 22,
	27, 23, 24, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 18, 8, 35, 0, 159, 33, 0,
	0, 0, 39, 37, 38, 40, 0, 0, 0, 32,
	31, 0, 19, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 30, 151, 0, 29,
	0, 0, 0, 0, 36, 42, 41, 20, 21, 26,
	25, 22, 27, 23, 24, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 18, 8, 35, 0, 0,
	33, 0, 0, 0, 39, 37, 38, 40, 0, 0,
	0, 32, 31, 0, 19, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 30, 151,
	0, 29, 0, 0, 0, 0, 36, 42, 41, 20,
	21, 26, 25, 22, 27, 23, 24, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 18, 8, 35,
	0, 0, 33, 0, 0, 0, 39, 37, 38, 40,
	0, 0, 0, 32, 31, 0, 19, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 102,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	30, 16, 0, 29, 0, 0, 0, 0, 36, 42,
	41, 20, 21, 26, 25, 22, 27, 23, 24, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 18,
	8, 35, 0, 0, 33, 0, 0, 0, 39, 37,
	38, 40, 0, 0, 0, 32, 31, 0, 19, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 30, 0, 0, 29, 0, 0, 0, 0,
	36, 42, 41, 20, 21, 26, 25, 22, 27, 23,
	24, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 18, 8, 35, 0, 0, 33, 0, 0, 0,
	39, 37, 38, 40, 0, 0, 0, 32, 31, 0,
	19, 295, 296, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 30, 0, 0, 0, 0, 0,
	0, 0, 36, 42, 41, 0, 76, 75, 0, 0,
	74, 73, 0, 0, 49, 0, 0, 67, 68, 69,
	70, 71, 72, 65, 66, 51, 77, 0, 0, 52,
	53, 54, 55, 57, 56, 58, 59, 60, 61, 62,
	63, 64, 8, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 76, 75, 0, 0, 74, 73,
	0, 0, 0, 0, 0, 67, 68, 69, 70, 71,
	72, 65, 66, 51, 77, 0, 0, 52, 53, 54,
	55, 57, 56, 58, 59, 60, 61, 62, 63, 64,
	290, 0, 0, 0, 0, 0, 0, 0, 0, 76,
	75, 0, 0, 74, 73, 0, 0, 0, 0, 0,
	67, 68, 69, 70, 71, 72, 65, 66, 51, 77,
	0, 0, 52, 53, 54, 55, 57, 56, 58, 59,
	60, 61, 62, 63, 64, 280, 0, 0, 0, 0,
	0, 0, 0, 0, 76, 75, 0, 0, 74, 73,
	0, 0, 0, 0, 0, 67, 68, 69, 70, 71,
	72, 65, 66, 51, 77, 0, 0, 52, 53, 54,
	55, 57, 56, 58, 59, 60, 61, 62, 63, 64,
	279, 0, 0, 0, 0, 0, 0, 0, 0, 76,
	75, 0, 0, 74, 73, 0, 0, 0, 0, 0,
	67, 68, 69, 70, 71, 72, 65, 66, 51, 77,
	0, 0, 52, 53, 54, 55, 57, 56, 58, 59,
	60, 61, 62, 63, 64, 260, 0, 0, 0, 0,
	0, 0, 0, 0, 76, 75, 0, 0, 74, 73,
	0, 0, 0, 0, 0, 67, 68, 69, 70, 71,
	72, 65, 66, 51, 77, 0, 0, 52, 53, 54,
	55, 57, 56, 58, 59, 60, 61, 62, 63, 64,
	259, 0, 0, 0, 0, 0, 0, 0, 0, 76,
	75, 0, 0, 74, 73, 0, 0, 0, 0, 0,
	67, 68, 69, 70, 71, 72, 65, 66, 51, 77,
	0, 0, 52, 53, 54, 55, 57, 56, 58, 59,
	60, 61, 62, 63, 64, 258, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 76, 75, 0, 0, 74,
	73, 0, 0, 0, 0, 0, 67, 68, 69, 70,
	71, 72, 65, 66, 51, 77, 0, 0, 52, 53,
	54, 55, 57, 56, 58, 59, 60, 61, 62, 63,
	64, 257, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 76, 75, 0, 0, 74, 73, 0, 0, 0,
	0, 0, 67, 68, 69, 70, 71, 72, 65, 66,
	51, 77, 0, 0, 52, 53, 54, 55, 57, 56,
	58, 59, 60, 61, 62, 63, 64, 255, 0, 0,
	0, 0, 0, 0, 0, 0, 76, 75, 0, 0,
	74, 73, 0, 0, 0, 0, 0, 67, 68, 69,
	70, 71, 72, 65, 66, 51, 77, 0, 0, 52,
	53, 54, 55, 57, 56, 58, 59, 60, 61, 62,
	63, 64, 76, 75, 0, 0, 74, 73, 0, 0,
	232, 0, 0, 67, 68, 69, 70, 71, 72, 65,
	66, 51, 77, 0, 0, 52, 53, 54, 55, 57,
	56, 58, 59, 60, 61, 62, 63, 64, 229, 0,
	0, 0, 0, 201, 0, 0, 0, 76, 75, 0,
	0, 74, 73, 0, 0, 0, 0, 0, 67, 68,
	69, 70, 71, 72, 65, 66, 51, 77, 0, 0,
	52, 53, 54, 55, 57, 56, 58, 59, 60, 61,
	62, 63, 64, 76, 75, 0, 0, 74, 73, 0,
	0, 0, 0, 0, 67, 68, 69, 70, 71, 72,
	65, 66, 51, 77, 0, 0, 52, 53, 54, 55,
	57, 56, 58, 59, 60, 61, 62, 63, 64, 200,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 76,
	75, 0, 0, 74, 73, 0, 0, 0, 0, 0,
	67, 68, 69, 70, 71, 72, 65, 66, 51, 77,
	0, 0, 52, 53, 54, 55, 57, 56, 58, 59,
	60, 61, 62, 63, 64, 76, 75, 0, 0, 74,
	73, 0, 0, 197, 0, 0, 67, 68, 69, 70,
	71, 72, 65, 66, 51, 77, 0, 0, 52, 53,
	54, 55, 57, 56, 58, 59, 60, 61, 62, 63,
	64, 76, 75, 0, 0, 74, 73, 0, 0, 0,
	0, 0, 276, 68, 69, 70, 71, 72, 65, 66,
	51, 77, 0, 0, 52, 53, 54, 55, 57, 56,
	58, 59, 60, 61, 62, 63, 64, 76, 75, 0,
	0, 74, 73, 0, 0, 0, 0, 0, 67, 68,
	69, 70, 71, 72, 65, 66, 51, 77, 0, 0,
	52, 53, 54, 55, 57, 56, 58, 59, 60, 61,
	62, 63, 64, 75, 0, 0, 74, 73, 0, 0,
	0, 0, 0, 67, 68, 69, 70, 71, 72, 65,
	66, 51, 77, 0, 0, 52, 53, 54, 55, 57,
	56, 58, 59, 60, 61, 62, 63, 64, 74, 73,
	0, 0, 0, 0, 0, 67, 68, 69, 70, 71,
	72, 65, 66, 51, 77, 0, 0, 52, 53, 54,
	55, 57, 56, 58, 59, 60, 61, 62, 63, 64,
}

var yyPact = [...]int{
	255, -1000, 292, 123, 190, 251, 190, 247, -1000, 490,
	-1000, 246, 187, 201, -1000, 724, -1000, -1000, 186, 7,
	178, 176, 173, 172, 171, 170, 150, 148, 26, 147,
	634, 634, 634, 634, -1000, 562, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 146, 286, 284, 490, 190, 190,
	-1000, 130, 634, 634, 634, 634, 634, 634, 634, 634,
	634, 634, 634, 634, 634, -81, -83, 634, 634, 634,
	634, 634, 634, 37, -28, 634, 634, 50, 33, 31,
	634, 418, 634, 634, 196, 195, 193, 192, 95, -1000,
	346, 190, -1, 286, -1000, 1424, 1424, 52, 1357, 94,
	-1000, 1357, 251, 286, 92, 280, 189, 490, -1000, -1000,
	-7, -1000, 274, 97, 256, 121, -51, -51, -51, -66,
	-66, -72, -72, -72, -1000, -1000, -1000, -1000, 72, 72,
	72, 72, 72, 72, 27, -84, 1424, 1392, -1000, 60,
	-1000, -1000, -1000, 634, 91, -18, 634, 634, 1285, 80,
	1357, -1000, 1249, 1203, 122, 120, 119, 283, -1000, -1000,
	78, -7, 39, 34, -1000, 88, -1000, 634, -1000, 490,
	87, -1000, 277, 634, 490, 490, -1000, 222, -1000, 217,
	210, 208, 214, -1000, 81, 61, 37, -1000, -1000, -1000,
	-1000, -1000, 1167, -34, -1000, 1122, 1357, 634, -1000, 634,
	634, 93, 634, 634, 634, 634, -1000, -1000, -7, -7,
	-1000, 1357, 125, -1000, 261, 270, 1357, -1000, 199, -1000,
	-1000, -1000, 211, -1000, 132, -1000, -1000, -1000, -1000, -34,
	-32, 129, 634, 1357, 1357, 1086, 69, 1041, 995, 949,
	904, -1000, -1000, 280, 272, 634, 490, 634, -1000, -1000,
	-32, -1000, 128, 275, 1357, -1000, -1000, 634, 634, -1000,
	-1000, 277, 259, 266, 1357, 104, 1321, -1000, 235, 634,
	859, 814, 261, 257, -78, 634, 634, 263, 769, -1000,
	-1000, 272, -1000, -78, -1000, 103, -1000, 676, 72, 418,
	-1000, 259, -1000, 634, 243, -1000, -1000, 90, 257, -1000,
	-1000, 240, 59, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]int{
	0, 328, 0, 327, 15, 237, 325, 11, 7, 324,
	320, 12, 319, 318, 14, 317, 316, 24, 30, 4,
	21, 6, 10, 18, 13, 315, 8, 314, 2, 3,
	313, 312, 5, 1, 311, 9, 302,
}

var yyR1 = [...]int{
	0, 1, 20, 6, 6, 12, 12, 13, 13, 23,
	23, 23, 23, 5, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 4, 10, 10, 17, 17, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 22, 22, 26, 26, 26, 27, 27, 27,
	35, 35, 31, 31, 31, 31, 31, 31, 31, 36,
	36, 24, 24, 25, 25, 25, 19, 14, 14, 14,
	14, 18, 9, 9, 34, 34, 11, 11, 7, 7,
	8, 8, 21, 21, 16, 16, 16, 15, 15, 15,
	28, 30, 30, 29, 29, 32, 32, 33, 33,
}

var yyR2 = [...]int{
	0, 12, 10, 2, 0, 1, 0, 6, 7, 3,
	2, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 1, 1, 0, 1, 7,
	6, 4, 4, 6, 6, 8, 8, 6, 6, 3,
	3, 4, 5, 5, 4, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 5, 4, 2,
	2, 3, 3, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 1, 3, 1, 1, 3, 1, 3, 0,
	7, 0, 1, 2, 2, 3, 2, 3, 2, 1,
	2, 1, 0, 2, 3, 7, 1, 0, 3, 4,
	4, 1, 0, 2, 4, 5, 0, 5, 0, 2,
	0, 2, 0, 3, 0, 2, 2, 0, 1, 1,
	3, 3, 1, 0, 3, 0, 2, 0, 2,
}

var yyChk = [...]int{
	-1000, -1, -12, -13, 16, 7, 50, -18, 48, -17,
	18, -18, 20, -22, -23, -2, 91, -4, 47, 66,
	29, 30, 33, 35, 36, 32, 31, 34, -18, 21,
	90, 64, 63, 52, -3, 49, 98, 57, 58, 56,
	59, 100, 99, -5, 20, 49, -6, 50, 17, 20,
	-18, 79, 83, 84, 85, 86, 88, 87, 89, 90,
	91, 92, 93, 94, 95, 77, 78, 71, 72, 73,
	74, 75, 76, 65, 64, 61, 60, 80, 49, -34,
	67, 49, 49, 49, 49, 49, 49, 49, 49, -14,
	49, 97, 52, 49, -2, -2, -2, -27, -2, -10,
	-20, -2, 7, 49, -20, -24, -25, 8, -23, -5,
	-18, -18, 49, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, 100, 100, -2, -2,
	-2, -2, -2, -2, -4, 78, -2, -2, 56, 64,
	59, 57, 58, -17, 91, -9, 67, 69, -2, -26,
	-2, 91, -2, -2, 48, 48, 48, 48, 51, 51,
	-26, -18, -19, 48, 98, -20, 53, 50, 51, -17,
	-20, 51, -7, 9, -36, -31, 50, 42, 39, 43,
	40, 41, 45, -23, -20, -26, 61, 100, 56, 59,
	57, 58, -2, 51, 70, -2, -2, 68, 51, 50,
	50, 20, 50, 50, 50, 8, 51, -14, 53, 53,
	51, -2, -22, 51, -21, 10, -2, -23, -23, 39,
	39, 39, 44, 39, 44, 39, 51, 51, -4, 51,
	-11, 82, 68, -2, -2, -2, 48, -2, -2, -2,
	-2, -14, -14, -24, -8, 13, 12, 46, 39, 39,
	-11, -35, 81, 49, -2, 51, 51, 50, 50, 51,
	51, -7, -29, 11, -2, -22, -2, -35, 49, 9,
	-2, -2, -21, -32, 14, 12, 71, 27, -2, 51,
	51, -8, -33, 15, -19, -30, -28, -2, -2, 12,
	51, -29, -19, 50, -15, 25, 26, -26, -32, -28,
	-16, 22, -29, -33, 23, 24, 51,
}

var yyDef = [...]int{
	6, -2, 0, 5, 0, 27, 0, 0, 111, 0,
	26, 0, 0, 4, 82, 11, 12, 28, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 107, 0,
	0, 0, 0, 89, 22, 0, 14, 15, 16, 17,
	18, 19, 20, 21, 0, 0, 102, 0, 0, 0,
	10, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 27, 112,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 13,
	0, 0, 0, 0, 58, 69, 70, 0, 87, 0,
	24, 25, 27, 0, 0, 118, 101, 0, 83, 3,
	107, 9, 0, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 59, 60, 61, 62,
	63, 64, 65, 66, 0, 0, 71, 72, 73, 0,
	75, 77, 79, 0, 0, 0, 0, 0, 0, 0,
	84, 85, 0, 0, 0, 0, 0, 0, 39, 40,
	0, 107, 0, 0, 106, 0, 81, 0, 23, 0,
	0, 7, 122, 0, 0, 0, 99, 0, 92, 0,
	0, 0, 0, 103, 0, 0, 0, 68, 74, 76,
	78, 80, 0, 116, 31, 0, 113, 0, 32, 0,
	0, 0, 0, 0, 0, 0, 41, 108, 107, 107,
	44, 88, 102, 8, 120, 0, 119, 104, 0, 100,
	93, 94, 0, 96, 0, 98, 42, 43, 67, 116,
	91, 0, 0, 114, 86, 0, 0, 0, 0, 0,
	0, 109, 110, 118, 133, 0, 0, 0, 95, 97,
	91, 30, 0, 0, 115, 33, 34, 0, 0, 37,
	38, 122, 135, 0, 121, 123, 0, 29, 0, 0,
	0, 0, 120, 137, 0, 0, 0, 0, 0, 35,
	36, 133, 1, 0, 136, 134, 132, 127, -2, 0,
	117, 135, 138, 0, 124, 128, 129, 133, 137, 131,
	130, 0, 0, 2, 125, 126, 90,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 62, 3, 3, 3, 93, 85, 3,
	49, 51, 91, 89, 50, 90, 97, 92, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 52, 3, 53, 84, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 54, 83, 55, 63,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 56, 57, 58,
	59, 60, 61, 64, 65, 66, 67, 68, 69, 70,
	71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
	81, 82, 86, 87, 88, 94, 95, 96, 98, 99,
	100,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-12 : yypt+1]
//line partiql.y:118
		{
			yylex.(*scanner).with = yyDollar[1].with
			yylex.(*scanner).into = yyDollar[5].expr
			yylex.(*scanner).result = &expr.Select{Distinct: yyDollar[3].yesno, Columns: yyDollar[4].bindings, From: yyDollar[6].from, Where: yyDollar[7].expr, GroupBy: yyDollar[8].bindings, Having: yyDollar[9].expr, OrderBy: yyDollar[10].orders, Limit: yyDollar[11].exprint, Offset: yyDollar[12].exprint}
		}
	case 2:
		yyDollar = yyS[yypt-10 : yypt+1]
//line partiql.y:126
		{
			yyVAL.sel = &expr.Select{Distinct: yyDollar[2].yesno, Columns: yyDollar[3].bindings, From: yyDollar[4].from, Where: yyDollar[5].expr, GroupBy: yyDollar[6].bindings, Having: yyDollar[7].expr, OrderBy: yyDollar[8].orders, Limit: yyDollar[9].exprint, Offset: yyDollar[10].exprint}
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:131
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 4:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:131
		{
			yyVAL.expr = nil
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:134
		{
			yyVAL.with = yyDollar[1].with
		}
	case 6:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:134
		{
			yyVAL.with = nil
		}
	case 7:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:137
		{
			yyVAL.with = []expr.CTE{{yyDollar[2].str, yyDollar[5].sel}}
		}
	case 8:
		yyDollar = yyS[yypt-7 : yypt+1]
//line partiql.y:138
		{
			yyVAL.with = append(yyDollar[1].with, expr.CTE{yyDollar[3].str, yyDollar[6].sel})
		}
	case 9:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:144
		{
			yyVAL.bind = expr.Bind(yyDollar[1].expr, yyDollar[3].str)
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:145
		{
			yyVAL.bind = expr.Bind(yyDollar[1].expr, yyDollar[2].str)
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:146
		{
			yyVAL.bind = expr.Bind(yyDollar[1].expr, "")
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:147
		{
			yyVAL.bind = expr.Bind(expr.Star{}, "")
		}
	case 13:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:150
		{
			yyVAL.expr = &expr.Path{First: yyDollar[1].str, Rest: yyDollar[2].pc}
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:154
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:155
		{
			yyVAL.expr = expr.Bool(true)
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:156
		{
			yyVAL.expr = expr.Bool(false)
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:157
		{
			yyVAL.expr = expr.Null{}
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:158
		{
			yyVAL.expr = expr.Missing{}
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:159
		{
			yyVAL.expr = expr.String(yyDollar[1].str)
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:160
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:161
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:173
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:174
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:177
		{
			yyVAL.expr = yyDollar[1].sel
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:178
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:181
		{
			yyVAL.yesno = true
		}
	case 27:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:181
		{
			yyVAL.yesno = false
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:186
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 29:
		yyDollar = yyS[yypt-7 : yypt+1]
//line partiql.y:190
		{
			yyVAL.expr = toAggregate(expr.AggregateOp(yyDollar[1].integer), yyDollar[4].expr, yyDollar[3].yesno, yyDollar[6].expr, yyDollar[7].wind)
		}
	case 30:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:194
		{
			distinct := false
			yyVAL.expr = toAggregate(expr.AggregateOp(yyDollar[1].integer), expr.Star{}, distinct, yyDollar[5].expr, yyDollar[6].wind)
		}
	case 31:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:199
		{
			yyVAL.expr = &expr.Case{Limbs: yyDollar[2].limbs, Else: yyDollar[3].expr}
		}
	case 32:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:203
		{
			yyVAL.expr = expr.Coalesce(yyDollar[3].values)
		}
	case 33:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:207
		{
			yyVAL.expr = expr.NullIf(yyDollar[3].expr, yyDollar[5].expr)
		}
	case 34:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:211
		{
			nod, ok := buildCast(yyDollar[3].expr, yyDollar[5].str)
			if !ok {
				yylex.Error(__yyfmt__.Sprintf("bad CAST type %q", yyDollar[5].str))
				return 1
			}
			yyVAL.expr = nod
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line partiql.y:220
		{
			part, ok := timePart(yyDollar[3].str)
			if !ok {
				yylex.Error(__yyfmt__.Sprintf("bad DATE_ADD part %q", yyDollar[3].str))
			}
			yyVAL.expr = expr.DateAdd(part, yyDollar[5].expr, yyDollar[7].expr)
		}
	case 36:
		yyDollar = yyS[yypt-8 : yypt+1]
//line partiql.y:228
		{
			part, ok := timePart(yyDollar[3].str)
			if !ok {
				yylex.Error(__yyfmt__.Sprintf("bad DATE_DIFF part %q", yyDollar[3].str))
			}
			yyVAL.expr = expr.DateDiff(part, yyDollar[5].expr, yyDollar[7].expr)
		}
	case 37:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:236
		{
			part, ok := timePart(yyDollar[3].str)
			if !ok {
				yylex.Error(__yyfmt__.Sprintf("bad DATE_TRUNC part %q", yyDollar[3].str))
			}
			yyVAL.expr = expr.DateTrunc(part, yyDollar[5].expr)
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:244
		{
			part, ok := timePart(yyDollar[3].str)
			if !ok {
				yylex.Error(__yyfmt__.Sprintf("bad EXTRACT part %q", yyDollar[3].str))
			}
			yyVAL.expr = expr.DateExtract(part, yyDollar[5].expr)
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:252
		{
			yyVAL.expr = yylex.(*scanner).utcnow()
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:256
		{
			op := expr.Call(yyDollar[1].str)
			if op.Private() {
				yylex.Error(__yyfmt__.Sprintf("cannot use reserved builtin %q", yyDollar[1].str))
			}
			yyVAL.expr = op
		}
	case 41:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:264
		{
			op := expr.Call(yyDollar[1].str, yyDollar[3].values...)
			if op.Private() {
				yylex.Error(__yyfmt__.Sprintf("cannot use reserved builtin %q", yyDollar[1].str))
			}
			yyVAL.expr = op
		}
	case 42:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:272
		{
			yyVAL.expr = expr.CallOp(expr.InSubquery, yyDollar[1].expr, yyDollar[4].sel)
		}
	case 43:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:276
		{
			yyVAL.expr = expr.In(yyDollar[1].expr, yyDollar[4].values...)
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:280
		{
			yyVAL.expr = exists(yyDollar[3].sel)
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:284
		{
			yyVAL.expr = expr.BitOr(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:288
		{
			yyVAL.expr = expr.BitXor(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:292
		{
			yyVAL.expr = expr.BitAnd(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:296
		{
			yyVAL.expr = expr.ShiftLeftLogical(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:300
		{
			yyVAL.expr = expr.ShiftRightLogical(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:304
		{
			yyVAL.expr = expr.ShiftRightArithmetic(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:308
		{
			yyVAL.expr = expr.Add(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:312
		{
			yyVAL.expr = expr.Sub(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:316
		{
			yyVAL.expr = expr.Mul(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:320
		{
			yyVAL.expr = expr.Div(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:324
		{
			yyVAL.expr = expr.Mod(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:328
		{
			yyVAL.expr = expr.Call("CONCAT", yyDollar[1].expr, yyDollar[3].expr)
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:332
		{
			yyVAL.expr = expr.Append(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:336
		{
			yyVAL.expr = expr.Neg(yyDollar[2].expr)
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:340
		{
			yyVAL.expr = expr.Compare(expr.Ilike, yyDollar[1].expr, expr.String(yyDollar[3].str))
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:344
		{
			yyVAL.expr = expr.Compare(expr.Like, yyDollar[1].expr, expr.String(yyDollar[3].str))
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:348
		{
			yyVAL.expr = expr.Compare(expr.Equals, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:352
		{
			yyVAL.expr = expr.Compare(expr.NotEquals, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:356
		{
			yyVAL.expr = expr.Compare(expr.Less, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:360
		{
			yyVAL.expr = expr.Compare(expr.LessEquals, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:364
		{
			yyVAL.expr = expr.Compare(expr.Greater, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:368
		{
			yyVAL.expr = expr.Compare(expr.GreaterEquals, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 67:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:372
		{
			yyVAL.expr = expr.Between(yyDollar[1].expr, yyDollar[3].expr, yyDollar[5].expr)
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:376
		{
			yyVAL.expr = &expr.Not{Expr: expr.Compare(expr.Like, yyDollar[1].expr, expr.String(yyDollar[4].str))}
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:380
		{
			yyVAL.expr = &expr.Not{Expr: yyDollar[2].expr}
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:384
		{
			yyVAL.expr = expr.BitNot(yyDollar[2].expr)
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:388
		{
			yyVAL.expr = expr.And(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:392
		{
			yyVAL.expr = expr.Or(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:396
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsNull, Expr: yyDollar[1].expr}
		}
	case 74:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:400
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsNotNull, Expr: yyDollar[1].expr}
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:404
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsMissing, Expr: yyDollar[1].expr}
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:408
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsNotMissing, Expr: yyDollar[1].expr}
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:412
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsTrue, Expr: yyDollar[1].expr}
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:416
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsNotTrue, Expr: yyDollar[1].expr}
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:420
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsFalse, Expr: yyDollar[1].expr}
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:424
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsNotFalse, Expr: yyDollar[1].expr}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:428
		{
			yyVAL.expr = expr.Call("MAKE_LIST", yyDollar[2].values...)
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:434
		{
			yyVAL.bindings = []expr.Binding{yyDollar[1].bind}
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:435
		{
			yyVAL.bindings = append(yyDollar[1].bindings, yyDollar[3].bind)
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:439
		{
			yyVAL.values = []expr.Node{yyDollar[1].expr}
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:440
		{
			yyVAL.values = []expr.Node{expr.Star{}}
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:441
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].expr)
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:445
		{
			yyVAL.values = []expr.Node{yyDollar[1].expr}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:446
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].expr)
		}
	case 89:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:447
		{
			yyVAL.values = nil
		}
	case 90:
		yyDollar = yyS[yypt-7 : yypt+1]
//line partiql.y:451
		{
			yyVAL.wind = &expr.Window{PartitionBy: yyDollar[5].values, OrderBy: yyDollar[6].orders}
		}
	case 91:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:454
		{
			yyVAL.wind = nil
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:457
		{
			yyVAL.jk = expr.InnerJoin
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:458
		{
			yyVAL.jk = expr.InnerJoin
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:459
		{
			yyVAL.jk = expr.LeftJoin
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:460
		{
			yyVAL.jk = expr.LeftJoin
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:461
		{
			yyVAL.jk = expr.RightJoin
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:462
		{
			yyVAL.jk = expr.RightJoin
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:463
		{
			yyVAL.jk = expr.FullJoin
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:468
		{
			yyVAL.from = yyDollar[1].from
		}
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:469
		{
			yyVAL.from = nil
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:476
		{
			yyVAL.from = &expr.Table{Binding: yyDollar[2].bind}
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:477
		{
			yyVAL.from = &expr.Join{Kind: expr.CrossJoin, Left: yyDollar[1].from, Right: yyDollar[3].bind}
		}
	case 105:
		yyDollar = yyS[yypt-7 : yypt+1]
//line partiql.y:479
		{
			yyVAL.from = &expr.Join{Kind: yyDollar[2].jk, Left: yyDollar[1].from, Right: yyDollar[3].bind, On: &expr.OnEquals{Left: yyDollar[5].expr, Right: yyDollar[7].expr}}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:482
		{
			var idxerr error
			yyVAL.integer, idxerr = toint(yyDollar[1].expr)
			if idxerr != nil {
				yylex.Error(idxerr.Error())
			}
		}
	case 107:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:485
		{
			yyVAL.pc = nil
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:486
		{
			yyVAL.pc = &expr.Dot{Field: yyDollar[2].str, Rest: yyDollar[3].pc}
		}
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:487
		{
			yyVAL.pc = &expr.LiteralIndex{Field: yyDollar[2].integer, Rest: yyDollar[4].pc}
		}
	case 110:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:488
		{
			yyVAL.pc = &expr.Dot{Field: yyDollar[2].str, Rest: yyDollar[4].pc}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:497
		{
			yyVAL.str = yyDollar[1].str
		}
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:500
		{
			yyVAL.expr = nil
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:501
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:504
		{
			yyVAL.limbs = []expr.CaseLimb{{When: yyDollar[2].expr, Then: yyDollar[4].expr}}
		}
	case 115:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:505
		{
			yyVAL.limbs = append(yyDollar[1].limbs, expr.CaseLimb{When: yyDollar[3].expr, Then: yyDollar[5].expr})
		}
	case 116:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:508
		{
			yyVAL.expr = nil
		}
	case 117:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:509
		{
			yyVAL.expr = yyDollar[4].expr
		}
	case 118:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:512
		{
			yyVAL.expr = nil
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:513
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 120:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:516
		{
			yyVAL.expr = nil
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:517
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 122:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:520
		{
			yyVAL.bindings = nil
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:521
		{
			yyVAL.bindings = yyDollar[3].bindings
		}
	case 124:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:525
		{
			yyVAL.yesno = false
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:526
		{
			yyVAL.yesno = false
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:527
		{
			yyVAL.yesno = true
		}
	case 127:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:531
		{
			yyVAL.yesno = false
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:532
		{
			yyVAL.yesno = false
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:533
		{
			yyVAL.yesno = true
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:537
		{
			yyVAL.order = expr.Order{Column: yyDollar[1].expr, Desc: yyDollar[2].yesno, NullsLast: yyDollar[3].yesno}
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:540
		{
			yyVAL.orders = append(yyDollar[1].orders, yyDollar[3].order)
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:541
		{
			yyVAL.orders = []expr.Order{yyDollar[1].order}
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:544
		{
			yyVAL.orders = nil
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:545
		{
			yyVAL.orders = yyDollar[3].orders
		}
	case 135:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:548
		{
			yyVAL.exprint = nil
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:549
		{
			n := expr.Integer(yyDollar[2].integer)
			yyVAL.exprint = &n
		}
	case 137:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:552
		{
			yyVAL.exprint = nil
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:553
		{
			n := expr.Integer(yyDollar[2].integer)
			yyVAL.exprint = &n
		}
	}
	goto yystack /* stack new state and value */
}
