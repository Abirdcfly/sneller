// Code generated by goyacc partiql.y. DO NOT EDIT.

//line partiql.y:15
// Copyright (C) 2022 Sneller, Inc.
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

package partiql

import (
	__yyfmt__ "fmt"

	"github.com/SnellerInc/sneller/expr"
) //line partiql.y:29

//line partiql.y:36
type yySymType struct {
	yys      int
	bytes    []byte
	str      string
	yesno    bool
	integer  int
	exprint  *expr.Integer
	expr     expr.Node
	pc       expr.PathComponent
	order    expr.Order
	sel      *expr.Select
	bind     expr.Binding
	jk       expr.JoinKind
	from     expr.From
	with     []expr.CTE
	bindings []expr.Binding
	limbs    []expr.CaseLimb
	values   []expr.Node
	orders   []expr.Order
}

const ERROR = 57346
const EOF = 57347
const UNION = 57348
const SELECT = 57349
const FROM = 57350
const WHERE = 57351
const GROUP = 57352
const ORDER = 57353
const BY = 57354
const HAVING = 57355
const LIMIT = 57356
const OFFSET = 57357
const WITH = 57358
const DISTINCT = 57359
const ALL = 57360
const AS = 57361
const EXISTS = 57362
const NULLS = 57363
const FIRST = 57364
const LAST = 57365
const ASC = 57366
const DESC = 57367
const VALUE = 57368
const COUNT = 57369
const MIN = 57370
const MAX = 57371
const SUM = 57372
const AVG = 57373
const COALESCE = 57374
const NULLIF = 57375
const EXTRACT = 57376
const DATE_TRUNC = 57377
const ABS = 57378
const SIGN = 57379
const ROUND = 57380
const ROUND_EVEN = 57381
const TRUNC = 57382
const FLOOR = 57383
const CEIL = 57384
const SQRT = 57385
const CAST = 57386
const UTCNOW = 57387
const DATE_ADD = 57388
const DATE_DIFF = 57389
const EARLIEST = 57390
const LATEST = 57391
const JOIN = 57392
const LEFT = 57393
const RIGHT = 57394
const CROSS = 57395
const INNER = 57396
const OUTER = 57397
const FULL = 57398
const ON = 57399
const ID = 57400
const NULL = 57401
const TRUE = 57402
const FALSE = 57403
const MISSING = 57404
const OR = 57405
const AND = 57406
const NOT = 57407
const BETWEEN = 57408
const CASE = 57409
const WHEN = 57410
const THEN = 57411
const ELSE = 57412
const END = 57413
const EQ = 57414
const NE = 57415
const LT = 57416
const LE = 57417
const GT = 57418
const GE = 57419
const ILIKE = 57420
const LIKE = 57421
const IN = 57422
const IS = 57423
const CONCAT = 57424
const NEGATION_PRECEDENCE = 57425
const NUMBER = 57426
const ION = 57427
const STRING = 57428

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"ERROR",
	"EOF",
	"UNION",
	"SELECT",
	"FROM",
	"WHERE",
	"GROUP",
	"ORDER",
	"BY",
	"HAVING",
	"LIMIT",
	"OFFSET",
	"WITH",
	"DISTINCT",
	"ALL",
	"AS",
	"EXISTS",
	"NULLS",
	"FIRST",
	"LAST",
	"ASC",
	"DESC",
	"VALUE",
	"COUNT",
	"MIN",
	"MAX",
	"SUM",
	"AVG",
	"COALESCE",
	"NULLIF",
	"EXTRACT",
	"DATE_TRUNC",
	"ABS",
	"SIGN",
	"ROUND",
	"ROUND_EVEN",
	"TRUNC",
	"FLOOR",
	"CEIL",
	"SQRT",
	"CAST",
	"UTCNOW",
	"DATE_ADD",
	"DATE_DIFF",
	"EARLIEST",
	"LATEST",
	"JOIN",
	"LEFT",
	"RIGHT",
	"CROSS",
	"INNER",
	"OUTER",
	"FULL",
	"ON",
	"ID",
	"'('",
	"','",
	"')'",
	"'['",
	"']'",
	"'{'",
	"'}'",
	"NULL",
	"TRUE",
	"FALSE",
	"MISSING",
	"OR",
	"AND",
	"'!'",
	"NOT",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"EQ",
	"NE",
	"LT",
	"LE",
	"GT",
	"GE",
	"ILIKE",
	"LIKE",
	"IN",
	"IS",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"CONCAT",
	"NEGATION_PRECEDENCE",
	"'.'",
	"NUMBER",
	"ION",
	"STRING",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 297,
	70, 65,
	71, 65,
	73, 65,
	74, 65,
	80, 65,
	81, 65,
	82, 65,
	83, 65,
	84, 65,
	85, 65,
	-2, 102,
}

const yyPrivate = 57344

const yyLast = 1735

var yyAct = [...]int16{
	16, 295, 14, 192, 18, 5, 180, 299, 109, 213,
	142, 141, 110, 194, 193, 112, 82, 81, 151, 80,
	79, 235, 112, 177, 100, 178, 73, 74, 75, 76,
	77, 78, 71, 72, 64, 83, 65, 66, 67, 68,
	69, 70, 212, 250, 249, 113, 114, 43, 117, 280,
	111, 258, 8, 116, 194, 12, 15, 111, 67, 68,
	69, 70, 251, 119, 63, 218, 135, 136, 137, 138,
	139, 140, 240, 259, 143, 144, 145, 146, 147, 148,
	240, 247, 152, 153, 149, 161, 162, 163, 164, 165,
	166, 167, 168, 169, 170, 171, 172, 173, 174, 175,
	197, 179, 181, 183, 184, 195, 303, 304, 240, 239,
	133, 181, 154, 157, 158, 156, 122, 190, 132, 155,
	189, 301, 200, 59, 196, 245, 244, 150, 214, 216,
	217, 215, 243, 7, 134, 181, 118, 61, 108, 107,
	210, 211, 71, 72, 64, 83, 65, 66, 67, 68,
	69, 70, 82, 81, 106, 80, 79, 62, 105, 191,
	104, 219, 73, 74, 75, 76, 77, 78, 71, 72,
	64, 83, 65, 66, 67, 68, 69, 70, 236, 237,
	201, 202, 127, 129, 130, 126, 128, 103, 131, 59,
	102, 266, 125, 101, 9, 47, 9, 307, 98, 97,
	248, 96, 51, 49, 50, 52, 95, 94, 82, 81,
	93, 80, 79, 92, 91, 90, 89, 260, 73, 74,
	75, 76, 77, 78, 71, 72, 64, 83, 65, 66,
	67, 68, 69, 70, 48, 54, 53, 88, 87, 263,
	86, 264, 265, 85, 267, 268, 269, 270, 84, 57,
	9, 188, 187, 186, 275, 185, 277, 276, 271, 272,
	150, 255, 207, 278, 205, 257, 256, 208, 209, 206,
	204, 203, 308, 309, 56, 13, 11, 4, 292, 286,
	253, 287, 289, 290, 6, 254, 274, 121, 296, 297,
	293, 199, 246, 6, 123, 99, 300, 291, 285, 124,
	294, 273, 296, 305, 19, 21, 22, 20, 23, 35,
	36, 41, 40, 26, 27, 28, 29, 30, 31, 32,
	33, 37, 42, 38, 39, 24, 25, 60, 58, 198,
	10, 306, 302, 3, 2, 9, 47, 115, 176, 252,
	120, 55, 46, 51, 49, 50, 52, 1, 0, 0,
	45, 0, 34, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 44, 182,
	160, 0, 0, 0, 0, 48, 54, 53, 0, 0,
	19, 21, 22, 20, 23, 35, 36, 41, 40, 26,
	27, 28, 29, 30, 31, 32, 33, 37, 42, 38,
	39, 24, 25, 0, 0, 0, 0, 0, 0, 0,
	0, 9, 47, 0, 0, 0, 0, 0, 0, 51,
	49, 50, 52, 0, 0, 0, 45, 0, 34, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 44, 159, 0, 0, 0, 0,
	0, 48, 54, 53, 19, 21, 22, 20, 23, 35,
	36, 41, 40, 26, 27, 28, 29, 30, 31, 32,
	33, 37, 42, 38, 39, 24, 25, 0, 0, 0,
	0, 0, 0, 0, 0, 9, 47, 0, 0, 0,
	0, 0, 0, 51, 49, 50, 52, 0, 0, 0,
	45, 0, 34, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 44, 17,
	0, 0, 0, 0, 0, 48, 54, 53, 19, 21,
	22, 20, 23, 35, 36, 41, 40, 26, 27, 28,
	29, 30, 31, 32, 33, 37, 42, 38, 39, 24,
	25, 0, 0, 0, 0, 0, 0, 0, 0, 9,
	47, 0, 0, 0, 0, 0, 0, 51, 49, 50,
	52, 0, 0, 0, 45, 0, 34, 0, 0, 0,
	0, 0, 6, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 44, 182, 0, 0, 0, 0, 0, 48,
	54, 53, 19, 21, 22, 20, 23, 35, 36, 41,
	40, 26, 27, 28, 29, 30, 31, 32, 33, 37,
	42, 38, 39, 24, 25, 0, 0, 0, 0, 0,
	0, 0, 0, 9, 47, 0, 0, 0, 0, 0,
	0, 51, 49, 50, 52, 0, 0, 0, 45, 0,
	34, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 44, 0, 0, 0,
	0, 0, 0, 48, 54, 53, 19, 21, 22, 20,
	23, 35, 36, 41, 40, 26, 27, 28, 29, 30,
	31, 32, 33, 37, 42, 38, 39, 24, 25, 0,
	0, 0, 0, 0, 0, 0, 0, 9, 47, 0,
	0, 0, 0, 0, 0, 51, 49, 50, 52, 0,
	0, 0, 45, 0, 34, 0, 0, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	44, 82, 81, 0, 80, 79, 0, 48, 54, 53,
	0, 73, 74, 75, 76, 77, 78, 71, 72, 64,
	83, 65, 66, 67, 68, 69, 70, 284, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 81, 0, 80,
	79, 0, 0, 0, 0, 0, 73, 74, 75, 76,
	77, 78, 71, 72, 64, 83, 65, 66, 67, 68,
	69, 70, 283, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 81, 0, 80, 79, 0, 0, 0, 0,
	0, 73, 74, 75, 76, 77, 78, 71, 72, 64,
	83, 65, 66, 67, 68, 69, 70, 282, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 81, 0,
	80, 79, 0, 0, 0, 0, 0, 73, 74, 75,
	76, 77, 78, 71, 72, 64, 83, 65, 66, 67,
	68, 69, 70, 281, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 81, 0, 80, 79, 0, 0,
	0, 0, 0, 73, 74, 75, 76, 77, 78, 71,
	72, 64, 83, 65, 66, 67, 68, 69, 70, 279,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 81,
	0, 80, 79, 0, 0, 0, 0, 0, 73, 74,
	75, 76, 77, 78, 71, 72, 64, 83, 65, 66,
	67, 68, 69, 70, 82, 81, 0, 80, 79, 0,
	0, 262, 0, 0, 73, 74, 75, 76, 77, 78,
	71, 72, 64, 83, 65, 66, 67, 68, 69, 70,
	261, 242, 0, 0, 0, 0, 0, 0, 0, 82,
	81, 0, 80, 79, 0, 0, 0, 0, 0, 73,
	74, 75, 76, 77, 78, 71, 72, 64, 83, 65,
	66, 67, 68, 69, 70, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 81, 0, 80, 79, 0, 0, 0,
	0, 0, 73, 74, 75, 76, 77, 78, 71, 72,
	64, 83, 65, 66, 67, 68, 69, 70, 241, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 81,
	0, 80, 79, 0, 0, 0, 0, 0, 73, 74,
	75, 76, 77, 78, 71, 72, 64, 83, 65, 66,
	67, 68, 69, 70, 82, 81, 0, 80, 79, 0,
	0, 238, 0, 0, 73, 74, 75, 76, 77, 78,
	71, 72, 64, 83, 65, 66, 67, 68, 69, 70,
	234, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	81, 0, 80, 79, 0, 0, 0, 0, 0, 73,
	74, 75, 76, 77, 78, 71, 72, 64, 83, 65,
	66, 67, 68, 69, 70, 233, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 81, 0, 80, 79, 0,
	0, 0, 0, 0, 73, 74, 75, 76, 77, 78,
	71, 72, 64, 83, 65, 66, 67, 68, 69, 70,
	232, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	81, 0, 80, 79, 0, 0, 0, 0, 0, 73,
	74, 75, 76, 77, 78, 71, 72, 64, 83, 65,
	66, 67, 68, 69, 70, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 81, 0, 80, 79, 0,
	0, 0, 0, 0, 73, 74, 75, 76, 77, 78,
	71, 72, 64, 83, 65, 66, 67, 68, 69, 70,
	230, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	81, 0, 80, 79, 0, 0, 0, 0, 0, 73,
	74, 75, 76, 77, 78, 71, 72, 64, 83, 65,
	66, 67, 68, 69, 70, 229, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 81, 0, 80, 79, 0,
	0, 0, 0, 0, 73, 74, 75, 76, 77, 78,
	71, 72, 64, 83, 65, 66, 67, 68, 69, 70,
	228, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	81, 0, 80, 79, 0, 0, 0, 0, 0, 73,
	74, 75, 76, 77, 78, 71, 72, 64, 83, 65,
	66, 67, 68, 69, 70, 227, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 81, 0, 80, 79, 0,
	0, 0, 0, 0, 73, 74, 75, 76, 77, 78,
	71, 72, 64, 83, 65, 66, 67, 68, 69, 70,
	226, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	81, 0, 80, 79, 0, 0, 0, 0, 0, 73,
	74, 75, 76, 77, 78, 71, 72, 64, 83, 65,
	66, 67, 68, 69, 70, 225, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 81, 0, 80, 79, 0,
	0, 0, 0, 0, 73, 74, 75, 76, 77, 78,
	71, 72, 64, 83, 65, 66, 67, 68, 69, 70,
	224, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	81, 0, 80, 79, 0, 0, 0, 0, 0, 73,
	74, 75, 76, 77, 78, 71, 72, 64, 83, 65,
	66, 67, 68, 69, 70, 223, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 81, 0, 80, 79, 0,
	0, 0, 0, 0, 73, 74, 75, 76, 77, 78,
	71, 72, 64, 83, 65, 66, 67, 68, 69, 70,
	222, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	81, 0, 80, 79, 0, 0, 0, 0, 0, 73,
	74, 75, 76, 77, 78, 71, 72, 64, 83, 65,
	66, 67, 68, 69, 70, 221, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 81, 0, 80, 79, 0,
	0, 0, 0, 0, 73, 74, 75, 76, 77, 78,
	71, 72, 64, 83, 65, 66, 67, 68, 69, 70,
	220, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	81, 0, 80, 79, 0, 0, 0, 0, 0, 73,
	74, 75, 76, 77, 78, 71, 72, 64, 83, 65,
	66, 67, 68, 69, 70, 82, 81, 0, 80, 79,
	0, 0, 0, 0, 0, 73, 74, 75, 76, 77,
	78, 71, 72, 64, 83, 65, 66, 67, 68, 69,
	70, 82, 81, 0, 80, 79, 0, 0, 0, 0,
	0, 288, 74, 75, 76, 77, 78, 71, 72, 64,
	83, 65, 66, 67, 68, 69, 70, 81, 0, 80,
	79, 0, 0, 0, 0, 0, 73, 74, 75, 76,
	77, 78, 71, 72, 64, 83, 65, 66, 67, 68,
	69, 70, 80, 79, 0, 0, 0, 0, 0, 73,
	74, 75, 76, 77, 78, 71, 72, 64, 83, 65,
	66, 67, 68, 69, 70,
}

var yyPact = [...]int16{
	261, -1000, 286, 73, 192, -1000, 259, 192, 256, -1000,
	427, -1000, 255, 190, 129, -1000, 138, -1000, -1000, 189,
	184, 181, 179, 178, 157, 156, 155, 154, 151, 148,
	147, 142, 140, 139, -52, 134, 131, 128, 101, 99,
	95, 80, 79, -47, 649, 649, -1000, 575, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 77, 286, 278, 427,
	132, 427, 192, -1000, 75, 649, 649, 649, 649, 649,
	649, -89, -90, 649, 649, 649, 649, 649, 649, 136,
	-69, 649, 649, 46, 353, 649, 649, 649, 649, 649,
	649, 649, 649, 649, 649, 649, 649, 649, 649, -53,
	649, 501, 649, 649, 197, 195, 194, 193, 59, -1000,
	501, 192, -44, -1000, 1639, 44, -1000, 1565, 286, 39,
	281, 649, -1000, 427, 427, -1000, 221, -1000, 220, 214,
	212, 218, -1000, -1000, 277, -34, -34, -1000, -1000, -1000,
	-1000, -1000, -1000, 56, 56, 56, 56, 56, 56, -29,
	-40, -91, 1639, 1616, -1000, 62, -1000, -1000, -1000, 4,
	649, 1539, 1504, 1469, 1434, 1399, 1364, 1329, 1294, 1259,
	1224, 1189, 1154, 1119, 1084, 1049, -58, 649, 649, 1014,
	48, 1565, -1000, 988, 952, 72, 66, 65, 284, -1000,
	20, -40, -19, -20, -1000, -1000, 1, -1000, 267, 273,
	1565, -1000, 204, -1000, -1000, -1000, 216, -1000, 215, -1000,
	-10, 12, 136, -1000, -1000, -1000, -1000, -1000, -1000, 909,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 874, 1565, 649, -1000,
	649, 649, 133, 649, 649, 649, 649, -1000, -1000, -40,
	-40, -1000, 275, 649, 427, 649, -1000, -1000, -1000, -1000,
	-1000, -1000, 649, 1565, 1565, 848, -12, 813, 777, 741,
	706, -1000, -1000, 265, 269, 1565, 63, 1591, 1565, -1000,
	-1000, 649, 649, -1000, -1000, 263, -85, 649, 649, 671,
	-54, -1000, -85, -1000, 61, -1000, 82, 56, -1000, -1000,
	-1000, 649, 176, -1000, -1000, -1000, -1000, 250, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 347, 0, 342, 4, 341, 340, 339, 338, 337,
	334, 333, 8, 332, 331, 330, 47, 3, 5, 329,
	2, 56, 328, 327, 6, 1, 301, 300, 299, 298,
	297, 295, 294,
}

var yyR1 = [...]int8{
	0, 1, 18, 10, 10, 11, 11, 21, 21, 21,
	21, 5, 3, 3, 3, 3, 3, 3, 3, 3,
	4, 4, 9, 9, 15, 15, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 20, 20, 24, 24, 24, 28,
	28, 28, 28, 28, 28, 28, 32, 32, 22, 22,
	23, 23, 23, 17, 12, 12, 12, 12, 16, 8,
	8, 31, 31, 6, 6, 7, 7, 19, 19, 14,
	14, 14, 13, 13, 13, 25, 27, 27, 26, 26,
	29, 29, 30, 30,
}

var yyR2 = [...]int8{
	0, 2, 10, 1, 0, 6, 7, 3, 2, 1,
	1, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 1, 1, 1, 0, 1, 4, 5, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 6, 6, 8, 8,
	6, 6, 3, 4, 5, 5, 3, 3, 3, 3,
	3, 3, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 5, 4, 2, 3, 3, 3, 4, 3, 4,
	3, 4, 3, 4, 1, 3, 1, 1, 3, 1,
	2, 2, 3, 2, 3, 2, 1, 2, 1, 0,
	2, 3, 7, 1, 0, 3, 4, 4, 1, 0,
	2, 4, 5, 0, 2, 0, 2, 0, 3, 0,
	2, 2, 0, 1, 1, 3, 3, 1, 0, 3,
	0, 2, 0, 2,
}

var yyChk = [...]int16{
	-1000, -1, -10, -11, 16, -18, 7, 60, -16, 58,
	-15, 17, -16, 19, -20, -21, -2, 92, -4, 27,
	30, 28, 29, 31, 48, 49, 36, 37, 38, 39,
	40, 41, 42, 43, 75, 32, 33, 44, 46, 47,
	35, 34, 45, -16, 91, 73, -3, 59, 98, 67,
	68, 66, 69, 100, 99, -5, 19, 59, -22, 60,
	-23, 8, 19, -16, 88, 90, 91, 92, 93, 94,
	95, 86, 87, 80, 81, 82, 83, 84, 85, 74,
	73, 71, 70, 89, 59, 59, 59, 59, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 59, 59, -31,
	76, 59, 59, 59, 59, 59, 59, 59, 59, -12,
	59, 97, 62, -2, -2, -9, -18, -2, 59, -18,
	-6, 9, -21, -32, -28, 60, 53, 50, 54, 51,
	52, 56, -21, -16, 59, -2, -2, -2, -2, -2,
	-2, 100, 100, -2, -2, -2, -2, -2, -2, -4,
	-16, 87, -2, -2, 66, 73, 69, 67, 68, 92,
	17, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -8, 76, 78, -2,
	-24, -2, 92, -2, -2, 58, 58, 58, 58, 61,
	-24, -16, -17, 58, 98, 61, -18, 61, -19, 10,
	-2, -21, -21, 50, 50, 50, 55, 50, 55, 50,
	-18, -24, 71, 100, 66, 69, 67, 68, 61, -2,
	61, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 61, 61, 79, -2, -2, 77, 61,
	60, 60, 19, 60, 60, 60, 8, 61, -12, 63,
	63, 61, -7, 13, 12, 57, 50, 50, 61, 61,
	-4, 61, 77, -2, -2, -2, 58, -2, -2, -2,
	-2, -12, -12, -26, 11, -2, -20, -2, -2, 61,
	61, 60, 60, 61, 61, -29, 14, 12, 80, -2,
	-2, -30, 15, -17, -27, -25, -2, -2, 61, 61,
	-17, 60, -13, 24, 25, -25, -14, 21, 22, 23,
}

var yyDef = [...]int16{
	4, -2, 0, 3, 0, 1, 25, 0, 0, 108,
	0, 24, 0, 0, 99, 84, 9, 10, 26, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 0, 0, 20, 0, 12, 13,
	14, 15, 16, 17, 18, 19, 0, 0, 113, 0,
	98, 0, 0, 8, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 11,
	0, 0, 0, 62, 73, 0, 22, 23, 0, 0,
	117, 0, 85, 0, 0, 96, 0, 89, 0, 0,
	0, 0, 100, 7, 0, 56, 57, 58, 59, 60,
	61, 63, 64, 65, 66, 67, 68, 69, 70, 0,
	104, 0, 74, 75, 76, 0, 78, 80, 82, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 87, 0, 0, 0, 0, 0, 0, 52,
	0, 104, 0, 0, 103, 21, 0, 5, 115, 0,
	114, 101, 0, 97, 90, 91, 0, 93, 0, 95,
	0, 0, 0, 72, 77, 79, 81, 83, 27, 0,
	29, 30, 31, 32, 33, 34, 35, 36, 37, 38,
	39, 40, 41, 42, 43, 44, 0, 110, 0, 45,
	0, 0, 0, 0, 0, 0, 0, 53, 105, 104,
	104, 6, 128, 0, 0, 0, 92, 94, 54, 55,
	71, 28, 0, 111, 88, 0, 0, 0, 0, 0,
	0, 106, 107, 130, 0, 116, 118, 0, 112, 46,
	47, 0, 0, 50, 51, 132, 0, 0, 0, 0,
	0, 2, 0, 131, 129, 127, 122, -2, 48, 49,
	133, 0, 119, 123, 124, 126, 125, 0, 120, 121,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 72, 3, 3, 3, 94, 3, 3,
	59, 61, 92, 90, 60, 91, 97, 93, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 62, 3, 63, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 64, 3, 65,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 66, 67, 68,
	69, 70, 71, 73, 74, 75, 76, 77, 78, 79,
	80, 81, 82, 83, 84, 85, 86, 87, 88, 89,
	95, 96, 98, 99, 100,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:109
		{
			yylex.(*scanner).result = yyDollar[2].sel
			yylex.(*scanner).with = yyDollar[1].with
		}
	case 2:
		yyDollar = yyS[yypt-10 : yypt+1]
//line partiql.y:116
		{
			yyVAL.sel = &expr.Select{Distinct: yyDollar[2].yesno, Columns: yyDollar[3].bindings, From: yyDollar[4].from, Where: yyDollar[5].expr, GroupBy: yyDollar[6].bindings, Having: yyDollar[7].expr, OrderBy: yyDollar[8].orders, Limit: yyDollar[9].exprint, Offset: yyDollar[10].exprint}
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:121
		{
			yyVAL.with = yyDollar[1].with
		}
	case 4:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:121
		{
			yyVAL.with = nil
		}
	case 5:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:124
		{
			yyVAL.with = []expr.CTE{{yyDollar[2].str, yyDollar[5].sel}}
		}
	case 6:
		yyDollar = yyS[yypt-7 : yypt+1]
//line partiql.y:125
		{
			yyVAL.with = append(yyDollar[1].with, expr.CTE{yyDollar[3].str, yyDollar[6].sel})
		}
	case 7:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:131
		{
			yyVAL.bind = expr.Bind(yyDollar[1].expr, yyDollar[3].str)
		}
	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:132
		{
			yyVAL.bind = expr.Bind(yyDollar[1].expr, yyDollar[2].str)
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:133
		{
			yyVAL.bind = expr.Bind(yyDollar[1].expr, "")
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:134
		{
			yyVAL.bind = expr.Bind(expr.Star{}, "")
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:137
		{
			yyVAL.expr = &expr.Path{First: yyDollar[1].str, Rest: yyDollar[2].pc}
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:141
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:142
		{
			yyVAL.expr = expr.Bool(true)
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:143
		{
			yyVAL.expr = expr.Bool(false)
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:144
		{
			yyVAL.expr = expr.Null{}
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:145
		{
			yyVAL.expr = expr.Missing{}
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:146
		{
			yyVAL.expr = expr.String(yyDollar[1].str)
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:147
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:148
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:160
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 21:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:161
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:164
		{
			yyVAL.expr = yyDollar[1].sel
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:165
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:168
		{
			yyVAL.yesno = true
		}
	case 25:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:168
		{
			yyVAL.yesno = false
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:173
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 27:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:177
		{
			yyVAL.expr = expr.Count(expr.Star{})
		}
	case 28:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:181
		{
			yyVAL.expr = expr.CountDistinct(yyDollar[4].expr)
		}
	case 29:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:185
		{
			yyVAL.expr = expr.Count(yyDollar[3].expr)
		}
	case 30:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:189
		{
			yyVAL.expr = expr.Sum(yyDollar[3].expr)
		}
	case 31:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:193
		{
			yyVAL.expr = expr.Min(yyDollar[3].expr)
		}
	case 32:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:197
		{
			yyVAL.expr = expr.Max(yyDollar[3].expr)
		}
	case 33:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:201
		{
			yyVAL.expr = expr.Avg(yyDollar[3].expr)
		}
	case 34:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:205
		{
			yyVAL.expr = expr.Earliest(yyDollar[3].expr)
		}
	case 35:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:209
		{
			yyVAL.expr = expr.Latest(yyDollar[3].expr)
		}
	case 36:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:213
		{
			yyVAL.expr = expr.Abs(yyDollar[3].expr)
		}
	case 37:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:217
		{
			yyVAL.expr = expr.Sign(yyDollar[3].expr)
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:221
		{
			yyVAL.expr = expr.Round(yyDollar[3].expr)
		}
	case 39:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:225
		{
			yyVAL.expr = expr.RoundEven(yyDollar[3].expr)
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:229
		{
			yyVAL.expr = expr.Trunc(yyDollar[3].expr)
		}
	case 41:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:233
		{
			yyVAL.expr = expr.Floor(yyDollar[3].expr)
		}
	case 42:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:237
		{
			yyVAL.expr = expr.Ceil(yyDollar[3].expr)
		}
	case 43:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:241
		{
			yyVAL.expr = expr.Sqrt(yyDollar[3].expr)
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:245
		{
			yyVAL.expr = &expr.Case{Limbs: yyDollar[2].limbs, Else: yyDollar[3].expr}
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:249
		{
			yyVAL.expr = expr.Coalesce(yyDollar[3].values)
		}
	case 46:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:253
		{
			yyVAL.expr = expr.NullIf(yyDollar[3].expr, yyDollar[5].expr)
		}
	case 47:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:257
		{
			nod, ok := buildCast(yyDollar[3].expr, yyDollar[5].str)
			if !ok {
				yylex.Error(__yyfmt__.Sprintf("bad CAST type %q", yyDollar[5].str))
				return 1
			}
			yyVAL.expr = nod
		}
	case 48:
		yyDollar = yyS[yypt-8 : yypt+1]
//line partiql.y:266
		{
			part, ok := timePart(yyDollar[3].str)
			if !ok {
				yylex.Error(__yyfmt__.Sprintf("bad DATE_ADD part %q", yyDollar[3].str))
			}
			yyVAL.expr = expr.DateAdd(part, yyDollar[5].expr, yyDollar[7].expr)
		}
	case 49:
		yyDollar = yyS[yypt-8 : yypt+1]
//line partiql.y:274
		{
			part, ok := timePart(yyDollar[3].str)
			if !ok {
				yylex.Error(__yyfmt__.Sprintf("bad DATE_DIFF part %q", yyDollar[3].str))
			}
			yyVAL.expr = expr.DateDiff(part, yyDollar[5].expr, yyDollar[7].expr)
		}
	case 50:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:282
		{
			part, ok := timePart(yyDollar[3].str)
			if !ok {
				yylex.Error(__yyfmt__.Sprintf("bad DATE_TRUNC part %q", yyDollar[3].str))
			}
			yyVAL.expr = expr.DateTrunc(part, yyDollar[5].expr)
		}
	case 51:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:290
		{
			part, ok := timePart(yyDollar[3].str)
			if !ok {
				yylex.Error(__yyfmt__.Sprintf("bad EXTRACT part %q", yyDollar[3].str))
			}
			yyVAL.expr = expr.DateExtract(part, yyDollar[5].expr)
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:298
		{
			yyVAL.expr = yylex.(*scanner).utcnow()
		}
	case 53:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:302
		{
			op := expr.Call(yyDollar[1].str, yyDollar[3].values...)
			if op.Private() {
				yylex.Error(__yyfmt__.Sprintf("cannot use reserved builtin %q", yyDollar[1].str))
			}
			yyVAL.expr = op
		}
	case 54:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:310
		{
			yyVAL.expr = expr.CallOp(expr.InSubquery, yyDollar[1].expr, yyDollar[4].sel)
		}
	case 55:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:314
		{
			yyVAL.expr = expr.In(yyDollar[1].expr, yyDollar[4].values...)
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:318
		{
			yyVAL.expr = expr.Add(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:322
		{
			yyVAL.expr = expr.Sub(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:326
		{
			yyVAL.expr = expr.Mul(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:330
		{
			yyVAL.expr = expr.Div(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:334
		{
			yyVAL.expr = expr.Mod(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:338
		{
			yyVAL.expr = expr.Call("CONCAT", yyDollar[1].expr, yyDollar[3].expr)
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:342
		{
			yyVAL.expr = expr.Neg(yyDollar[2].expr)
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:346
		{
			yyVAL.expr = expr.Compare(expr.Ilike, yyDollar[1].expr, expr.String(yyDollar[3].str))
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:350
		{
			yyVAL.expr = expr.Compare(expr.Like, yyDollar[1].expr, expr.String(yyDollar[3].str))
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:354
		{
			yyVAL.expr = expr.Compare(expr.Equals, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:358
		{
			yyVAL.expr = expr.Compare(expr.NotEquals, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:362
		{
			yyVAL.expr = expr.Compare(expr.Less, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:366
		{
			yyVAL.expr = expr.Compare(expr.LessEquals, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:370
		{
			yyVAL.expr = expr.Compare(expr.Greater, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:374
		{
			yyVAL.expr = expr.Compare(expr.GreaterEquals, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 71:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:378
		{
			yyVAL.expr = expr.Between(yyDollar[1].expr, yyDollar[3].expr, yyDollar[5].expr)
		}
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:382
		{
			yyVAL.expr = &expr.Not{Expr: expr.Compare(expr.Like, yyDollar[1].expr, expr.String(yyDollar[4].str))}
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:386
		{
			yyVAL.expr = &expr.Not{Expr: yyDollar[2].expr}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:390
		{
			yyVAL.expr = expr.And(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:394
		{
			yyVAL.expr = expr.Or(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:398
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsNull, Expr: yyDollar[1].expr}
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:402
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsNotNull, Expr: yyDollar[1].expr}
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:406
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsMissing, Expr: yyDollar[1].expr}
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:410
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsNotMissing, Expr: yyDollar[1].expr}
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:414
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsTrue, Expr: yyDollar[1].expr}
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:418
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsNotTrue, Expr: yyDollar[1].expr}
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:422
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsFalse, Expr: yyDollar[1].expr}
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:426
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsNotFalse, Expr: yyDollar[1].expr}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:432
		{
			yyVAL.bindings = []expr.Binding{yyDollar[1].bind}
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:433
		{
			yyVAL.bindings = append(yyDollar[1].bindings, yyDollar[3].bind)
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:437
		{
			yyVAL.values = []expr.Node{yyDollar[1].expr}
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:438
		{
			yyVAL.values = []expr.Node{expr.Star{}}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:439
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].expr)
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:442
		{
			yyVAL.jk = expr.InnerJoin
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:443
		{
			yyVAL.jk = expr.InnerJoin
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:444
		{
			yyVAL.jk = expr.LeftJoin
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:445
		{
			yyVAL.jk = expr.LeftJoin
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:446
		{
			yyVAL.jk = expr.RightJoin
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:447
		{
			yyVAL.jk = expr.RightJoin
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:448
		{
			yyVAL.jk = expr.FullJoin
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:453
		{
			yyVAL.from = yyDollar[1].from
		}
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:454
		{
			yyVAL.from = nil
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:461
		{
			yyVAL.from = &expr.Table{Binding: yyDollar[2].bind}
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:462
		{
			yyVAL.from = &expr.Join{Kind: expr.CrossJoin, Left: yyDollar[1].from, Right: yyDollar[3].bind}
		}
	case 102:
		yyDollar = yyS[yypt-7 : yypt+1]
//line partiql.y:464
		{
			yyVAL.from = &expr.Join{Kind: yyDollar[2].jk, Left: yyDollar[1].from, Right: yyDollar[3].bind, On: &expr.OnEquals{Left: yyDollar[5].expr, Right: yyDollar[7].expr}}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:467
		{
			var idxerr error
			yyVAL.integer, idxerr = toint(yyDollar[1].expr)
			if idxerr != nil {
				yylex.Error(idxerr.Error())
			}
		}
	case 104:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:470
		{
			yyVAL.pc = nil
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:471
		{
			yyVAL.pc = &expr.Dot{Field: yyDollar[2].str, Rest: yyDollar[3].pc}
		}
	case 106:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:472
		{
			yyVAL.pc = &expr.LiteralIndex{Field: yyDollar[2].integer, Rest: yyDollar[4].pc}
		}
	case 107:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:473
		{
			yyVAL.pc = &expr.Dot{Field: yyDollar[2].str, Rest: yyDollar[4].pc}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:482
		{
			yyVAL.str = yyDollar[1].str
		}
	case 109:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:485
		{
			yyVAL.expr = nil
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:486
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 111:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:489
		{
			yyVAL.limbs = []expr.CaseLimb{{When: yyDollar[2].expr, Then: yyDollar[4].expr}}
		}
	case 112:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:490
		{
			yyVAL.limbs = append(yyDollar[1].limbs, expr.CaseLimb{When: yyDollar[3].expr, Then: yyDollar[5].expr})
		}
	case 113:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:493
		{
			yyVAL.expr = nil
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:494
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 115:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:497
		{
			yyVAL.expr = nil
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:498
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:501
		{
			yyVAL.bindings = nil
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:502
		{
			yyVAL.bindings = yyDollar[3].bindings
		}
	case 119:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:506
		{
			yyVAL.yesno = false
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:507
		{
			yyVAL.yesno = false
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:508
		{
			yyVAL.yesno = true
		}
	case 122:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:512
		{
			yyVAL.yesno = false
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:513
		{
			yyVAL.yesno = false
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:514
		{
			yyVAL.yesno = true
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:518
		{
			yyVAL.order = expr.Order{Column: yyDollar[1].expr, Desc: yyDollar[2].yesno, NullsLast: yyDollar[3].yesno}
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:521
		{
			yyVAL.orders = append(yyDollar[1].orders, yyDollar[3].order)
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:522
		{
			yyVAL.orders = []expr.Order{yyDollar[1].order}
		}
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:525
		{
			yyVAL.orders = nil
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:526
		{
			yyVAL.orders = yyDollar[3].orders
		}
	case 130:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:529
		{
			yyVAL.exprint = nil
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:530
		{
			n := expr.Integer(yyDollar[2].integer)
			yyVAL.exprint = &n
		}
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:533
		{
			yyVAL.exprint = nil
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:534
		{
			n := expr.Integer(yyDollar[2].integer)
			yyVAL.exprint = &n
		}
	}
	goto yystack /* stack new state and value */
}
