// Code generated by goyacc partiql.y. DO NOT EDIT.

//line partiql.y:15
// Copyright (C) 2022 Sneller, Inc.
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

package partiql

import (
	__yyfmt__ "fmt"

	"github.com/SnellerInc/sneller/expr"
) //line partiql.y:29

//line partiql.y:36
type yySymType struct {
	yys      int
	bytes    []byte
	str      string
	yesno    bool
	integer  int
	exprint  *expr.Integer
	expr     expr.Node
	pc       expr.PathComponent
	order    expr.Order
	sel      *expr.Select
	bind     expr.Binding
	jk       expr.JoinKind
	from     expr.From
	with     []expr.CTE
	bindings []expr.Binding
	limbs    []expr.CaseLimb
	values   []expr.Node
	orders   []expr.Order
}

const ERROR = 57346
const EOF = 57347
const UNION = 57348
const SELECT = 57349
const FROM = 57350
const WHERE = 57351
const GROUP = 57352
const ORDER = 57353
const BY = 57354
const HAVING = 57355
const LIMIT = 57356
const OFFSET = 57357
const WITH = 57358
const INTO = 57359
const DISTINCT = 57360
const ALL = 57361
const AS = 57362
const EXISTS = 57363
const NULLS = 57364
const FIRST = 57365
const LAST = 57366
const ASC = 57367
const DESC = 57368
const VALUE = 57369
const COUNT = 57370
const MIN = 57371
const MAX = 57372
const SUM = 57373
const AVG = 57374
const COALESCE = 57375
const NULLIF = 57376
const EXTRACT = 57377
const DATE_TRUNC = 57378
const ABS = 57379
const SIGN = 57380
const ROUND = 57381
const ROUND_EVEN = 57382
const TRUNC = 57383
const FLOOR = 57384
const CEIL = 57385
const SQRT = 57386
const CAST = 57387
const UTCNOW = 57388
const DATE_ADD = 57389
const DATE_DIFF = 57390
const EARLIEST = 57391
const LATEST = 57392
const JOIN = 57393
const LEFT = 57394
const RIGHT = 57395
const CROSS = 57396
const INNER = 57397
const OUTER = 57398
const FULL = 57399
const ON = 57400
const ID = 57401
const NULL = 57402
const TRUE = 57403
const FALSE = 57404
const MISSING = 57405
const OR = 57406
const AND = 57407
const NOT = 57408
const BETWEEN = 57409
const CASE = 57410
const WHEN = 57411
const THEN = 57412
const ELSE = 57413
const END = 57414
const EQ = 57415
const NE = 57416
const LT = 57417
const LE = 57418
const GT = 57419
const GE = 57420
const ILIKE = 57421
const LIKE = 57422
const IN = 57423
const IS = 57424
const CONCAT = 57425
const APPEND = 57426
const NEGATION_PRECEDENCE = 57427
const NUMBER = 57428
const ION = 57429
const STRING = 57430

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"ERROR",
	"EOF",
	"UNION",
	"SELECT",
	"FROM",
	"WHERE",
	"GROUP",
	"ORDER",
	"BY",
	"HAVING",
	"LIMIT",
	"OFFSET",
	"WITH",
	"INTO",
	"DISTINCT",
	"ALL",
	"AS",
	"EXISTS",
	"NULLS",
	"FIRST",
	"LAST",
	"ASC",
	"DESC",
	"VALUE",
	"COUNT",
	"MIN",
	"MAX",
	"SUM",
	"AVG",
	"COALESCE",
	"NULLIF",
	"EXTRACT",
	"DATE_TRUNC",
	"ABS",
	"SIGN",
	"ROUND",
	"ROUND_EVEN",
	"TRUNC",
	"FLOOR",
	"CEIL",
	"SQRT",
	"CAST",
	"UTCNOW",
	"DATE_ADD",
	"DATE_DIFF",
	"EARLIEST",
	"LATEST",
	"JOIN",
	"LEFT",
	"RIGHT",
	"CROSS",
	"INNER",
	"OUTER",
	"FULL",
	"ON",
	"ID",
	"'('",
	"','",
	"')'",
	"'['",
	"']'",
	"'{'",
	"'}'",
	"NULL",
	"TRUE",
	"FALSE",
	"MISSING",
	"OR",
	"AND",
	"'!'",
	"NOT",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"EQ",
	"NE",
	"LT",
	"LE",
	"GT",
	"GE",
	"ILIKE",
	"LIKE",
	"IN",
	"IS",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"CONCAT",
	"APPEND",
	"NEGATION_PRECEDENCE",
	"'.'",
	"NUMBER",
	"ION",
	"STRING",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 310,
	71, 68,
	72, 68,
	74, 68,
	75, 68,
	81, 68,
	82, 68,
	83, 68,
	84, 68,
	85, 68,
	86, 68,
	-2, 105,
}

const yyPrivate = 57344

const yyLast = 1804

var yyAct = [...]int{
	15, 304, 308, 297, 185, 289, 247, 275, 192, 13,
	108, 120, 14, 173, 9, 115, 80, 207, 79, 78,
	17, 136, 135, 187, 144, 72, 73, 74, 75, 76,
	77, 70, 71, 62, 82, 63, 64, 65, 66, 67,
	68, 69, 186, 111, 112, 113, 42, 116, 68, 69,
	229, 7, 99, 11, 65, 66, 67, 68, 69, 170,
	206, 171, 61, 244, 128, 129, 130, 131, 132, 133,
	134, 123, 119, 137, 138, 139, 140, 141, 142, 110,
	243, 145, 146, 187, 154, 155, 156, 157, 158, 159,
	160, 161, 162, 163, 164, 165, 166, 167, 168, 143,
	172, 174, 176, 177, 8, 46, 125, 126, 234, 260,
	174, 283, 50, 48, 49, 51, 109, 315, 316, 111,
	234, 241, 259, 183, 246, 125, 234, 233, 174, 212,
	191, 188, 189, 182, 190, 203, 313, 147, 150, 151,
	149, 205, 127, 204, 148, 47, 53, 52, 208, 210,
	211, 209, 122, 59, 213, 110, 58, 184, 239, 238,
	237, 6, 118, 81, 80, 107, 79, 78, 106, 105,
	104, 230, 231, 72, 73, 74, 75, 76, 77, 70,
	71, 62, 82, 63, 64, 65, 66, 67, 68, 69,
	103, 302, 102, 101, 249, 242, 267, 58, 100, 245,
	81, 80, 97, 79, 78, 58, 96, 250, 251, 95,
	72, 73, 74, 75, 76, 77, 70, 71, 62, 82,
	63, 64, 65, 66, 67, 68, 69, 261, 94, 93,
	92, 91, 90, 264, 89, 265, 266, 88, 268, 269,
	270, 271, 70, 71, 62, 82, 63, 64, 65, 66,
	67, 68, 69, 125, 272, 273, 87, 274, 86, 198,
	200, 201, 197, 199, 281, 202, 85, 84, 8, 196,
	83, 56, 181, 180, 179, 178, 278, 291, 280, 293,
	279, 258, 253, 288, 54, 294, 295, 292, 256, 254,
	252, 322, 323, 257, 255, 296, 320, 55, 12, 117,
	309, 310, 10, 306, 303, 4, 305, 298, 276, 311,
	312, 299, 277, 290, 309, 317, 318, 248, 193, 321,
	18, 20, 21, 19, 22, 34, 35, 40, 39, 25,
	26, 27, 28, 29, 30, 31, 32, 36, 41, 37,
	38, 23, 24, 240, 124, 122, 117, 5, 194, 98,
	195, 8, 46, 307, 121, 319, 314, 3, 2, 50,
	48, 49, 51, 114, 169, 57, 44, 45, 33, 1,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 43, 175, 153, 0, 0, 0,
	0, 0, 47, 53, 52, 0, 18, 20, 21, 19,
	22, 34, 35, 40, 39, 25, 26, 27, 28, 29,
	30, 31, 32, 36, 41, 37, 38, 23, 24, 0,
	0, 0, 0, 0, 0, 0, 0, 8, 46, 0,
	0, 0, 0, 0, 0, 50, 48, 49, 51, 0,
	0, 0, 44, 0, 33, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	43, 152, 0, 0, 0, 0, 0, 0, 47, 53,
	52, 18, 20, 21, 19, 22, 34, 35, 40, 39,
	25, 26, 27, 28, 29, 30, 31, 32, 36, 41,
	37, 38, 23, 24, 0, 0, 0, 0, 0, 0,
	0, 0, 8, 46, 0, 0, 0, 0, 0, 0,
	50, 48, 49, 51, 0, 0, 0, 44, 0, 33,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 43, 16, 0, 0, 0,
	0, 0, 0, 47, 53, 52, 18, 20, 21, 19,
	22, 34, 35, 40, 39, 25, 26, 27, 28, 29,
	30, 31, 32, 36, 41, 37, 38, 23, 24, 0,
	0, 0, 0, 0, 0, 0, 0, 8, 46, 0,
	0, 0, 0, 0, 0, 50, 48, 49, 51, 0,
	0, 0, 44, 0, 33, 0, 0, 0, 0, 0,
	117, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	43, 175, 0, 0, 0, 0, 0, 0, 47, 53,
	52, 18, 20, 21, 19, 22, 34, 35, 40, 39,
	25, 26, 27, 28, 29, 30, 31, 32, 36, 41,
	37, 38, 23, 24, 0, 0, 0, 0, 0, 0,
	0, 0, 8, 46, 0, 0, 0, 0, 0, 0,
	50, 48, 49, 51, 0, 0, 0, 44, 0, 33,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 43, 0, 0, 0, 0,
	0, 0, 0, 47, 53, 52, 18, 20, 21, 19,
	22, 34, 35, 40, 39, 25, 26, 27, 28, 29,
	30, 31, 32, 36, 41, 37, 38, 23, 24, 0,
	60, 0, 0, 0, 0, 0, 0, 8, 46, 0,
	0, 0, 0, 0, 0, 50, 48, 49, 51, 0,
	0, 0, 44, 0, 33, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 8,
	43, 0, 0, 0, 0, 0, 0, 0, 47, 53,
	52, 81, 80, 0, 79, 78, 0, 0, 0, 0,
	0, 72, 73, 74, 75, 76, 77, 70, 71, 62,
	82, 63, 64, 65, 66, 67, 68, 69, 301, 0,
	0, 0, 0, 0, 0, 0, 0, 81, 80, 0,
	79, 78, 0, 0, 0, 0, 0, 72, 73, 74,
	75, 76, 77, 70, 71, 62, 82, 63, 64, 65,
	66, 67, 68, 69, 287, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 80, 0, 79, 78, 0, 0,
	0, 0, 0, 72, 73, 74, 75, 76, 77, 70,
	71, 62, 82, 63, 64, 65, 66, 67, 68, 69,
	286, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	80, 0, 79, 78, 0, 0, 0, 0, 0, 72,
	73, 74, 75, 76, 77, 70, 71, 62, 82, 63,
	64, 65, 66, 67, 68, 69, 285, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 81, 80, 0, 79,
	78, 0, 0, 0, 0, 0, 72, 73, 74, 75,
	76, 77, 70, 71, 62, 82, 63, 64, 65, 66,
	67, 68, 69, 284, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 80, 0, 79, 78, 0, 0,
	0, 0, 0, 72, 73, 74, 75, 76, 77, 70,
	71, 62, 82, 63, 64, 65, 66, 67, 68, 69,
	282, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	80, 0, 79, 78, 0, 0, 0, 0, 0, 72,
	73, 74, 75, 76, 77, 70, 71, 62, 82, 63,
	64, 65, 66, 67, 68, 69, 81, 80, 0, 79,
	78, 0, 0, 263, 0, 0, 72, 73, 74, 75,
	76, 77, 70, 71, 62, 82, 63, 64, 65, 66,
	67, 68, 69, 262, 236, 0, 0, 0, 0, 0,
	0, 0, 81, 80, 0, 79, 78, 0, 0, 0,
	0, 0, 72, 73, 74, 75, 76, 77, 70, 71,
	62, 82, 63, 64, 65, 66, 67, 68, 69, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 81, 80, 0, 79, 78,
	0, 0, 0, 0, 0, 72, 73, 74, 75, 76,
	77, 70, 71, 62, 82, 63, 64, 65, 66, 67,
	68, 69, 235, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 80, 0, 79, 78, 0, 0, 0,
	0, 0, 72, 73, 74, 75, 76, 77, 70, 71,
	62, 82, 63, 64, 65, 66, 67, 68, 69, 81,
	80, 0, 79, 78, 0, 0, 232, 0, 0, 72,
	73, 74, 75, 76, 77, 70, 71, 62, 82, 63,
	64, 65, 66, 67, 68, 69, 228, 0, 0, 0,
	0, 0, 0, 0, 0, 81, 80, 0, 79, 78,
	0, 0, 0, 0, 0, 72, 73, 74, 75, 76,
	77, 70, 71, 62, 82, 63, 64, 65, 66, 67,
	68, 69, 227, 0, 0, 0, 0, 0, 0, 0,
	0, 81, 80, 0, 79, 78, 0, 0, 0, 0,
	0, 72, 73, 74, 75, 76, 77, 70, 71, 62,
	82, 63, 64, 65, 66, 67, 68, 69, 226, 0,
	0, 0, 0, 0, 0, 0, 0, 81, 80, 0,
	79, 78, 0, 0, 0, 0, 0, 72, 73, 74,
	75, 76, 77, 70, 71, 62, 82, 63, 64, 65,
	66, 67, 68, 69, 225, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 80, 0, 79, 78, 0, 0,
	0, 0, 0, 72, 73, 74, 75, 76, 77, 70,
	71, 62, 82, 63, 64, 65, 66, 67, 68, 69,
	224, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	80, 0, 79, 78, 0, 0, 0, 0, 0, 72,
	73, 74, 75, 76, 77, 70, 71, 62, 82, 63,
	64, 65, 66, 67, 68, 69, 223, 0, 0, 0,
	0, 0, 0, 0, 0, 81, 80, 0, 79, 78,
	0, 0, 0, 0, 0, 72, 73, 74, 75, 76,
	77, 70, 71, 62, 82, 63, 64, 65, 66, 67,
	68, 69, 222, 0, 0, 0, 0, 0, 0, 0,
	0, 81, 80, 0, 79, 78, 0, 0, 0, 0,
	0, 72, 73, 74, 75, 76, 77, 70, 71, 62,
	82, 63, 64, 65, 66, 67, 68, 69, 221, 0,
	0, 0, 0, 0, 0, 0, 0, 81, 80, 0,
	79, 78, 0, 0, 0, 0, 0, 72, 73, 74,
	75, 76, 77, 70, 71, 62, 82, 63, 64, 65,
	66, 67, 68, 69, 220, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 80, 0, 79, 78, 0, 0,
	0, 0, 0, 72, 73, 74, 75, 76, 77, 70,
	71, 62, 82, 63, 64, 65, 66, 67, 68, 69,
	219, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	80, 0, 79, 78, 0, 0, 0, 0, 0, 72,
	73, 74, 75, 76, 77, 70, 71, 62, 82, 63,
	64, 65, 66, 67, 68, 69, 218, 0, 0, 0,
	0, 0, 0, 0, 0, 81, 80, 0, 79, 78,
	0, 0, 0, 0, 0, 72, 73, 74, 75, 76,
	77, 70, 71, 62, 82, 63, 64, 65, 66, 67,
	68, 69, 217, 0, 0, 0, 0, 0, 0, 0,
	0, 81, 80, 0, 79, 78, 0, 0, 0, 0,
	0, 72, 73, 74, 75, 76, 77, 70, 71, 62,
	82, 63, 64, 65, 66, 67, 68, 69, 216, 0,
	0, 0, 0, 0, 0, 0, 0, 81, 80, 0,
	79, 78, 0, 0, 0, 0, 0, 72, 73, 74,
	75, 76, 77, 70, 71, 62, 82, 63, 64, 65,
	66, 67, 68, 69, 215, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 80, 0, 79, 78, 0, 0,
	0, 0, 0, 72, 73, 74, 75, 76, 77, 70,
	71, 62, 82, 63, 64, 65, 66, 67, 68, 69,
	214, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	80, 0, 79, 78, 0, 0, 0, 0, 0, 72,
	73, 74, 75, 76, 77, 70, 71, 62, 82, 63,
	64, 65, 66, 67, 68, 69, 81, 80, 0, 79,
	78, 0, 0, 0, 0, 0, 300, 73, 74, 75,
	76, 77, 70, 71, 62, 82, 63, 64, 65, 66,
	67, 68, 69, 81, 80, 0, 79, 78, 0, 0,
	0, 0, 0, 72, 73, 74, 75, 76, 77, 70,
	71, 62, 82, 63, 64, 65, 66, 67, 68, 69,
	79, 78, 0, 0, 0, 0, 0, 72, 73, 74,
	75, 76, 77, 70, 71, 62, 82, 63, 64, 65,
	66, 67, 68, 69,
}

var yyPact = [...]int{
	289, -1000, 340, 100, 209, 284, 209, 278, -1000, 443,
	-1000, 277, 211, 136, -1000, 700, -1000, -1000, 210, 207,
	206, 198, 196, 177, 174, 172, 171, 170, 169, 168,
	149, 146, 142, -25, 138, 133, 132, 130, 110, 109,
	108, 105, 56, 668, 668, -1000, 593, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 102, 339, 337, 443, 209,
	209, -1000, 82, 668, 668, 668, 668, 668, 668, 668,
	-80, -81, 668, 668, 668, 668, 668, 668, 45, -64,
	668, 668, 70, 368, 668, 668, 668, 668, 668, 668,
	668, 668, 668, 668, 668, 668, 668, 668, -18, 668,
	518, 668, 668, 216, 215, 214, 213, 71, -1000, 518,
	209, -17, -1000, 1706, 69, -1000, 1682, 284, 339, 68,
	309, 208, 443, -1000, -1000, -20, -1000, 292, -39, -39,
	-48, -48, -48, -1000, -1000, -1000, -1000, 155, 155, 155,
	155, 155, 155, -12, -85, 1706, -56, -1000, 81, -1000,
	-1000, -1000, 67, 668, 1628, 1592, 1556, 1520, 1484, 1448,
	1412, 1376, 1340, 1304, 1268, 1232, 1196, 1160, 1124, -30,
	668, 668, 1088, 65, 1682, -1000, 1061, 1024, 99, 98,
	97, 335, -1000, 59, -20, 16, -1, -1000, -1000, 443,
	62, -1000, 307, 668, 443, 443, -1000, 239, -1000, 231,
	238, 237, 230, -1000, 60, 47, 45, -1000, -1000, -1000,
	-1000, -1000, -1000, 981, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	945, 1682, 668, -1000, 668, 668, 137, 668, 668, 668,
	668, -1000, -1000, -20, -20, 144, -1000, 295, 300, 1682,
	-1000, 218, -1000, -1000, -1000, 229, -1000, 227, -1000, -1000,
	-1000, -1000, -1000, 668, 1682, 1682, 918, 49, 882, 845,
	808, 772, -1000, -1000, 309, 302, 668, 443, 668, -1000,
	-1000, 1682, -1000, -1000, 668, 668, -1000, -1000, 307, 293,
	299, 1682, 95, 1655, 736, 129, 295, 291, -77, 668,
	668, -1000, -1000, 302, -1000, -77, -1000, 75, -1000, 92,
	155, 293, -1000, 668, 274, -1000, -1000, 291, -1000, -1000,
	268, -1000, -1000, -1000,
}

var yyPgo = [...]int{
	0, 369, 0, 367, 20, 284, 365, 8, 7, 364,
	363, 358, 357, 10, 356, 355, 14, 46, 4, 15,
	6, 9, 12, 11, 354, 13, 2, 5, 353, 350,
	3, 1, 349, 348,
}

var yyR1 = [...]int{
	0, 1, 19, 6, 6, 11, 11, 12, 12, 22,
	22, 22, 22, 5, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 4, 10, 10, 16, 16, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 21, 21, 25,
	25, 25, 29, 29, 29, 29, 29, 29, 29, 33,
	33, 23, 23, 24, 24, 24, 18, 13, 13, 13,
	13, 17, 9, 9, 32, 32, 7, 7, 8, 8,
	20, 20, 15, 15, 15, 14, 14, 14, 26, 28,
	28, 27, 27, 30, 30, 31, 31,
}

var yyR2 = [...]int{
	0, 12, 10, 2, 0, 1, 0, 6, 7, 3,
	2, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 1, 1, 0, 1, 4,
	5, 4, 4, 4, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 6, 6,
	8, 8, 6, 6, 3, 4, 5, 5, 3, 3,
	3, 3, 3, 3, 3, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 5, 4, 2, 3, 3, 3,
	4, 3, 4, 3, 4, 3, 4, 1, 3, 1,
	1, 3, 1, 2, 2, 3, 2, 3, 2, 1,
	2, 1, 0, 2, 3, 7, 1, 0, 3, 4,
	4, 1, 0, 2, 4, 5, 0, 2, 0, 2,
	0, 3, 0, 2, 2, 0, 1, 1, 3, 3,
	1, 0, 3, 0, 2, 0, 2,
}

var yyChk = [...]int{
	-1000, -1, -11, -12, 16, 7, 61, -17, 59, -16,
	18, -17, 20, -21, -22, -2, 93, -4, 28, 31,
	29, 30, 32, 49, 50, 37, 38, 39, 40, 41,
	42, 43, 44, 76, 33, 34, 45, 47, 48, 36,
	35, 46, -17, 92, 74, -3, 60, 100, 68, 69,
	67, 70, 102, 101, -5, 20, 60, -6, 61, 17,
	20, -17, 89, 91, 92, 93, 94, 95, 96, 97,
	87, 88, 81, 82, 83, 84, 85, 86, 75, 74,
	72, 71, 90, 60, 60, 60, 60, 60, 60, 60,
	60, 60, 60, 60, 60, 60, 60, 60, -32, 77,
	60, 60, 60, 60, 60, 60, 60, 60, -13, 60,
	99, 63, -2, -2, -10, -19, -2, 7, 60, -19,
	-23, -24, 8, -22, -5, -17, -17, 60, -2, -2,
	-2, -2, -2, -2, -2, 102, 102, -2, -2, -2,
	-2, -2, -2, -4, 88, -2, -2, 67, 74, 70,
	68, 69, 93, 18, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, -2, -2, -2, -2, -2, -9,
	77, 79, -2, -25, -2, 93, -2, -2, 59, 59,
	59, 59, 62, -25, -17, -18, 59, 100, 62, -16,
	-19, 62, -7, 9, -33, -29, 61, 54, 51, 55,
	52, 53, 57, -22, -19, -25, 72, 102, 67, 70,
	68, 69, 62, -2, 62, 62, 62, 62, 62, 62,
	62, 62, 62, 62, 62, 62, 62, 62, 62, 80,
	-2, -2, 78, 62, 61, 61, 20, 61, 61, 61,
	8, 62, -13, 64, 64, -21, 62, -20, 10, -2,
	-22, -22, 51, 51, 51, 56, 51, 56, 51, 62,
	62, -4, 62, 78, -2, -2, -2, 59, -2, -2,
	-2, -2, -13, -13, -23, -8, 13, 12, 58, 51,
	51, -2, 62, 62, 61, 61, 62, 62, -7, -27,
	11, -2, -21, -2, -2, -2, -20, -30, 14, 12,
	81, 62, 62, -8, -31, 15, -18, -28, -26, -2,
	-2, -27, -18, 61, -14, 25, 26, -30, -26, -15,
	22, -31, 23, 24,
}

var yyDef = [...]int{
	6, -2, 0, 5, 0, 27, 0, 0, 111, 0,
	26, 0, 0, 4, 87, 11, 12, 28, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 107, 0, 0, 22, 0, 14, 15, 16,
	17, 18, 19, 20, 21, 0, 0, 102, 0, 0,
	0, 10, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 112, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 13, 0,
	0, 0, 65, 76, 0, 24, 25, 27, 0, 0,
	116, 101, 0, 88, 3, 107, 9, 0, 58, 59,
	60, 61, 62, 63, 64, 66, 67, 68, 69, 70,
	71, 72, 73, 0, 0, 77, 78, 79, 0, 81,
	83, 85, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 89, 90, 0, 0, 0, 0,
	0, 0, 54, 0, 107, 0, 0, 106, 23, 0,
	0, 7, 120, 0, 0, 0, 99, 0, 92, 0,
	0, 0, 0, 103, 0, 0, 0, 75, 80, 82,
	84, 86, 29, 0, 31, 32, 33, 34, 35, 36,
	37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
	0, 113, 0, 47, 0, 0, 0, 0, 0, 0,
	0, 55, 108, 107, 107, 102, 8, 118, 0, 117,
	104, 0, 100, 93, 94, 0, 96, 0, 98, 56,
	57, 74, 30, 0, 114, 91, 0, 0, 0, 0,
	0, 0, 109, 110, 116, 131, 0, 0, 0, 95,
	97, 115, 48, 49, 0, 0, 52, 53, 120, 133,
	0, 119, 121, 0, 0, 0, 118, 135, 0, 0,
	0, 50, 51, 131, 1, 0, 134, 132, 130, 125,
	-2, 133, 136, 0, 122, 126, 127, 135, 129, 128,
	0, 2, 123, 124,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 73, 3, 3, 3, 95, 3, 3,
	60, 62, 93, 91, 61, 92, 99, 94, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 63, 3, 64, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 65, 3, 66,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 67, 68,
	69, 70, 71, 72, 74, 75, 76, 77, 78, 79,
	80, 81, 82, 83, 84, 85, 86, 87, 88, 89,
	90, 96, 97, 98, 100, 101, 102,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-12 : yypt+1]
//line partiql.y:110
		{
			yylex.(*scanner).with = yyDollar[1].with
			yylex.(*scanner).into = yyDollar[5].expr
			yylex.(*scanner).result = &expr.Select{Distinct: yyDollar[3].yesno, Columns: yyDollar[4].bindings, From: yyDollar[6].from, Where: yyDollar[7].expr, GroupBy: yyDollar[8].bindings, Having: yyDollar[9].expr, OrderBy: yyDollar[10].orders, Limit: yyDollar[11].exprint, Offset: yyDollar[12].exprint}
		}
	case 2:
		yyDollar = yyS[yypt-10 : yypt+1]
//line partiql.y:118
		{
			yyVAL.sel = &expr.Select{Distinct: yyDollar[2].yesno, Columns: yyDollar[3].bindings, From: yyDollar[4].from, Where: yyDollar[5].expr, GroupBy: yyDollar[6].bindings, Having: yyDollar[7].expr, OrderBy: yyDollar[8].orders, Limit: yyDollar[9].exprint, Offset: yyDollar[10].exprint}
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:123
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 4:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:123
		{
			yyVAL.expr = nil
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:126
		{
			yyVAL.with = yyDollar[1].with
		}
	case 6:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:126
		{
			yyVAL.with = nil
		}
	case 7:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:129
		{
			yyVAL.with = []expr.CTE{{yyDollar[2].str, yyDollar[5].sel}}
		}
	case 8:
		yyDollar = yyS[yypt-7 : yypt+1]
//line partiql.y:130
		{
			yyVAL.with = append(yyDollar[1].with, expr.CTE{yyDollar[3].str, yyDollar[6].sel})
		}
	case 9:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:136
		{
			yyVAL.bind = expr.Bind(yyDollar[1].expr, yyDollar[3].str)
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:137
		{
			yyVAL.bind = expr.Bind(yyDollar[1].expr, yyDollar[2].str)
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:138
		{
			yyVAL.bind = expr.Bind(yyDollar[1].expr, "")
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:139
		{
			yyVAL.bind = expr.Bind(expr.Star{}, "")
		}
	case 13:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:142
		{
			yyVAL.expr = &expr.Path{First: yyDollar[1].str, Rest: yyDollar[2].pc}
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:146
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:147
		{
			yyVAL.expr = expr.Bool(true)
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:148
		{
			yyVAL.expr = expr.Bool(false)
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:149
		{
			yyVAL.expr = expr.Null{}
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:150
		{
			yyVAL.expr = expr.Missing{}
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:151
		{
			yyVAL.expr = expr.String(yyDollar[1].str)
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:152
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:153
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:165
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:166
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:169
		{
			yyVAL.expr = yyDollar[1].sel
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:170
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:173
		{
			yyVAL.yesno = true
		}
	case 27:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:173
		{
			yyVAL.yesno = false
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:178
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 29:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:182
		{
			yyVAL.expr = expr.Count(expr.Star{})
		}
	case 30:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:186
		{
			yyVAL.expr = expr.CountDistinct(yyDollar[4].expr)
		}
	case 31:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:190
		{
			yyVAL.expr = expr.Count(yyDollar[3].expr)
		}
	case 32:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:194
		{
			yyVAL.expr = expr.Sum(yyDollar[3].expr)
		}
	case 33:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:198
		{
			yyVAL.expr = expr.Min(yyDollar[3].expr)
		}
	case 34:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:202
		{
			yyVAL.expr = expr.Max(yyDollar[3].expr)
		}
	case 35:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:206
		{
			yyVAL.expr = expr.Avg(yyDollar[3].expr)
		}
	case 36:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:210
		{
			yyVAL.expr = expr.Earliest(yyDollar[3].expr)
		}
	case 37:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:214
		{
			yyVAL.expr = expr.Latest(yyDollar[3].expr)
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:218
		{
			yyVAL.expr = expr.Abs(yyDollar[3].expr)
		}
	case 39:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:222
		{
			yyVAL.expr = expr.Sign(yyDollar[3].expr)
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:226
		{
			yyVAL.expr = expr.Round(yyDollar[3].expr)
		}
	case 41:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:230
		{
			yyVAL.expr = expr.RoundEven(yyDollar[3].expr)
		}
	case 42:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:234
		{
			yyVAL.expr = expr.Trunc(yyDollar[3].expr)
		}
	case 43:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:238
		{
			yyVAL.expr = expr.Floor(yyDollar[3].expr)
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:242
		{
			yyVAL.expr = expr.Ceil(yyDollar[3].expr)
		}
	case 45:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:246
		{
			yyVAL.expr = expr.Sqrt(yyDollar[3].expr)
		}
	case 46:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:250
		{
			yyVAL.expr = &expr.Case{Limbs: yyDollar[2].limbs, Else: yyDollar[3].expr}
		}
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:254
		{
			yyVAL.expr = expr.Coalesce(yyDollar[3].values)
		}
	case 48:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:258
		{
			yyVAL.expr = expr.NullIf(yyDollar[3].expr, yyDollar[5].expr)
		}
	case 49:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:262
		{
			nod, ok := buildCast(yyDollar[3].expr, yyDollar[5].str)
			if !ok {
				yylex.Error(__yyfmt__.Sprintf("bad CAST type %q", yyDollar[5].str))
				return 1
			}
			yyVAL.expr = nod
		}
	case 50:
		yyDollar = yyS[yypt-8 : yypt+1]
//line partiql.y:271
		{
			part, ok := timePart(yyDollar[3].str)
			if !ok {
				yylex.Error(__yyfmt__.Sprintf("bad DATE_ADD part %q", yyDollar[3].str))
			}
			yyVAL.expr = expr.DateAdd(part, yyDollar[5].expr, yyDollar[7].expr)
		}
	case 51:
		yyDollar = yyS[yypt-8 : yypt+1]
//line partiql.y:279
		{
			part, ok := timePart(yyDollar[3].str)
			if !ok {
				yylex.Error(__yyfmt__.Sprintf("bad DATE_DIFF part %q", yyDollar[3].str))
			}
			yyVAL.expr = expr.DateDiff(part, yyDollar[5].expr, yyDollar[7].expr)
		}
	case 52:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:287
		{
			part, ok := timePart(yyDollar[3].str)
			if !ok {
				yylex.Error(__yyfmt__.Sprintf("bad DATE_TRUNC part %q", yyDollar[3].str))
			}
			yyVAL.expr = expr.DateTrunc(part, yyDollar[5].expr)
		}
	case 53:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:295
		{
			part, ok := timePart(yyDollar[3].str)
			if !ok {
				yylex.Error(__yyfmt__.Sprintf("bad EXTRACT part %q", yyDollar[3].str))
			}
			yyVAL.expr = expr.DateExtract(part, yyDollar[5].expr)
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:303
		{
			yyVAL.expr = yylex.(*scanner).utcnow()
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:307
		{
			op := expr.Call(yyDollar[1].str, yyDollar[3].values...)
			if op.Private() {
				yylex.Error(__yyfmt__.Sprintf("cannot use reserved builtin %q", yyDollar[1].str))
			}
			yyVAL.expr = op
		}
	case 56:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:315
		{
			yyVAL.expr = expr.CallOp(expr.InSubquery, yyDollar[1].expr, yyDollar[4].sel)
		}
	case 57:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:319
		{
			yyVAL.expr = expr.In(yyDollar[1].expr, yyDollar[4].values...)
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:323
		{
			yyVAL.expr = expr.Add(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:327
		{
			yyVAL.expr = expr.Sub(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:331
		{
			yyVAL.expr = expr.Mul(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:335
		{
			yyVAL.expr = expr.Div(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:339
		{
			yyVAL.expr = expr.Mod(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:343
		{
			yyVAL.expr = expr.Call("CONCAT", yyDollar[1].expr, yyDollar[3].expr)
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:347
		{
			yyVAL.expr = expr.Append(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:351
		{
			yyVAL.expr = expr.Neg(yyDollar[2].expr)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:355
		{
			yyVAL.expr = expr.Compare(expr.Ilike, yyDollar[1].expr, expr.String(yyDollar[3].str))
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:359
		{
			yyVAL.expr = expr.Compare(expr.Like, yyDollar[1].expr, expr.String(yyDollar[3].str))
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:363
		{
			yyVAL.expr = expr.Compare(expr.Equals, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:367
		{
			yyVAL.expr = expr.Compare(expr.NotEquals, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:371
		{
			yyVAL.expr = expr.Compare(expr.Less, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:375
		{
			yyVAL.expr = expr.Compare(expr.LessEquals, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:379
		{
			yyVAL.expr = expr.Compare(expr.Greater, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:383
		{
			yyVAL.expr = expr.Compare(expr.GreaterEquals, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 74:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:387
		{
			yyVAL.expr = expr.Between(yyDollar[1].expr, yyDollar[3].expr, yyDollar[5].expr)
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:391
		{
			yyVAL.expr = &expr.Not{Expr: expr.Compare(expr.Like, yyDollar[1].expr, expr.String(yyDollar[4].str))}
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:395
		{
			yyVAL.expr = &expr.Not{Expr: yyDollar[2].expr}
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:399
		{
			yyVAL.expr = expr.And(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:403
		{
			yyVAL.expr = expr.Or(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:407
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsNull, Expr: yyDollar[1].expr}
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:411
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsNotNull, Expr: yyDollar[1].expr}
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:415
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsMissing, Expr: yyDollar[1].expr}
		}
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:419
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsNotMissing, Expr: yyDollar[1].expr}
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:423
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsTrue, Expr: yyDollar[1].expr}
		}
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:427
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsNotTrue, Expr: yyDollar[1].expr}
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:431
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsFalse, Expr: yyDollar[1].expr}
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:435
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsNotFalse, Expr: yyDollar[1].expr}
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:441
		{
			yyVAL.bindings = []expr.Binding{yyDollar[1].bind}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:442
		{
			yyVAL.bindings = append(yyDollar[1].bindings, yyDollar[3].bind)
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:446
		{
			yyVAL.values = []expr.Node{yyDollar[1].expr}
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:447
		{
			yyVAL.values = []expr.Node{expr.Star{}}
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:448
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].expr)
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:451
		{
			yyVAL.jk = expr.InnerJoin
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:452
		{
			yyVAL.jk = expr.InnerJoin
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:453
		{
			yyVAL.jk = expr.LeftJoin
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:454
		{
			yyVAL.jk = expr.LeftJoin
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:455
		{
			yyVAL.jk = expr.RightJoin
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:456
		{
			yyVAL.jk = expr.RightJoin
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:457
		{
			yyVAL.jk = expr.FullJoin
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:462
		{
			yyVAL.from = yyDollar[1].from
		}
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:463
		{
			yyVAL.from = nil
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:470
		{
			yyVAL.from = &expr.Table{Binding: yyDollar[2].bind}
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:471
		{
			yyVAL.from = &expr.Join{Kind: expr.CrossJoin, Left: yyDollar[1].from, Right: yyDollar[3].bind}
		}
	case 105:
		yyDollar = yyS[yypt-7 : yypt+1]
//line partiql.y:473
		{
			yyVAL.from = &expr.Join{Kind: yyDollar[2].jk, Left: yyDollar[1].from, Right: yyDollar[3].bind, On: &expr.OnEquals{Left: yyDollar[5].expr, Right: yyDollar[7].expr}}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:476
		{
			var idxerr error
			yyVAL.integer, idxerr = toint(yyDollar[1].expr)
			if idxerr != nil {
				yylex.Error(idxerr.Error())
			}
		}
	case 107:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:479
		{
			yyVAL.pc = nil
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:480
		{
			yyVAL.pc = &expr.Dot{Field: yyDollar[2].str, Rest: yyDollar[3].pc}
		}
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:481
		{
			yyVAL.pc = &expr.LiteralIndex{Field: yyDollar[2].integer, Rest: yyDollar[4].pc}
		}
	case 110:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:482
		{
			yyVAL.pc = &expr.Dot{Field: yyDollar[2].str, Rest: yyDollar[4].pc}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:491
		{
			yyVAL.str = yyDollar[1].str
		}
	case 112:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:494
		{
			yyVAL.expr = nil
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:495
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:498
		{
			yyVAL.limbs = []expr.CaseLimb{{When: yyDollar[2].expr, Then: yyDollar[4].expr}}
		}
	case 115:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:499
		{
			yyVAL.limbs = append(yyDollar[1].limbs, expr.CaseLimb{When: yyDollar[3].expr, Then: yyDollar[5].expr})
		}
	case 116:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:502
		{
			yyVAL.expr = nil
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:503
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 118:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:506
		{
			yyVAL.expr = nil
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:507
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 120:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:510
		{
			yyVAL.bindings = nil
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:511
		{
			yyVAL.bindings = yyDollar[3].bindings
		}
	case 122:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:515
		{
			yyVAL.yesno = false
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:516
		{
			yyVAL.yesno = false
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:517
		{
			yyVAL.yesno = true
		}
	case 125:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:521
		{
			yyVAL.yesno = false
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:522
		{
			yyVAL.yesno = false
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:523
		{
			yyVAL.yesno = true
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:527
		{
			yyVAL.order = expr.Order{Column: yyDollar[1].expr, Desc: yyDollar[2].yesno, NullsLast: yyDollar[3].yesno}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:530
		{
			yyVAL.orders = append(yyDollar[1].orders, yyDollar[3].order)
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:531
		{
			yyVAL.orders = []expr.Order{yyDollar[1].order}
		}
	case 131:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:534
		{
			yyVAL.orders = nil
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:535
		{
			yyVAL.orders = yyDollar[3].orders
		}
	case 133:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:538
		{
			yyVAL.exprint = nil
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:539
		{
			n := expr.Integer(yyDollar[2].integer)
			yyVAL.exprint = &n
		}
	case 135:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:542
		{
			yyVAL.exprint = nil
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:543
		{
			n := expr.Integer(yyDollar[2].integer)
			yyVAL.exprint = &n
		}
	}
	goto yystack /* stack new state and value */
}
