// Code generated by goyacc partiql.y. DO NOT EDIT.

//line partiql.y:15
// Copyright (C) 2022 Sneller, Inc.
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

package partiql

import (
	__yyfmt__ "fmt"

	"github.com/SnellerInc/sneller/expr"
) //line partiql.y:29

//line partiql.y:36
type yySymType struct {
	yys      int
	bytes    []byte
	str      string
	yesno    bool
	integer  int
	exprint  *expr.Integer
	expr     expr.Node
	pc       expr.PathComponent
	order    expr.Order
	sel      *expr.Select
	wind     *expr.Window
	bind     expr.Binding
	jk       expr.JoinKind
	from     expr.From
	with     []expr.CTE
	bindings []expr.Binding
	limbs    []expr.CaseLimb
	values   []expr.Node
	orders   []expr.Order
}

const ERROR = 57346
const EOF = 57347
const UNION = 57348
const SELECT = 57349
const FROM = 57350
const WHERE = 57351
const GROUP = 57352
const ORDER = 57353
const BY = 57354
const HAVING = 57355
const LIMIT = 57356
const OFFSET = 57357
const WITH = 57358
const INTO = 57359
const DISTINCT = 57360
const ALL = 57361
const AS = 57362
const EXISTS = 57363
const NULLS = 57364
const FIRST = 57365
const LAST = 57366
const ASC = 57367
const DESC = 57368
const PARTITION = 57369
const VALUE = 57370
const COALESCE = 57371
const NULLIF = 57372
const EXTRACT = 57373
const DATE_TRUNC = 57374
const CAST = 57375
const UTCNOW = 57376
const DATE_ADD = 57377
const DATE_DIFF = 57378
const EARLIEST = 57379
const LATEST = 57380
const JOIN = 57381
const LEFT = 57382
const RIGHT = 57383
const CROSS = 57384
const INNER = 57385
const OUTER = 57386
const FULL = 57387
const ON = 57388
const AGGREGATE = 57389
const ID = 57390
const NULL = 57391
const TRUE = 57392
const FALSE = 57393
const MISSING = 57394
const OR = 57395
const AND = 57396
const NOT = 57397
const BETWEEN = 57398
const CASE = 57399
const WHEN = 57400
const THEN = 57401
const ELSE = 57402
const END = 57403
const TO = 57404
const EQ = 57405
const NE = 57406
const LT = 57407
const LE = 57408
const GT = 57409
const GE = 57410
const SIMILAR = 57411
const REGEXP_MATCH_CI = 57412
const ILIKE = 57413
const LIKE = 57414
const IN = 57415
const IS = 57416
const OVER = 57417
const FILTER = 57418
const SHIFT_LEFT_LOGICAL = 57419
const SHIFT_RIGHT_ARITHMETIC = 57420
const SHIFT_RIGHT_LOGICAL = 57421
const CONCAT = 57422
const APPEND = 57423
const NEGATION_PRECEDENCE = 57424
const NUMBER = 57425
const ION = 57426
const STRING = 57427

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"ERROR",
	"EOF",
	"UNION",
	"SELECT",
	"FROM",
	"WHERE",
	"GROUP",
	"ORDER",
	"BY",
	"HAVING",
	"LIMIT",
	"OFFSET",
	"WITH",
	"INTO",
	"DISTINCT",
	"ALL",
	"AS",
	"EXISTS",
	"NULLS",
	"FIRST",
	"LAST",
	"ASC",
	"DESC",
	"PARTITION",
	"VALUE",
	"COALESCE",
	"NULLIF",
	"EXTRACT",
	"DATE_TRUNC",
	"CAST",
	"UTCNOW",
	"DATE_ADD",
	"DATE_DIFF",
	"EARLIEST",
	"LATEST",
	"JOIN",
	"LEFT",
	"RIGHT",
	"CROSS",
	"INNER",
	"OUTER",
	"FULL",
	"ON",
	"AGGREGATE",
	"ID",
	"'('",
	"','",
	"')'",
	"'['",
	"']'",
	"'{'",
	"'}'",
	"NULL",
	"TRUE",
	"FALSE",
	"MISSING",
	"OR",
	"AND",
	"'!'",
	"'~'",
	"NOT",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"TO",
	"EQ",
	"NE",
	"LT",
	"LE",
	"GT",
	"GE",
	"SIMILAR",
	"REGEXP_MATCH_CI",
	"ILIKE",
	"LIKE",
	"IN",
	"IS",
	"OVER",
	"FILTER",
	"'|'",
	"'^'",
	"'&'",
	"SHIFT_LEFT_LOGICAL",
	"SHIFT_RIGHT_ARITHMETIC",
	"SHIFT_RIGHT_LOGICAL",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"CONCAT",
	"APPEND",
	"NEGATION_PRECEDENCE",
	"'.'",
	"NUMBER",
	"ION",
	"STRING",
	"':'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 322,
	60, 67,
	61, 67,
	63, 67,
	64, 67,
	65, 67,
	72, 67,
	73, 67,
	74, 67,
	75, 67,
	76, 67,
	77, 67,
	-2, 121,
}

const yyPrivate = 57344

const yyLast = 1522

var yyAct = [...]int16{
	15, 316, 320, 296, 178, 307, 244, 277, 165, 284,
	13, 193, 261, 113, 94, 9, 17, 274, 14, 28,
	186, 107, 259, 238, 7, 213, 11, 212, 210, 209,
	207, 99, 100, 101, 103, 52, 138, 108, 8, 36,
	137, 135, 134, 105, 179, 180, 40, 38, 39, 41,
	62, 63, 64, 65, 66, 121, 122, 123, 124, 125,
	126, 127, 128, 129, 130, 131, 132, 133, 116, 112,
	118, 119, 285, 139, 140, 141, 142, 143, 144, 97,
	95, 151, 152, 97, 65, 66, 164, 166, 168, 169,
	262, 37, 43, 42, 160, 145, 166, 180, 118, 211,
	136, 162, 220, 163, 176, 153, 156, 157, 155, 85,
	185, 190, 208, 154, 183, 184, 177, 182, 340, 235,
	181, 166, 234, 225, 257, 188, 109, 96, 149, 206,
	115, 96, 289, 191, 204, 214, 216, 217, 215, 256,
	29, 243, 205, 148, 150, 147, 146, 297, 20, 21,
	26, 25, 22, 27, 23, 24, 242, 241, 236, 218,
	225, 232, 219, 221, 222, 192, 18, 8, 36, 187,
	159, 33, 49, 34, 174, 40, 38, 39, 41, 225,
	224, 327, 32, 31, 237, 19, 225, 239, 49, 230,
	50, 229, 233, 44, 302, 246, 228, 6, 286, 240,
	55, 56, 57, 59, 58, 60, 61, 62, 63, 64,
	65, 66, 30, 167, 247, 248, 120, 111, 110, 98,
	37, 43, 42, 49, 264, 258, 265, 266, 118, 268,
	269, 270, 271, 57, 59, 58, 60, 61, 62, 63,
	64, 65, 66, 276, 117, 93, 92, 91, 90, 272,
	273, 89, 88, 87, 275, 60, 61, 62, 63, 64,
	65, 66, 86, 83, 287, 199, 201, 202, 198, 200,
	47, 203, 267, 283, 280, 294, 197, 8, 173, 298,
	172, 300, 171, 170, 45, 282, 281, 295, 255, 253,
	299, 304, 305, 301, 254, 251, 250, 249, 311, 335,
	252, 46, 306, 12, 312, 329, 330, 338, 339, 10,
	321, 322, 4, 318, 315, 317, 308, 278, 323, 325,
	309, 279, 326, 297, 166, 245, 303, 194, 321, 231,
	333, 332, 331, 115, 337, 336, 109, 5, 195, 84,
	81, 80, 196, 70, 79, 78, 319, 189, 104, 102,
	114, 158, 72, 73, 74, 75, 76, 77, 69, 71,
	67, 68, 53, 82, 334, 328, 54, 55, 56, 57,
	59, 58, 60, 61, 62, 63, 64, 65, 66, 29,
	3, 2, 106, 161, 48, 35, 1, 20, 21, 26,
	25, 22, 27, 23, 24, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 18, 8, 36, 0, 175,
	33, 0, 34, 51, 40, 38, 39, 41, 0, 0,
	0, 32, 31, 0, 19, 56, 57, 59, 58, 60,
	61, 62, 63, 64, 65, 66, 0, 0, 0, 0,
	0, 8, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 30, 167, 81, 80, 0, 70, 79, 78, 37,
	43, 42, 0, 0, 0, 72, 73, 74, 75, 76,
	77, 69, 71, 67, 68, 53, 82, 0, 0, 54,
	55, 56, 57, 59, 58, 60, 61, 62, 63, 64,
	65, 66, 29, 0, 0, 0, 0, 0, 0, 0,
	20, 21, 26, 25, 22, 27, 23, 24, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 18, 8,
	36, 0, 0, 33, 0, 34, 0, 40, 38, 39,
	41, 0, 0, 0, 32, 31, 0, 19, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 324, 0, 0,
	0, 0, 0, 0, 30, 167, 81, 80, 0, 70,
	79, 78, 37, 43, 42, 0, 0, 0, 72, 73,
	74, 75, 76, 77, 69, 71, 67, 68, 53, 82,
	0, 0, 54, 55, 56, 57, 59, 58, 60, 61,
	62, 63, 64, 65, 66, 314, 0, 0, 0, 0,
	0, 0, 0, 0, 81, 80, 0, 70, 79, 78,
	0, 0, 0, 0, 0, 0, 72, 73, 74, 75,
	76, 77, 69, 71, 67, 68, 53, 82, 0, 0,
	54, 55, 56, 57, 59, 58, 60, 61, 62, 63,
	64, 65, 66, 313, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 80, 0, 70, 79, 78, 0, 0,
	0, 0, 0, 0, 72, 73, 74, 75, 76, 77,
	69, 71, 67, 68, 53, 82, 0, 0, 54, 55,
	56, 57, 59, 58, 60, 61, 62, 63, 64, 65,
	66, 29, 0, 0, 0, 0, 0, 0, 0, 20,
	21, 26, 25, 22, 27, 23, 24, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 18, 8, 36,
	0, 0, 33, 0, 34, 0, 40, 38, 39, 41,
	0, 0, 0, 32, 31, 0, 19, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 293, 0, 0, 0,
	0, 0, 0, 30, 16, 81, 80, 0, 70, 79,
	78, 37, 43, 42, 0, 0, 0, 72, 73, 74,
	75, 76, 77, 69, 71, 67, 68, 53, 82, 0,
	0, 54, 55, 56, 57, 59, 58, 60, 61, 62,
	63, 64, 65, 66, 292, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 80, 0, 70, 79, 78, 0,
	0, 0, 0, 0, 0, 72, 73, 74, 75, 76,
	77, 69, 71, 67, 68, 53, 82, 0, 0, 54,
	55, 56, 57, 59, 58, 60, 61, 62, 63, 64,
	65, 66, 291, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 80, 0, 70, 79, 78, 0, 0,
	0, 0, 0, 0, 72, 73, 74, 75, 76, 77,
	69, 71, 67, 68, 53, 82, 0, 0, 54, 55,
	56, 57, 59, 58, 60, 61, 62, 63, 64, 65,
	66, 290, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 81, 80, 0, 70, 79, 78, 0, 0, 0,
	0, 0, 0, 72, 73, 74, 75, 76, 77, 69,
	71, 67, 68, 53, 82, 0, 0, 54, 55, 56,
	57, 59, 58, 60, 61, 62, 63, 64, 65, 66,
	288, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	80, 0, 70, 79, 78, 0, 0, 0, 0, 0,
	0, 72, 73, 74, 75, 76, 77, 69, 71, 67,
	68, 53, 82, 0, 0, 54, 55, 56, 57, 59,
	58, 60, 61, 62, 63, 64, 65, 66, 81, 80,
	0, 70, 79, 78, 0, 0, 263, 0, 0, 0,
	72, 73, 74, 75, 76, 77, 69, 71, 67, 68,
	53, 82, 0, 0, 54, 55, 56, 57, 59, 58,
	60, 61, 62, 63, 64, 65, 66, 260, 0, 0,
	0, 0, 0, 0, 0, 227, 81, 80, 0, 70,
	79, 78, 0, 0, 0, 0, 0, 0, 72, 73,
	74, 75, 76, 77, 69, 71, 67, 68, 53, 82,
	0, 0, 54, 55, 56, 57, 59, 58, 60, 61,
	62, 63, 64, 65, 66, 81, 80, 0, 70, 79,
	78, 0, 0, 0, 0, 0, 0, 72, 73, 74,
	75, 76, 77, 69, 71, 67, 68, 53, 82, 0,
	0, 54, 55, 56, 57, 59, 58, 60, 61, 62,
	63, 64, 65, 66, 226, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 81, 80, 0, 70, 79, 78,
	0, 0, 0, 0, 0, 0, 72, 73, 74, 75,
	76, 77, 69, 71, 67, 68, 53, 82, 0, 0,
	54, 55, 56, 57, 59, 58, 60, 61, 62, 63,
	64, 65, 66, 81, 80, 0, 70, 79, 78, 0,
	0, 223, 0, 0, 0, 72, 73, 74, 75, 76,
	77, 69, 71, 67, 68, 53, 82, 0, 109, 54,
	55, 56, 57, 59, 58, 60, 61, 62, 63, 64,
	65, 66, 29, 0, 0, 0, 0, 0, 0, 0,
	20, 21, 26, 25, 22, 27, 23, 24, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 18, 8,
	36, 0, 0, 33, 0, 34, 0, 40, 38, 39,
	41, 0, 0, 0, 32, 31, 0, 19, 69, 71,
	67, 68, 53, 82, 0, 0, 54, 55, 56, 57,
	59, 58, 60, 61, 62, 63, 64, 65, 66, 0,
	0, 0, 0, 0, 30, 0, 0, 29, 0, 0,
	0, 0, 37, 43, 42, 20, 21, 26, 25, 22,
	27, 23, 24, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 18, 8, 36, 0, 0, 33, 0,
	34, 0, 40, 38, 39, 41, 0, 0, 0, 32,
	31, 0, 19, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 30,
	81, 80, 0, 70, 79, 78, 0, 37, 43, 42,
	0, 0, 310, 73, 74, 75, 76, 77, 69, 71,
	67, 68, 53, 82, 0, 0, 54, 55, 56, 57,
	59, 58, 60, 61, 62, 63, 64, 65, 66, 81,
	80, 0, 70, 79, 78, 0, 0, 0, 0, 0,
	0, 72, 73, 74, 75, 76, 77, 69, 71, 67,
	68, 53, 82, 0, 0, 54, 55, 56, 57, 59,
	58, 60, 61, 62, 63, 64, 65, 66, 80, 0,
	70, 79, 78, 0, 0, 0, 0, 0, 0, 72,
	73, 74, 75, 76, 77, 69, 71, 67, 68, 53,
	82, 0, 0, 54, 55, 56, 57, 59, 58, 60,
	61, 62, 63, 64, 65, 66, 70, 79, 78, 0,
	0, 0, 0, 0, 0, 72, 73, 74, 75, 76,
	77, 69, 71, 67, 68, 53, 82, 0, 0, 54,
	55, 56, 57, 59, 58, 60, 61, 62, 63, 64,
	65, 66,
}

var yyPact = [...]int16{
	296, -1000, 330, 147, 229, 291, 229, 283, -1000, 680,
	238, 281, 221, 173, -1000, 393, -1000, -1000, 214, 42,
	213, 204, 203, 202, 199, 198, 197, 196, 31, 170,
	1276, 1276, 1276, 1276, -60, -1000, 1201, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 169, 168, 329, 325, 680,
	229, 229, -1000, 167, 1276, 1276, 1276, 1276, 1276, 1276,
	1276, 1276, 1276, 1276, 1276, 1276, 1276, -61, -62, 29,
	-63, -67, 1276, 1276, 1276, 1276, 1276, 1276, -10, 65,
	1276, 1276, 49, 76, 34, 1276, 471, 1276, 1276, 235,
	234, 232, 230, 123, -1000, 358, 229, -4, 329, -1000,
	1423, 1423, 64, 1349, 60, -84, 118, -1000, 1349, 291,
	1276, 329, 114, 318, 226, 680, -1000, -1000, 27, -1000,
	119, 113, 337, 144, 163, 163, 163, -44, -44, -13,
	-13, -13, -1000, -1000, -1000, -1000, -73, -1000, -1000, 1190,
	1190, 1190, 1190, 1190, 1190, 51, -74, -75, 28, -76,
	-78, 1423, 1387, -1000, 79, -1000, -1000, -1000, 1276, 111,
	-1000, 32, 1276, 1276, 1123, 129, 1349, -1000, 1084, 1035,
	146, 141, 139, 321, -1000, -1000, 110, 27, 69, 66,
	-1000, 107, -1000, 1276, -1000, -80, 1276, -1000, 680, 106,
	1349, 90, -1000, 315, 1276, 680, 680, -1000, 258, -1000,
	257, 256, 250, 249, -1000, 88, 73, -1000, -10, -1000,
	-1000, -81, -1000, -1000, -1000, -1000, -1000, -1000, 996, 5,
	-1000, 948, 1349, 1276, -1000, 1276, 1276, 224, 1276, 1276,
	1276, 1276, -1000, -1000, 27, 27, -1000, 1349, -87, 1349,
	122, -1000, 1276, -1000, 304, 309, 1349, -1000, 228, -1000,
	-1000, -1000, 247, -1000, 246, -1000, -1000, -1000, -1000, -1000,
	5, -12, 149, 1276, 1349, 1349, 909, 81, 861, 812,
	763, 715, -1000, -1000, 1276, 318, 1349, 312, 1276, 680,
	1276, -1000, -1000, -12, -1000, 145, 317, 1349, -1000, -1000,
	1276, 1276, -1000, -1000, 1349, 315, 302, 308, 1349, 138,
	1310, -1000, 271, 1276, 602, 554, 304, 300, -56, 1276,
	1276, 306, 506, -1000, -1000, 312, -1000, -56, -1000, 131,
	-1000, 280, 1190, 471, -1000, 302, -1000, 1276, 277, -1000,
	-1000, 136, 300, -1000, -1000, 284, 67, -1000, -1000, -1000,
	-1000,
}

var yyPgo = [...]int16{
	0, 386, 0, 385, 16, 193, 384, 11, 7, 383,
	382, 12, 381, 380, 14, 365, 364, 351, 19, 4,
	21, 6, 10, 18, 13, 350, 8, 349, 348, 347,
	15, 2, 3, 346, 342, 5, 1, 339, 9, 338,
}

var yyR1 = [...]int8{
	0, 1, 20, 6, 6, 12, 12, 13, 13, 23,
	23, 23, 23, 5, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 4, 10, 10, 17, 17, 30, 30,
	30, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 22, 22, 29, 29, 26, 26, 26,
	27, 27, 27, 28, 28, 28, 38, 38, 34, 34,
	34, 34, 34, 34, 34, 39, 39, 24, 24, 25,
	25, 25, 19, 14, 14, 14, 14, 18, 9, 9,
	37, 37, 11, 11, 7, 7, 8, 8, 21, 21,
	16, 16, 16, 15, 15, 15, 31, 33, 33, 32,
	32, 35, 35, 36, 36,
}

var yyR2 = [...]int8{
	0, 12, 10, 2, 0, 1, 0, 6, 7, 3,
	2, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 1, 1, 1, 0, 5, 1,
	0, 1, 7, 6, 4, 4, 6, 6, 8, 8,
	6, 6, 3, 3, 4, 5, 5, 4, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 3, 3, 4, 3, 3, 3, 3, 3,
	3, 3, 3, 5, 4, 4, 5, 4, 4, 2,
	2, 3, 3, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 3, 1, 3, 1, 3, 1, 1, 3,
	1, 3, 0, 3, 5, 0, 7, 0, 1, 2,
	2, 3, 2, 3, 2, 1, 2, 1, 0, 2,
	3, 7, 1, 0, 3, 4, 4, 1, 0, 2,
	4, 5, 0, 5, 0, 2, 0, 2, 0, 3,
	0, 2, 2, 0, 1, 1, 3, 3, 1, 0,
	3, 0, 2, 0, 2,
}

var yyChk = [...]int16{
	-1000, -1, -12, -13, 16, 7, 50, -18, 48, -30,
	18, -18, 20, -22, -23, -2, 94, -4, 47, 66,
	29, 30, 33, 35, 36, 32, 31, 34, -18, 21,
	93, 64, 63, 52, 54, -3, 49, 101, 57, 58,
	56, 59, 103, 102, -5, 46, 20, 49, -6, 50,
	17, 20, -18, 82, 86, 87, 88, 89, 91, 90,
	92, 93, 94, 95, 96, 97, 98, 80, 81, 78,
	63, 79, 72, 73, 74, 75, 76, 77, 65, 64,
	61, 60, 83, 49, -37, 67, 49, 49, 49, 49,
	49, 49, 49, 49, -14, 49, 100, 52, 49, -2,
	-2, -2, -27, -2, -28, 103, -10, -20, -2, 7,
	49, 49, -20, -24, -25, 8, -23, -5, -18, -18,
	49, -2, -2, -2, -2, -2, -2, -2, -2, -2,
	-2, -2, -2, -2, 103, 103, 71, 103, 103, -2,
	-2, -2, -2, -2, -2, -4, 81, 80, 78, 63,
	79, -2, -2, 56, 64, 59, 57, 58, -17, 94,
	18, -9, 67, 69, -2, -26, -2, 94, -2, -2,
	48, 48, 48, 48, 51, 51, -26, -18, -19, 48,
	101, -20, 53, 50, 55, 50, 104, 51, -30, -29,
	-2, -20, 51, -7, 9, -39, -34, 50, 42, 39,
	43, 40, 41, 45, -23, -20, -26, 103, 61, 103,
	103, 71, 103, 103, 56, 59, 57, 58, -2, 51,
	70, -2, -2, 68, 51, 50, 50, 20, 50, 50,
	50, 8, 51, -14, 53, 53, 51, -2, 103, -2,
	-22, 51, 50, 51, -21, 10, -2, -23, -23, 39,
	39, 39, 44, 39, 44, 39, 51, 51, -4, 103,
	51, -11, 85, 68, -2, -2, -2, 48, -2, -2,
	-2, -2, -14, -14, 104, -24, -2, -8, 13, 12,
	46, 39, 39, -11, -38, 84, 49, -2, 51, 51,
	50, 50, 51, 51, -2, -7, -32, 11, -2, -22,
	-2, -38, 49, 9, -2, -2, -21, -35, 14, 12,
	72, 27, -2, 51, 51, -8, -36, 15, -19, -33,
	-31, -2, -2, 12, 51, -32, -19, 50, -15, 25,
	26, -26, -35, -31, -16, 22, -32, -36, 23, 24,
	51,
}

var yyDef = [...]int16{
	6, -2, 0, 5, 0, 30, 0, 0, 127, 0,
	29, 0, 0, 4, 93, 11, 12, 31, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 123, 0,
	0, 0, 0, 102, 105, 22, 0, 14, 15, 16,
	17, 18, 19, 20, 21, 0, 0, 0, 118, 0,
	0, 0, 10, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 27, 128, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 13, 0, 0, 0, 0, 61,
	79, 80, 0, 100, 0, 0, 0, 24, 25, 30,
	0, 0, 0, 134, 117, 0, 94, 3, 123, 9,
	0, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 62, 63, 0, 65, 66, 67,
	68, 69, 70, 71, 72, 0, 0, 0, 0, 0,
	0, 81, 82, 83, 0, 85, 87, 89, 0, 0,
	26, 0, 0, 0, 0, 0, 97, 98, 0, 0,
	0, 0, 0, 0, 42, 43, 0, 123, 0, 0,
	122, 0, 91, 0, 92, 0, 0, 23, 0, 0,
	95, 0, 7, 138, 0, 0, 0, 115, 0, 108,
	0, 0, 0, 0, 119, 0, 0, 64, 0, 74,
	75, 0, 77, 78, 84, 86, 88, 90, 0, 132,
	34, 0, 129, 0, 35, 0, 0, 0, 0, 0,
	0, 0, 44, 124, 123, 123, 47, 101, 0, 103,
	118, 28, 0, 8, 136, 0, 135, 120, 0, 116,
	109, 110, 0, 112, 0, 114, 45, 46, 73, 76,
	132, 107, 0, 0, 130, 99, 0, 0, 0, 0,
	0, 0, 125, 126, 0, 134, 96, 149, 0, 0,
	0, 111, 113, 107, 33, 0, 0, 131, 36, 37,
	0, 0, 40, 41, 104, 138, 151, 0, 137, 139,
	0, 32, 0, 0, 0, 0, 136, 153, 0, 0,
	0, 0, 0, 38, 39, 149, 1, 0, 152, 150,
	148, 143, -2, 0, 133, 151, 154, 0, 140, 144,
	145, 149, 153, 147, 146, 0, 0, 2, 141, 142,
	106,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 62, 3, 3, 3, 96, 88, 3,
	49, 51, 94, 92, 50, 93, 100, 95, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 104, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 52, 3, 53, 87, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 54, 86, 55, 63,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 56, 57, 58,
	59, 60, 61, 64, 65, 66, 67, 68, 69, 70,
	71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
	81, 82, 83, 84, 85, 89, 90, 91, 97, 98,
	99, 101, 102, 103,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-12 : yypt+1]
//line partiql.y:118
		{
			yylex.(*scanner).with = yyDollar[1].with
			yylex.(*scanner).into = yyDollar[5].expr
			distinct, distinctExpr := decodeDistinct(yyDollar[3].values)
			yylex.(*scanner).result = &expr.Select{Distinct: distinct, DistinctExpr: distinctExpr, Columns: yyDollar[4].bindings, From: yyDollar[6].from, Where: yyDollar[7].expr, GroupBy: yyDollar[8].bindings, Having: yyDollar[9].expr, OrderBy: yyDollar[10].orders, Limit: yyDollar[11].exprint, Offset: yyDollar[12].exprint}
		}
	case 2:
		yyDollar = yyS[yypt-10 : yypt+1]
//line partiql.y:127
		{
			distinct, distinctExpr := decodeDistinct(yyDollar[2].values)
			yyVAL.sel = &expr.Select{Distinct: distinct, DistinctExpr: distinctExpr, Columns: yyDollar[3].bindings, From: yyDollar[4].from, Where: yyDollar[5].expr, GroupBy: yyDollar[6].bindings, Having: yyDollar[7].expr, OrderBy: yyDollar[8].orders, Limit: yyDollar[9].exprint, Offset: yyDollar[10].exprint}
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:133
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 4:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:133
		{
			yyVAL.expr = nil
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:136
		{
			yyVAL.with = yyDollar[1].with
		}
	case 6:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:136
		{
			yyVAL.with = nil
		}
	case 7:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:139
		{
			yyVAL.with = []expr.CTE{{yyDollar[2].str, yyDollar[5].sel}}
		}
	case 8:
		yyDollar = yyS[yypt-7 : yypt+1]
//line partiql.y:140
		{
			yyVAL.with = append(yyDollar[1].with, expr.CTE{yyDollar[3].str, yyDollar[6].sel})
		}
	case 9:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:146
		{
			yyVAL.bind = expr.Bind(yyDollar[1].expr, yyDollar[3].str)
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:147
		{
			yyVAL.bind = expr.Bind(yyDollar[1].expr, yyDollar[2].str)
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:148
		{
			yyVAL.bind = expr.Bind(yyDollar[1].expr, "")
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:149
		{
			yyVAL.bind = expr.Bind(expr.Star{}, "")
		}
	case 13:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:152
		{
			yyVAL.expr = &expr.Path{First: yyDollar[1].str, Rest: yyDollar[2].pc}
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:156
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:157
		{
			yyVAL.expr = expr.Bool(true)
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:158
		{
			yyVAL.expr = expr.Bool(false)
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:159
		{
			yyVAL.expr = expr.Null{}
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:160
		{
			yyVAL.expr = expr.Missing{}
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:161
		{
			yyVAL.expr = expr.String(yyDollar[1].str)
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:162
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:163
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:175
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:176
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:179
		{
			yyVAL.expr = yyDollar[1].sel
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:180
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:183
		{
			yyVAL.yesno = true
		}
	case 27:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:183
		{
			yyVAL.yesno = false
		}
	case 28:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:186
		{
			yyVAL.values = yyDollar[4].values
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:187
		{
			yyVAL.values = []expr.Node{}
		}
	case 30:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:188
		{
			yyVAL.values = nil
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:194
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 32:
		yyDollar = yyS[yypt-7 : yypt+1]
//line partiql.y:198
		{
			yyVAL.expr = toAggregate(expr.AggregateOp(yyDollar[1].integer), yyDollar[4].expr, yyDollar[3].yesno, yyDollar[6].expr, yyDollar[7].wind)
		}
	case 33:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:202
		{
			distinct := false
			yyVAL.expr = toAggregate(expr.AggregateOp(yyDollar[1].integer), expr.Star{}, distinct, yyDollar[5].expr, yyDollar[6].wind)
		}
	case 34:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:207
		{
			yyVAL.expr = &expr.Case{Limbs: yyDollar[2].limbs, Else: yyDollar[3].expr}
		}
	case 35:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:211
		{
			yyVAL.expr = expr.Coalesce(yyDollar[3].values)
		}
	case 36:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:215
		{
			yyVAL.expr = expr.NullIf(yyDollar[3].expr, yyDollar[5].expr)
		}
	case 37:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:219
		{
			nod, ok := buildCast(yyDollar[3].expr, yyDollar[5].str)
			if !ok {
				yylex.Error(__yyfmt__.Sprintf("bad CAST type %q", yyDollar[5].str))
				return 1
			}
			yyVAL.expr = nod
		}
	case 38:
		yyDollar = yyS[yypt-8 : yypt+1]
//line partiql.y:228
		{
			part, ok := timePart(yyDollar[3].str)
			if !ok {
				yylex.Error(__yyfmt__.Sprintf("bad DATE_ADD part %q", yyDollar[3].str))
			}
			yyVAL.expr = expr.DateAdd(part, yyDollar[5].expr, yyDollar[7].expr)
		}
	case 39:
		yyDollar = yyS[yypt-8 : yypt+1]
//line partiql.y:236
		{
			part, ok := timePart(yyDollar[3].str)
			if !ok {
				yylex.Error(__yyfmt__.Sprintf("bad DATE_DIFF part %q", yyDollar[3].str))
			}
			yyVAL.expr = expr.DateDiff(part, yyDollar[5].expr, yyDollar[7].expr)
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:244
		{
			part, ok := timePart(yyDollar[3].str)
			if !ok {
				yylex.Error(__yyfmt__.Sprintf("bad DATE_TRUNC part %q", yyDollar[3].str))
			}
			yyVAL.expr = expr.DateTrunc(part, yyDollar[5].expr)
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
//line partiql.y:252
		{
			part, ok := timePart(yyDollar[3].str)
			if !ok {
				yylex.Error(__yyfmt__.Sprintf("bad EXTRACT part %q", yyDollar[3].str))
			}
			yyVAL.expr = expr.DateExtract(part, yyDollar[5].expr)
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:260
		{
			yyVAL.expr = yylex.(*scanner).utcnow()
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:264
		{
			op := expr.Call(yyDollar[1].str)
			if op.Private() {
				yylex.Error(__yyfmt__.Sprintf("cannot use reserved builtin %q", yyDollar[1].str))
			}
			yyVAL.expr = op
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:272
		{
			op := expr.Call(yyDollar[1].str, yyDollar[3].values...)
			if op.Private() {
				yylex.Error(__yyfmt__.Sprintf("cannot use reserved builtin %q", yyDollar[1].str))
			}
			yyVAL.expr = op
		}
	case 45:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:280
		{
			yyVAL.expr = expr.CallOp(expr.InSubquery, yyDollar[1].expr, yyDollar[4].sel)
		}
	case 46:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:284
		{
			yyVAL.expr = expr.In(yyDollar[1].expr, yyDollar[4].values...)
		}
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:288
		{
			yyVAL.expr = exists(yyDollar[3].sel)
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:292
		{
			yyVAL.expr = expr.BitOr(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:296
		{
			yyVAL.expr = expr.BitXor(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:300
		{
			yyVAL.expr = expr.BitAnd(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:304
		{
			yyVAL.expr = expr.ShiftLeftLogical(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:308
		{
			yyVAL.expr = expr.ShiftRightLogical(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:312
		{
			yyVAL.expr = expr.ShiftRightArithmetic(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:316
		{
			yyVAL.expr = expr.Add(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:320
		{
			yyVAL.expr = expr.Sub(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:324
		{
			yyVAL.expr = expr.Mul(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:328
		{
			yyVAL.expr = expr.Div(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:332
		{
			yyVAL.expr = expr.Mod(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:336
		{
			yyVAL.expr = expr.Call("CONCAT", yyDollar[1].expr, yyDollar[3].expr)
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:340
		{
			yyVAL.expr = expr.Append(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:344
		{
			yyVAL.expr = expr.Neg(yyDollar[2].expr)
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:348
		{
			yyVAL.expr = expr.Compare(expr.Ilike, yyDollar[1].expr, expr.String(yyDollar[3].str))
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:352
		{
			yyVAL.expr = expr.Compare(expr.Like, yyDollar[1].expr, expr.String(yyDollar[3].str))
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:356
		{
			yyVAL.expr = expr.Compare(expr.SimilarTo, yyDollar[1].expr, expr.String(yyDollar[4].str))
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:360
		{
			yyVAL.expr = expr.Compare(expr.RegexpMatch, yyDollar[1].expr, expr.String(yyDollar[3].str))
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:364
		{
			yyVAL.expr = expr.Compare(expr.RegexpMatchCi, yyDollar[1].expr, expr.String(yyDollar[3].str))
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:368
		{
			yyVAL.expr = expr.Compare(expr.Equals, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:372
		{
			yyVAL.expr = expr.Compare(expr.NotEquals, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:376
		{
			yyVAL.expr = expr.Compare(expr.Less, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:380
		{
			yyVAL.expr = expr.Compare(expr.LessEquals, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:384
		{
			yyVAL.expr = expr.Compare(expr.Greater, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:388
		{
			yyVAL.expr = expr.Compare(expr.GreaterEquals, yyDollar[1].expr, yyDollar[3].expr)
		}
	case 73:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:392
		{
			yyVAL.expr = expr.Between(yyDollar[1].expr, yyDollar[3].expr, yyDollar[5].expr)
		}
	case 74:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:396
		{
			yyVAL.expr = &expr.Not{Expr: expr.Compare(expr.Like, yyDollar[1].expr, expr.String(yyDollar[4].str))}
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:400
		{
			yyVAL.expr = &expr.Not{Expr: expr.Compare(expr.Ilike, yyDollar[1].expr, expr.String(yyDollar[4].str))}
		}
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:404
		{
			yyVAL.expr = &expr.Not{Expr: expr.Compare(expr.SimilarTo, yyDollar[1].expr, expr.String(yyDollar[5].str))}
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:408
		{
			yyVAL.expr = &expr.Not{Expr: expr.Compare(expr.RegexpMatch, yyDollar[1].expr, expr.String(yyDollar[4].str))}
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:412
		{
			yyVAL.expr = &expr.Not{Expr: expr.Compare(expr.RegexpMatchCi, yyDollar[1].expr, expr.String(yyDollar[4].str))}
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:416
		{
			yyVAL.expr = &expr.Not{Expr: yyDollar[2].expr}
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:420
		{
			yyVAL.expr = expr.BitNot(yyDollar[2].expr)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:424
		{
			yyVAL.expr = expr.And(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:428
		{
			yyVAL.expr = expr.Or(yyDollar[1].expr, yyDollar[3].expr)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:432
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsNull, Expr: yyDollar[1].expr}
		}
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:436
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsNotNull, Expr: yyDollar[1].expr}
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:440
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsMissing, Expr: yyDollar[1].expr}
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:444
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsNotMissing, Expr: yyDollar[1].expr}
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:448
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsTrue, Expr: yyDollar[1].expr}
		}
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:452
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsNotTrue, Expr: yyDollar[1].expr}
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:456
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsFalse, Expr: yyDollar[1].expr}
		}
	case 90:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:460
		{
			yyVAL.expr = &expr.IsKey{Key: expr.IsNotFalse, Expr: yyDollar[1].expr}
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:464
		{
			yyVAL.expr = expr.Call("MAKE_LIST", yyDollar[2].values...)
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:468
		{
			yyVAL.expr = expr.Call("MAKE_STRUCT", yyDollar[2].values...)
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:474
		{
			yyVAL.bindings = []expr.Binding{yyDollar[1].bind}
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:475
		{
			yyVAL.bindings = append(yyDollar[1].bindings, yyDollar[3].bind)
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:479
		{
			yyVAL.values = []expr.Node{yyDollar[1].expr}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:480
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].expr)
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:484
		{
			yyVAL.values = []expr.Node{yyDollar[1].expr}
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:485
		{
			yyVAL.values = []expr.Node{expr.Star{}}
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:486
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].expr)
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:490
		{
			yyVAL.values = []expr.Node{yyDollar[1].expr}
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:491
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].expr)
		}
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:492
		{
			yyVAL.values = nil
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:496
		{
			yyVAL.values = []expr.Node{expr.String(yyDollar[1].str), yyDollar[3].expr}
		}
	case 104:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:497
		{
			yyVAL.values = append(yyDollar[1].values, expr.String(yyDollar[3].str), yyDollar[5].expr)
		}
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:498
		{
			yyVAL.values = nil
		}
	case 106:
		yyDollar = yyS[yypt-7 : yypt+1]
//line partiql.y:502
		{
			yyVAL.wind = &expr.Window{PartitionBy: yyDollar[5].values, OrderBy: yyDollar[6].orders}
		}
	case 107:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:505
		{
			yyVAL.wind = nil
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:508
		{
			yyVAL.jk = expr.InnerJoin
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:509
		{
			yyVAL.jk = expr.InnerJoin
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:510
		{
			yyVAL.jk = expr.LeftJoin
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:511
		{
			yyVAL.jk = expr.LeftJoin
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:512
		{
			yyVAL.jk = expr.RightJoin
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:513
		{
			yyVAL.jk = expr.RightJoin
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:514
		{
			yyVAL.jk = expr.FullJoin
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:519
		{
			yyVAL.from = yyDollar[1].from
		}
	case 118:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:520
		{
			yyVAL.from = nil
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:527
		{
			yyVAL.from = &expr.Table{Binding: yyDollar[2].bind}
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:528
		{
			yyVAL.from = &expr.Join{Kind: expr.CrossJoin, Left: yyDollar[1].from, Right: yyDollar[3].bind}
		}
	case 121:
		yyDollar = yyS[yypt-7 : yypt+1]
//line partiql.y:530
		{
			yyVAL.from = &expr.Join{Kind: yyDollar[2].jk, Left: yyDollar[1].from, Right: yyDollar[3].bind, On: &expr.OnEquals{Left: yyDollar[5].expr, Right: yyDollar[7].expr}}
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:533
		{
			var idxerr error
			yyVAL.integer, idxerr = toint(yyDollar[1].expr)
			if idxerr != nil {
				yylex.Error(idxerr.Error())
			}
		}
	case 123:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:536
		{
			yyVAL.pc = nil
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:537
		{
			yyVAL.pc = &expr.Dot{Field: yyDollar[2].str, Rest: yyDollar[3].pc}
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:538
		{
			yyVAL.pc = &expr.LiteralIndex{Field: yyDollar[2].integer, Rest: yyDollar[4].pc}
		}
	case 126:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:539
		{
			yyVAL.pc = &expr.Dot{Field: yyDollar[2].str, Rest: yyDollar[4].pc}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:548
		{
			yyVAL.str = yyDollar[1].str
		}
	case 128:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:551
		{
			yyVAL.expr = nil
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:552
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 130:
		yyDollar = yyS[yypt-4 : yypt+1]
//line partiql.y:555
		{
			yyVAL.limbs = []expr.CaseLimb{{When: yyDollar[2].expr, Then: yyDollar[4].expr}}
		}
	case 131:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:556
		{
			yyVAL.limbs = append(yyDollar[1].limbs, expr.CaseLimb{When: yyDollar[3].expr, Then: yyDollar[5].expr})
		}
	case 132:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:559
		{
			yyVAL.expr = nil
		}
	case 133:
		yyDollar = yyS[yypt-5 : yypt+1]
//line partiql.y:560
		{
			yyVAL.expr = yyDollar[4].expr
		}
	case 134:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:563
		{
			yyVAL.expr = nil
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:564
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 136:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:567
		{
			yyVAL.expr = nil
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:568
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:571
		{
			yyVAL.bindings = nil
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:572
		{
			yyVAL.bindings = yyDollar[3].bindings
		}
	case 140:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:576
		{
			yyVAL.yesno = false
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:577
		{
			yyVAL.yesno = false
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:578
		{
			yyVAL.yesno = true
		}
	case 143:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:582
		{
			yyVAL.yesno = false
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:583
		{
			yyVAL.yesno = false
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:584
		{
			yyVAL.yesno = true
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:588
		{
			yyVAL.order = expr.Order{Column: yyDollar[1].expr, Desc: yyDollar[2].yesno, NullsLast: yyDollar[3].yesno}
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:591
		{
			yyVAL.orders = append(yyDollar[1].orders, yyDollar[3].order)
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line partiql.y:592
		{
			yyVAL.orders = []expr.Order{yyDollar[1].order}
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:595
		{
			yyVAL.orders = nil
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line partiql.y:596
		{
			yyVAL.orders = yyDollar[3].orders
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:599
		{
			yyVAL.exprint = nil
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:600
		{
			n := expr.Integer(yyDollar[2].integer)
			yyVAL.exprint = &n
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line partiql.y:603
		{
			yyVAL.exprint = nil
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line partiql.y:604
		{
			n := expr.Integer(yyDollar[2].integer)
			yyVAL.exprint = &n
		}
	}
	goto yystack /* stack new state and value */
}
